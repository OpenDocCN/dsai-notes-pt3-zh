- en: 【双语字幕+资料下载】用 Pandas 进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P6：6）增删 - 从Dataframe中添加与删除行和列
    - ShowMeAI - BV1M64y187bz
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】用 Pandas 进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P6：6）增删 - 从Dataframe中添加与删除行和列
    - ShowMeAI - BV1M64y187bz
- en: Hey there。 How's it going， everybody。 In this video。 we're gonna be learning
    how to add and remove columns from our data frames。 We'll also take a look at
    how we can combine information from multiple columns into one。 Now。 in my last
    video on updating rows and columns that one was pretty long。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好。你们过得怎么样？在这个视频中，我们将学习如何从数据框中添加和删除列。我们还会看看如何将多个列的信息合并为一个。现在，在我之前的视频中关于更新行和列的内容，那个视频比较长。
- en: But this one should be a lot shorter。 Now， I'd like to mention that we do have
    a sponsor for the series of videos。 And that is brilliant。 So I really want to
    think brilliant for sponsoring this series。 and it would be great if you all could
    check them out using the link in the description section below and support the
    sponsors。 And I'll talk more about their services in just a bit。 So with that
    said。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个应该短很多。现在，我想提一下，我们这系列视频有赞助商，那就是 Brilliant。因此，我真的想感谢 Brilliant 赞助这个系列，如果你们都能通过下面描述部分的链接查看他们并支持赞助商，那就太好了。我稍后会多谈谈他们的服务。所以说到这里。
- en: let's go ahead and get started。 Now， like I said， in the last video。 we saw
    how to update information within our rows and columns。 Now we're going to see
    how we can add and remove rows and columns。 First。 let's look at adding columns。
    Now， adding columns is going be pretty easy for us because it's basically the
    same thing that we did when we were updating values。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。正如我所说，在上一个视频中，我们看到了如何更新行和列中的信息。现在我们将看到如何添加和删除行和列。首先，让我们看看添加列。添加列对我们来说会很简单，因为这基本上与我们更新值时所做的相同。
- en: we can simply create a column。 And pass in a series of values that we want that
    column to have。 So I currently have my snippets file open here that we've seen
    in previous videos。😊。We can see what this looks like on a smaller data and as
    usual， if you want to follow along。 then I'll have links to the code and the notebooks
    and the data that I'm using in this series in the description section below so
    for example。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地创建一个列，并传入我们希望该列具有的一系列值。因此我现在在这里打开的代码片段文件是我们之前视频中见过的。😊。我们可以在较小的数据上查看这是什么样子，像往常一样，如果你想一起操作，我会在下面的描述部分提供代码、笔记本和我在本系列中使用的数据的链接。
- en: let's say that we wanted to combine our first name and last name column into
    a single column and simply call that column first name So first。 in order to get
    a series of the first name and last name combined we could simply say when I come
    down here to the bottom we can simply grab that first column and then we can just
    add these together and I'm putting a space between there。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想把名字列和姓氏列合并成一个单独的列，并称之为名字。那么首先，为了获取合并后的名字和姓氏的序列，我们可以简单地说，当我来到这里的底部时，我们可以抓取第一列，然后将这些列相加，并在中间加上空格。
- en: and then I will add in the last name and if I run this whoops and I missed my
    second plus symbol there now if I run this then we can see that we get the first
    name and then a space that's what this section is doing here and then the last
    name so now that we have this series of values here。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将添加姓氏，如果我运行这个，哎呀，我漏掉了第二个加号，现在如果我运行这个，我们可以看到我们得到了名字和一个空格，这就是这一部分在做的事情，然后是姓氏。所以现在我们有了一系列的值。
- en: we can see that we have three values in order to add。These to a new column with
    these values we can simply say Df and then the name of what we want our new column
    do to be。 I'm going to call this full name and then I'm just going to copy this
    that gave us that series before and assign this full name column to that returned
    series So if I run that and then we look at our data frame then now we can see
    that our data frame here has this new column that is the first and the last name
    combined and again。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有三个值。为了将这些值添加到新列中，我们可以简单地说 Df，然后是我们想要的新列的名称。我将把这个叫做全名，然后我只需复制之前给我们这个序列的内容，并将这个全名列分配给那个返回的序列。所以如果我运行它，然后查看我们的数据框，那么现在我们可以看到我们的数据框这里有了这个新列，它是名字和姓氏的组合，再次。
- en: I'm using strings here but you could also create a new column using the apply
    method that we saw in the last video to have a new column for some mathematical
    analysis for another column in the data frame as well Now I do want to point out
    that you can't use the dot notation when assigning a column like this we have
    to use the brackets like we did here in order to make these assignments because
    if you use dot notation then Python is going to think that you're trying to assign
    an attribute onto the data frame。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里使用字符串，但你也可以使用我们在上一个视频中看到的 apply 方法创建一个新列，以便为数据框中的另一列进行某种数学分析。现在，我想指出的是，当像这样分配一列时，不能使用点符号，我们必须使用括号，如我们在这里所做的，以便进行这些分配，因为如果你使用点符号，Python
    会认为你试图将一个属性分配到数据框上。
- en: and not a column。 Okay， so that's how we'd add a column to our data frames。
    Now let's look at removing columns。 So now that we have our full name column。
    let's say that we no longer need or want our first and last name columns so to
    remove these。 I can use the drop method on our data frame。 So it's as easy as
    just saying Df do drop。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是一列。那么，我们就来看一下如何向数据框添加一列。现在我们来看一下如何删除列。既然我们有了全名列，我们可以说我们不再需要或想要我们的名字和姓氏列，所以要删除这些。我可以在我们的数据框上使用
    drop 方法。所以这就像说 Df do drop 一样简单。
- en: And now what do we want to drop。 we want to drop columns and the columns are
    going to be equal to。 And I'm going to pass in a list because we want to to delete
    multiple columns here。 So I want to delete the first column and the last column。
    So if I run this。 then we can see that it returns a data frame without those columns。
    And like we've seen before。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想删除什么呢？我们想删除列，而这些列将等于。我将传入一个列表，因为我们想删除多个列。所以我想删除第一列和最后一列。如果我运行这个，我们可以看到它返回一个没有这些列的数据框。就像我们之前看到的。
- en: this just gives us a view of what our data frame would look like。 but it doesn't
    actually apply those changes if we're happy with those changes。 then we can set
    the in place argument to true so that it changes our data frame in place So I
    can。Over here and just say in place equal to true within our drop method。 And
    if I run that。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是给我们一个视图，显示我们的数据框看起来会是什么样子，但如果我们对这些更改满意，它并不会实际应用这些更改。那么我们可以将 in place 参数设置为
    true，以便它在原地更改我们的数据框。所以我可以在这里说 in place 等于 true，在我们的 drop 方法内。如果我运行这个。
- en: and then we look at our data frame， then now we can see that our data frame
    no longer has that first and last name column。 Now if we wanted to reverse that
    process and split that full name column into two different columns then that's
    a little more complicated but still pretty simple。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们查看我们的数据框，现在我们可以看到我们的数据框不再有名字和姓氏列。如果我们想反转这个过程，将全名列分割成两列，那就稍微复杂一些，但仍然相对简单。
- en: So we've seen the string split method a few times in the series so far。 So let's
    run that on our full name column and see what we get。 So I'm going to say Df and
    access that full name column。 And now I'm going to use that string class on our
    series。 and then we will do a split。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列中，我们已经看过几次字符串分割方法。现在我们来对全名列运行一下，看看我们得到什么。我将说 Df，并访问那个全名列。现在我将对我们的系列使用字符串类，然后我们将进行分割。
- en: and we'll just split this on a space。 Now split splits on spaces by default。
    but I just want to be explicit here。 So if we run this then the result of that
    split method is that we get the first name and the last name and a list。 So。First
    name is the first value and the last name is the second value。 Now。 if we want
    to assign these two two different columns。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据空格进行分割。现在分割默认是基于空格的，但我想在这里明确一下。所以如果我们运行这个，那么分割方法的结果是我们得到名字和姓氏的列表。因此，名字是第一个值，姓氏是第二个值。现在，如果我们想将这两个分配到不同的列中。
- en: then we need to expand this list so that they're actually in two different columns。
    So to do this in pandas we can use the expand argument so let's see what this
    looks like So this is within the split method here and we can just pass in another
    argument and say expand is equal to true。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要扩展这个列表，使它们实际上分布在两列中。要在 pandas 中做到这一点，我们可以使用 expand 参数，让我们看看这是什么样子。所以这是在分割方法内，我们可以传入另一个参数，并说
    expand 等于 true。
- en: So if I run this then we can see that the results are pretty similar。 but now
    everything that was in our list is split up into columns So now we have two columns
    here of those split results。 So now what we need to do is set two columns in our
    data frame to those two columns that were just returned So we can say I'm going
    to if we remember from earlier in the series if we want to access multiple columns
    then within the brackets we can pass in a list so we're going to have two pairs
    of brackets here the inner bracket is our list。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行这个，那么我们可以看到结果非常相似。但现在我们列表中的所有内容都被分割成了列。因此我们在这里有两个分割结果的列。现在我们需要做的是将数据框中的两列设置为刚刚返回的这两列。所以我们可以说，如果我们记得在系列早期的内容，如果我们想访问多列，那么在括号内我们可以传入一个列表，因此我们将有两个括号，内层括号是我们的列表。
- en: Of columns。 So I want to add a first column and a last column and we're going
    to set that equal to this what we did here with the split method。 So if I run
    this。 then now our first and last columns should have been assigned to these columns
    here。 So let's take a look at our data frame and see if that worked。 So we can
    see that now we added a first and a last column with the values that we returned
    up here。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于列。我想添加第一列和最后一列，我们将把其设置为我们在这里使用split方法所做的那样。如果我运行这个，那么我们的第一列和最后一列应该已被分配到这些列中。让我们看看我们的数据框，看看这是否有效。我们可以看到现在我们添加了第一列和最后一列，并且它们的值是我们在这里返回的。
- en: Okay， so that's how we would add and remove columns。 So now let's look at adding
    and removing rows of data。 So there are a couple of different ways that we might
    want to add rows to our data frame。 So first。 we might just want to add a single
    row to our data frame of new data。 And second。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是我们如何添加和删除列的方式。现在让我们看一下添加和删除数据行的方法。有几种不同的方法可以将行添加到我们的数据框中。首先，我们可能只是想将一行新数据添加到我们的数据框中。其次。
- en: maybe we want to combine two data frames together into a single data frame by
    appending the rows of one to another。 So first， let's look at adding a single
    row of data。So we can do this with the appendned method。 So if I want to add a
    single row， then I can just say Df do append。 and now we can pass in our values
    here。 So I'm just going to pass in a dictionary here and we'll pass in a first
    name of Tony。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们想将两个数据框合并成一个，通过将一行附加到另一行。所以首先，让我们看一下添加一行数据。我们可以使用附加方法来做到这一点。如果我想添加一行数据，我可以直接说Df
    do append。现在我们可以在这里传入我们的值。我将传入一个字典，并传入一个名字为Tony。
- en: So if I run this。 then we can see that we get an error。 Now。 this is because
    this currently doesn't have an index。 Now it can sometimes be difficult to read
    these panda as errors and figure out what the problem is。 But in this case it
    tells us exactly what to do。 It says down here at the bottom can only append a
    series if ignore index is equal to true or if the series has a name。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行这个，我们可以看到我们得到一个错误。现在，这是因为目前没有索引。有时很难读取这些pandas错误并弄清楚问题所在。但在这种情况下，它确切地告诉我们该怎么做。它在底部说只能在ignore
    index等于true或系列有名称的情况下附加一个系列。
- en: So let's just ignore the index and our existing data frame will automatically
    assign this new row an index itself。 So up here at the top， we can simply pass
    in an argument of ignore underscore index。 and set that equal to true。 Now if
    I run this。Then we can see that that worked。 We're no longer getting an error
    And also down here at the bottom。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们就忽略索引，我们现有的数据框将自动为这一新行分配一个索引。在顶部，我们可以简单地传入一个参数ignore underscore index，并将其设置为true。现在如果我运行这个，就能看到它成功了。我们不再收到错误，并且在底部也没有问题。
- en: We can see that this new name was appendant。 Now we only assign this row a first
    name value So we can see here that we assign that as Tony and all of the other
    column values are set to in a which is not a number which is used for missing
    values。 So you can pass in an entire series or list of information there in order
    to add a single row of data of any information that you want。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这个新名称是附加的。现在我们只为这一行分配一个名字值。因此我们可以看到这里将其分配为Tony，其他所有列的值都设置为一个表示缺失值的非数字值。所以你可以传入一个完整的系列或信息列表，以便添加你想要的任何信息的单行数据。
- en: Now if we have a data frame that we'd like to append to our existing data frame。
    then we can do that as well。 So let me create a new data frame here from our existing
    values up here at the top。 So I'm just going to scroll up here。 And I'm going
    to grab our first dictionary here of the data that we originally created our data
    frame with。 and I'm going to modify this a bit。 So I'm going to just have this
    B two names here。 So I'm。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们有一个想要附加到现有数据框的数据框，我们也可以做到这一点。所以让我从顶部的现有值创建一个新的数据框。我将向上滚动，抓取我们最初创建数据框时的第一个字典，并稍微修改一下。所以我只会保留这两个名字。
- en: Take out these third values and then we will go ahead and update these So update
    these。 So for the first name I'll do Tony and Steve and for the last name。 I'll
    do stark and Rogers and for the email addresses let's see I'll do Ironman at Avenge
    do co and for the second one。 I'll do cap at Avenge do co。 So now I'm going to
    create a new data frame here from this new dictionary。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 取出这些第三个值，然后我们将继续更新这些。所以更新这些。对于第一个名字，我将用托尼和史蒂夫，对于姓氏，我将用斯塔克和罗杰斯，对于电子邮件地址，让我们看看，我将用Ironman@Avenge.do.co，对于第二个，我将用cap@Avenge.do.co。现在我将根据这个新字典创建一个新的数据框。
- en: Now I'm going to call this Df2。 So now I can just say PD。t data frame。 and pass
    in that people dictionary there。 And now we should have a second data frame。 Okay。
    so now let's say that we want to add this to our existing data frame。 So one way
    we can do this is to simply append the one data frame to the other。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我要调用这个Df2。所以现在我可以说PD.t数据框，并传入那个people字典。现在我们应该有第二个数据框。好的。那么现在假设我们想将这个添加到现有数据框中。我们可以简单地将一个数据框附加到另一个数据框。
- en: Now these have conflicting indexes and they also have columns that are not in
    the same order。 So again， we're going to want to ignore the indexes when appending
    these so that they are assigned indexes properly。 So I'm going to say Df dot append
    And I'm going to pass in Df2。 so that it appends it to our original data frame。
    and then I'm going to say ignore underscore index is equal to true。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些有冲突的索引，并且它们的列顺序也不同。因此，我们再次希望在附加时忽略索引，以便正确分配索引。所以我将说Df.append，并传入Df2，以便将其附加到我们的原始数据框中。然后我将说ignore_index等于true。
- en: and if I run this here。 then we can see down here at the bottom that it added
    these new rows。 Now。 if you got a warning here， then the reason for this is because
    we didn't pass in all of the columns in the same order when appendending these。
    So it's。Given us a warning here that there are different ways that it could have
    sorted the columns。 so don't worry too much about that but in the future version
    of pandas。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在这里运行，那么我们可以在底部看到它添加了这些新行。现在，如果你收到警告，那么原因是因为在附加时我们没有以相同的顺序传入所有列。这给我们带来了一个警告，说明有不同的方法可以对列进行排序。所以不必太担心，但在未来的pandas版本中。
- en: it's going to set the sort to false by default and actually pandas version 1
    was just released as I was recording this series so this may have already been
    done but we can ignore this for now but if we wanted to then we could pass in
    the value of sort equal to false and get rid of this warning so if I went back
    up here and I pass in sort is equal to false and also when I run this it's no
    longer going to sort these columns here so if I run this。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它将默认将排序设置为false，实际上，pandas版本1在我录制这个系列时刚刚发布，所以这可能已经完成，但我们暂时可以忽略它。如果我们想的话，可以传入sort等于false的值，以消除这个警告。所以如果我回到这里，传入sort等于false，并且当我运行时，它将不再对这些列进行排序。
- en: then we can see that we no longer get that warning and now it's not sorting
    the columns anymore now unlike the drop method if we want to make these changes
    permanent then we don't have an inplace method to use instead we'd have to just
    set the data frame to this returned data frame by copying this and then we can
    say Df is equal to。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到不再出现那个警告，现在它也不再对列进行排序了。与drop方法不同的是，如果我们想让这些更改永久生效，那么我们就没有一个就地方法可以使用，而是必须通过复制这个返回的数据框来设置数据框，然后我们可以说Df等于。
- en: Then just pass in that returned data frame there。 So if I run that。 then we
    look at our original data frame， then we can see that those rows were added on
    there。 Now I'll be honest some of you might want to ask in the comment section
    below why some of these have an inplace argument and others don't but honestly
    I'm not really sure I'm sure there's a reason but I'd have to do some more digging
    around to find out exactly why but this append method doesn't have an inplace
    argument like the drop method has so we have to do it this way。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将返回的数据框传入。所以如果我运行这个。然后我们看看我们的原始数据框，我们可以看到那些行被添加上去了。老实说，有些人可能想在下面的评论区问为什么有些有inplace参数而有些没有，但说实话，我也不太确定，我相信是有原因的，但我还需要再深入探究一下，确切地找出原因，但这个append方法没有像drop方法那样有inplace参数，所以我们必须这样做。
- en: so lastly， let's look at removing rows so let's say that you're an Ironman fan
    and you want to remove Steve Rogers here from our data frame。 Now we can do that
    in almost the same way that we dropped our columns but instead of specifying the
    columns that we want to drop we can simply pass in the indexes that we want to
    drop So I can come down here and say Df do drop and we can see here on the far
    left if you watch my video on indexes this has an index of four so let's。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看删除行。假设你是一个钢铁侠的粉丝，你想从数据框中删除史蒂夫·罗杰斯。现在我们几乎可以以与删除列相同的方式做到这一点，但不是指定我们想删除的列，而是简单地传入我们想删除的索引。因此我可以在这里说Df
    do drop，我们可以在最左边看到，如果你看过我关于索引的视频，这个索引是四，所以让我们。
- en: Just say we want to drop an index of four。 So if I run this。 and we could see
    that we still have Ironman and Tony Stark here， but we no longer have Steve Rogers。
    So that fourth index was deleted。 And again， if you want to actually apply that
    to the data frame。 then you'll need to set the in place argument to true。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想删除索引为四的行。所以如果我运行这个。我们可以看到我们仍然有钢铁侠和托尼·斯塔克，但不再有史蒂夫·罗杰斯。因此第四个索引被删除了。而且，如果你想实际将其应用于数据框，那么你需要将inplace参数设置为true。
- en: Now you might want to do something a little more complicated and drop rows using
    a conditional。 Now I'd probably do this using Lo， like we saw in the previous
    video where we were learning about filtering data from our data frame。 So we can
    also do this using drop。 So if I wanted to drop all of the rows where the last
    name is equal to do。 So we have two of those values here。 then I can pass in the
    indexes of that filter。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能想做一些更复杂的事情，并使用条件删除行。现在我可能会像在之前的视频中那样使用Lo，我们学习了如何从数据框中过滤数据。所以我们也可以使用drop。因此如果我想删除所有姓氏等于do的行。我们这里有两个这样的值。然后我可以传入那个过滤器的索引。
- en: So let me show you what this means and it won't be as complicated。 So I can
    say Df do drop。 and now I'm going to say index is equal to。 And now I'm going
    to put in my conditional。 So if you remember。From the filtering video， we can
    actually pass the conditional here inside of our brackets。 So now I can say， okay，
    I want a conditional where the last name of that column equals equals do。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我来展示一下这是什么意思，没那么复杂。所以我可以说Df do drop。现在我要说index等于。接下来我将放入我的条件。所以如果你还记得。从过滤视频中，我们实际上可以在括号内传入条件。因此，现在我可以说，好吧，我想要一个条件，其中该列的姓氏等于do。
- en: Now， the only difference here。 is that we have a conditional here。 So we want
    the indexes since we're saying index is equal to。 So just here at the end。 I'm
    going to use this method and just say dot index。 So if I run this。 then we can
    see that it removed those values with the last name of do。 Now。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，唯一的区别在于。我们这里有一个条件。因此我们想要索引，因为我们说index等于。所以就在这里最后。我将使用这个方法，直接说.dot index。所以如果我运行这个。我们可以看到它移除了姓氏为do的那些值。现在。
- en: like I said in that filtering video I don't really like all of this being bunched
    up together because I think that it's hard to read and you always want your code
    to be easy to read by other developers。 So I would pull the conditional out into
    its own variable。 and instead。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在那个过滤视频中所说，我不太喜欢将所有内容挤在一起，因为我觉得这样很难阅读，你总是希望你的代码对其他开发者来说容易阅读。因此，我会将条件提取到自己的变量中，而不是。
- en: I would say something like this。 I would say filteril for filter is equal to。
    And then I'll just grab our conditional here。😊，Cut that out and paste that here。
    And now we can say that we want our filtered applied to that data frame and then
    grab the index of that。 So if I run this， then we can see that that gives us the
    exact same result。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我会这样说。我会说filteril的过滤条件等于。然后我会抓取我们的条件。😊，把它剪切出来并粘贴到这里。现在我们可以说我们想要将我们的过滤应用到那个数据框上，然后抓取它的索引。所以如果我运行这个，我们可以看到这给我们带来了完全相同的结果。
- en: but that's a little bit easier to read so that's been an overview of adding
    and removing rows and columns from our data frames Now before we end here I'd
    like to mention the sponsor of this video and that sponsor is brilliant。 So in
    this series， we've been learning about pandas and how to analyze data in Python
    and brilliant would be an excellent way to supplement what you learn here with
    their handson courses。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但那样更容易阅读，所以这就是关于从数据框中添加和删除行和列的概述。在结束之前，我想提一下本视频的赞助商，赞助商是brilliant。因此，在这个系列中，我们一直在学习pandas以及如何在Python中分析数据，而brilliant将是补充你在这里所学内容的绝佳方式，提供他们的实践课程。
- en: They have some excellent courses and lessons that do a deep dive on how to think
    about and analyze data correctly for data analysis fundamentals。 I would really
    recommend checking out their statistics course which shows you how to analyze
    graphs and determine significance in the data。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 他们有一些出色的课程和教学，深入讲解如何正确思考和分析数据，以掌握数据分析的基础。我真的推荐查看他们的统计课程，它教你如何分析图表并确定数据的显著性。
- en: and I would also recommend their machine learning course which takes data analysis
    to a new level where you' learn about the techniques being used that allow machines
    to make。😊。![](img/5df007f7bc271b60efa09726ca478ccf_1.png)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我还会推荐他们的机器学习课程，它将数据分析提升到一个新水平，在那里你将学习被用来让机器进行学习的技术。😊。![](img/5df007f7bc271b60efa09726ca478ccf_1.png)
- en: '![](img/5df007f7bc271b60efa09726ca478ccf_2.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df007f7bc271b60efa09726ca478ccf_2.png)'
- en: '![](img/5df007f7bc271b60efa09726ca478ccf_3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df007f7bc271b60efa09726ca478ccf_3.png)'
- en: '![](img/5df007f7bc271b60efa09726ca478ccf_4.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df007f7bc271b60efa09726ca478ccf_4.png)'
- en: Decisions where there's just too many variables for a human to consider。 So
    to support my channel and learn more about brilliant。 you can go to brilliant
    org forgelash cms to sign up for free。 And also the first 200 people they go to
    that link well get 20% off the annual premium subscription。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 决策中变量太多，无法让人类考虑。因此，为了支持我的频道并了解更多关于brilliant的信息，你可以去brilliant org forgelash cms注册，免费注册。此外，前200个访问该链接的人将获得年付高级订阅的20%折扣。
- en: And you can find that link in the description section below。 Again， that's brilliant
    org forge。 Okay， so I think that's gonna do it for this pandas video。 I hope you
    feel like you got a good idea for how to add and remove columns and rows from
    your data frame and feel comfortable doing that。 in the next video we'll be learning
    about different ways to sort our data。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下面的描述部分找到那个链接。再次提醒，那个是brilliant org forge。好吧，我想这就是本期pandas视频的内容。我希望你能对如何添加和删除数据框中的列和行有一个好的理解，并且能自信地做到这一点。在下一个视频中，我们将学习不同的排序数据的方法。
- en: But if anyone has any questions about what we covered in this video。 then feel
    free to ask in the comments section below and I'll do my best to answer those。
    And if you enjoy these tutorials and would like to support them。 then there are
    several ways you can do that。 the easiest ways to simply like the video and give
    it a thumbs up。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何人对我们在这个视频中讨论的内容有任何问题，请随时在下面的评论区提问，我会尽力回答这些问题。如果你喜欢这些教程并希望支持它们，有几种方式可以做到这一点，最简单的方法就是给视频点赞并给予好评。
- en: And also， it's a huge help to share these videos with anyone who you think would
    find them useful。 And if you have the means you can contribute through Patreon。
    And there's a link to that page in the description section below。😊。![](img/5df007f7bc271b60efa09726ca478ccf_6.png)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，将这些视频分享给任何你认为会觉得有用的人也是一个很大的帮助。如果你有条件，可以通过Patreon进行支持。这个页面的链接在下面的描述部分。😊。![](img/5df007f7bc271b60efa09726ca478ccf_6.png)
- en: Be sure to subscribe for future videos， and thank you all for watching。![](img/5df007f7bc271b60efa09726ca478ccf_8.png)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 确保订阅以获取未来的视频，感谢大家观看。![](img/5df007f7bc271b60efa09726ca478ccf_8.png)
