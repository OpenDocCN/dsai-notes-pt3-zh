- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P38：38）使用 Pickle 进行序列化 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P38：38）使用 Pickle 进行序列化 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/53fe70a8561215d4436c9c4659821325_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53fe70a8561215d4436c9c4659821325_0.png)'
- en: Welcome back everybody， my name's Brian and this video we're going to talk about
    pickle。 everybody's favorite， so what the heck is a pickle what are we even talking
    about this made me giggle so bad when I first was reading about it so。Pickling
    is a way of saving food。 It's a very old way of doing it。 And we're going to do
    the same thing with objects。 So we're going to serialize them。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，大家好，我是布莱恩，在这个视频中我们将讨论pickle，大家最喜欢的。那么，pickle到底是什么呢？当我第一次阅读它时，我忍不住笑了。腌制是一种保存食物的方法。这是一种非常古老的做法。我们将对对象做同样的事情。所以我们将对它们进行序列化。
- en: which is a more modern term， but we're going to preserve an object。 and that
    object can be saved and stored in another location， for example， on a disk。😊。So
    that's right。 you can make an object， save it， start your program back up and
    reload that object like nothing happened。 This is incredibly cool。 This is called
    serialization and it gets very， very complex。Pickle。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更现代的术语，但我们将保存一个对象。这个对象可以保存在另一个位置，例如，硬盘上。😊。没错，你可以创建一个对象，保存它，重新启动程序后重新加载这个对象，仿佛什么都没发生过。这非常酷。这被称为序列化，并且变得非常复杂。Pickle。
- en: while being great is not perfect。 It does have some limitations。 I would encourage
    you to go out and research dill， D I L L。 and there are other serialization tools
    out there as well to overcome some shortcomings of pickle。 We're going to go over
    just the very， very basics of pickling。So。What can you pickle first off。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然很棒，但并不完美。它确实有一些局限性。我鼓励你去研究dill，D I L L。还有其他序列化工具可以克服pickle的一些缺点。我们将仅讨论pickling的基础知识。那么，你首先能pickle什么呢？
- en: pretty much most Python data types and top level classes。 meaning if you make
    a class in a class in a class， in a class。You're going to have problems。 so first
    things first。Let's go ahead and import pickle。Okay， diving right in here。 first
    thing we're going to do is we are going to put in a decorator。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的Python数据类型和顶级类。意思是如果你在类中再定义一个类，再在那个类中定义一个类，你会遇到问题。所以首先，让我们导入pickle。好的，直接进入这里。我们要做的第一件事是添加一个装饰器。
- en: same decorator that we've used in the previous videos and if you missed my decorator
    video。 kit rewind on the playlist and watch the decorator tutorial。C you missed
    it。 all it's going to do is print a line。Print the function name， all the function，
    and print a line。All right， so our class is going to be overly simple because
    I'm focused on serializing and desializing this。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的装饰器和之前视频中相同，如果你错过了我的装饰器视频，可以回到播放列表观看装饰器教程。你错过了它。它将仅仅打印一行，打印函数名，所有的函数，并打印一行。好的，所以我们的类会非常简单，因为我专注于序列化和反序列化。
- en: We're looking at just the basics of serialization。 So we're going to say cat。And
    then。 we want to go deff。And I'm going to in it。And we want to。And it。With name。Page
    and info。So name and age seem pretty self explanatory。 We're looking for like
    a string in an integer。 But what is info。That's why we want to really dive into
    this video things are not always what they seem so。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是在查看序列化的基础知识。所以我们将说cat。然后，我们想去定义一个方法。我将要定义它。我们希望它包含name，age和info。所以name和age似乎很简单明了。我们要找的像是一个字符串和一个整数。但info是什么呢？这就是我们想深入探讨这个视频的原因，事情并不总是看起来那么简单。
- en: We're going to say self。 name。Equals name。And then we're just going to through
    the magic of copy and paste。Al be best if I just grab it right on the top there。And
    whoopsy， we don't want to mangle those。 There we go。 Almost created a little headache
    for us。 So we're going to say self underscore name。 self underscore age， self
    underscore info。 Again， the underscore denotes that these are internal to the
    class。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将说self.name等于name。然后通过复制和粘贴的魔法，我最好直接从顶部抓取它。哎呀，我们不想搞混它们。好了，差点给我们带来了一些麻烦。所以我们会说self._name，self._age，self._info。再次强调，底线符号表示这些是类内部的。
- en: and we don't want other peoplele playing with them。 So from here we're going
    to make a this be function。And we want to display some type of message。Let's go
    ahead and use our decorator。Just to decorate that， make it look nice and neat
    on the screen。And then we're going to just print out the message。Whatever the
    message is。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想让其他人玩弄它们。所以接下来我们将创建一个功能。我们想显示某种类型的消息。让我们使用我们的装饰器。只是为了装饰一下，让它在屏幕上看起来漂亮整齐。然后我们将打印出消息。不管消息是什么。
- en: But now we also want to print。And we want to put the。Or to put the name。Along
    with the age。Is a。Or I should say， is is old。HThat doesn't make much sense， does
    it？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们也想打印。我们想放入。或者说名字。还有年龄。是的。或者我应该说，是岁。那样不太有意义，是吗？
- en: I help the by spelled all of that correctly。 There we go。So name is a age years
    old cat。 There we go。 makes more sense now， and then we're going to take info
    and that's going to be a dictionary item。 So I'm going to say four。Okay， come
    a be。In self underscore info items。That way we can iterate through those dictionary
    items and print them out。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我帮忙拼写了所有这些。好了，猫的名字是年龄岁的猫。好了，现在更有意义了，然后我们将获取信息，这将是一个字典项。所以我会说四。好的，变成自我信息项。这样我们就可以迭代这些字典项并打印出来。
- en: And then we're going to just say。That was that。Pretty self explanatory what's
    going on here。As you can see， this is not a super， super complex class。Just wanted
    to cover the basics of it。 So you knew exactly what we were doing。 I'm going to
    go ahead and make an instance of this。 I'm going say o fellowello。This was the
    name of one of my cats。Unfortunately， Kitty passed away。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们要说。就是这样。这里发生的事情很明显。如你所见，这并不是一个超级复杂的类。我只是想覆盖一下基础内容。让你确切知道我们在做什么。我将继续创建这个实例。我会说“哦，奥赛罗”。这是我一只猫的名字。不幸的是，猫咪去世了。
- en: He was probably the best cat I ever had， but I loved him to death。All right，
    so Othello。15。And then we're going to make a dictionary。And fill。一个Y。Wait， oops，
    wait， he was a very fat cat。And he loves。Eating it was like his hobby， it was
    almost like a competitive sport for this cat。And then we're going to say。Oh fellow
    dot display。 Just wantan to test this out。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 他可能是我拥有过的最好的猫，但我爱他如命。好了，奥赛罗。15。然后我们将创建一个字典。并填充。哦，等一下，他是一只非常胖的猫。他喜欢。吃东西，这几乎是他的爱好，对这只猫来说，简直就像是一项竞技运动。然后我们将说。哦，奥赛罗，显示一下。只是想测试一下。
- en: Before we do anything else， I're going to say display。Nexting。Same run， O O，
    self info。 What do we got here，38。9ine30h yes。Little bit of an issue there。See
    the previous tutorial I did on air handling。 All right。 so let's go and clear
    that。 there we go。 So function。 And we can now see our decorator is working as
    expected。 There's our line。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做其他任何事情之前，我要说显示。接下来。相同运行，自我信息。我们这里有什么，38。9ine30h是的。有点问题。请参阅我之前关于错误处理的教程。好了，所以让我们去清理一下。好了。所以函数。现在我们可以看到我们的装饰器按预期工作。那就是我们的行。
- en: There's the function name， our message， and then Othello's 15 year old cat color
    black weight loves eating。 and then in decorator。 So everything is now working。😊。What
    we're going to jump into next is actually serializing and desializing this object。
    Notice how we're not talking about serializing the class。Because the class is
    a blueprint。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是函数名，我们的消息，然后是奥赛罗的15岁猫的颜色、黑色、体重、喜欢吃东西。然后在装饰器中。所以一切现在都在正常运作。😊。接下来我们将实际进行序列化和反序列化这个对象。注意我们没有谈论序列化类。因为类是一个蓝图。
- en: we're going to serialize the actual object。All right。 fasten your seat belts。
    Here comes the pickle。 I almost' feel like I should have like a pickle with a
    cape on it or something。 But so I'm going say。Lets see， which is short from serialized
    cat。 And we're going to say serialized cat is pickle。 I pickle when I say that。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要序列化实际对象。好的，系好安全带。腌黄瓜来了。我几乎觉得我应该有个穿着斗篷的腌黄瓜。但我要说的是。让我们看看，哪一个是“序列化的猫”的简写。我们将说序列化的猫是腌黄瓜。说这话时我觉得像是个腌黄瓜。
- en: So we are going to dump S。 If you remember from a previous video， if it ended
    in S。It was a string。 So that's exactly what's going on here。 Sam convention。
    So we're going to dump to a string and we're going to dump the othello instance
    of that cat to a string。Now， I'm going to go ahead and just print this out。Say
    run。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将转储S。如果你记得之前的视频，如果它以S结尾，那就是字符串。所以这正是这里发生的事情。Sam约定。所以我们将转储为字符串，并将奥赛罗这个猫的实例转储为字符串。现在，我将继续打印出来。说运行。
- en: This is what Othello looks like after he's been pickled。 And man。 that sounds
    really morbid pickling a cat。 But so you can see some familiarity here。 underscore
    main。 so you can tell exactly where that object is。 And then it's got like name。
    And then you see Othello。 and there's some data in here。 So this is really what
    pickle is doing is it's dumping it into a pickle format。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Othello 在被腌制后看起来的样子。天哪，这腌制一只猫听起来真是太可怕了。不过你可以在这里看到一些熟悉的东西。强调主要内容，这样你就能确切知道那个对象在哪里。然后它有一个名字。然后你会看到
    Othello，这里有一些数据。所以这实际上就是 pickle 所做的，它将数据转储到一个腌制格式中。
- en: This format is not compatible with applications outside of Python。 and it's
    not what you would call backwards compatible。 meaning you can't take the newest
    version of pickle and then serialize something and load it with an older version
    of pickle。 That's more advanced video that we'll get into in the future， But just
    keep that in mind。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个格式与 Python 之外的应用程序不兼容，并且不是什么你可以称之为向后兼容的东西。也就是说，你不能用最新版本的 pickle 来序列化某个东西，然后用旧版本的
    pickle 来加载它。这是一个更高级的视频，我们将在未来深入探讨，但请记住这一点。
- en: That pickle will try to use the newest version。😊，So let's go ahead and save
    this。 some must say with。Open。And we want some sort of bio at cat。 TXt。And we
    want to。Right binaryary。 because this is a binary file。 We're going to write this
    out。As F， remember， if we do with。 it's going to open it， give us a variable called
    F。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: pickle 将尝试使用最新版本。😊，所以让我们保存这个。有人可能会说用。打开。我们想要某种生物在 cat。TXT。我们想要。以二进制方式写入。因为这是一个二进制文件。我们将把它写出。作为
    F，记住，如果我们使用 with，它将打开它，并给我们一个名为 F 的变量。
- en: which stands for the file and it's going to close it automatically when we're
    done。All right。 so we've got this。 and we're going to say pickle。Dump so this
    is the difference between dump S dumps versus dump with no S。 D is's going to
    say what do you want to dump， I'm going to give it an object。 and I'm going to
    tell it where。 So we're going to dump that to a file。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 代表文件，它会在我们完成时自动关闭。好的，所以我们有这个。我们将说 pickle。Dump，这是 dump S 和不带 S 的 dump 之间的区别。D
    表示你想要转储什么，我将给它一个对象，并告诉它位置。因此我们将把它转储到一个文件中。
- en: Go ahead clear this out and let's run it。 So now we have this cat file and it
    says files not displayed in the editor because it uses unsupported text encoding。
    All right， so we're going to right click and we're going to open with And in a
    previous video I showed you how to install the hex editor。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 继续清理这个，让我们运行它。所以现在我们有这个猫文件，它说文件在编辑器中未显示，因为它使用了不支持的文本编码。好的，所以我们将右键点击，并打开它。在之前的视频中，我向你展示了如何安装十六进制编辑器。
- en: but just in case you go out here and you just type in Hex。And there's a hex
    editor。 you just install it。 So flipping back， we're going to actually get rid
    of that。Going to right click。Open with exed。 And this is what the serialized object
    looks like。You can see it is verbatim the same thing， but we've written these
    bytes out in a binary file。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但以防万一你在这里输入 Hex。有一个十六进制编辑器。你只需安装它。因此回到之前的内容，我们实际上要去掉这个。右键点击。用 exed 打开。这就是序列化对象的样子。你可以看到它与原文完全相同，但我们将这些字节写入了一个二进制文件。
- en: We can now take this file。And say email it or transport it across a network
    or leave it sit on a hard drive。 whatever we wanted to do and have another Python
    program。De serialialize or open it back up。Okay。 now that we've serialized and
    we wrapped our head around the serialization or the pickling process here。We're
    going to de serialize， which is the exact opposite。 It's reading the information
    back。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以拿这个文件。可以通过电子邮件发送它，或者在网络上传输，或者让它静静地放在硬盘上。无论我们想怎么做，都可以有另一个 Python 程序来反序列化或者重新打开它。好的，现在我们已经序列化了，并且对序列化或腌制过程有了一个清晰的理解。我们将进行反序列化，这正好是相反的过程。它是在读取信息。
- en: Some must say， my cat。Equals， and I want to say pickle。That load S。 because
    we're going to load a string。And the string is the serialized cat that we did
    up here。 So we're just going to grab him。Pp it right there。And I'm going to print。From
    string。Just so we know where we are in the console。And we can actually just say。My
    cat。A display。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会说，我的猫。等于，我想说 pickle。那 load S。因为我们要加载一个字符串。这个字符串是我们在这里序列化的猫。所以我们将抓住它。把它放在这里。我将打印。从字符串。只是为了让我们知道在控制台上的位置。我们实际上可以说。我的猫。来显示。
- en: And from string。So really， what we're doing is we're taking the string representation
    of that cat and notice how it's got a eat be in front of it。 that's denoting that
    this is binary。So it's going to， I should say， bytes。 but it's going to take that
    as a string， put it into pickle and then load it back into a usable object that
    we can call functions and run code on。 This is extremely cool。😊，So there。Rumstring，
    rumstring。 and it's exactly the way it was。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从字符串。所以实际上，我们所做的是取那个猫的字符串表示，注意它前面有一个 eat。这表示这是二进制的。所以我应该说，是字节。但它会将其作为字符串，放入序列化中，然后加载回一个可以调用函数并运行代码的可用对象。这真是太酷了。😊所以那里。Rumstring，rumstring。它完全是原来的样子。
- en: It tells a 15 year old cat。 He's black 15 and loves to eat。 So we have revived
    my cat back from the dead。Crazy， as that sounds。 Weve unpled my cat。So this is
    really， really cool。 and just to prove that we can do this from a file。 we're
    going to literally take this。Cobby， paste。And we're going to say， set right binary。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它描述了一只15岁的猫。它是黑色的15岁，喜欢吃东西。所以我们把我的猫从死里复活了。听起来很疯狂。我们复活了我的猫。所以这真的非常酷。为了证明我们可以从文件中做到这一点。我们将字面上拿这个。复制，粘贴。然后我们将说，设置为写入二进制。
- en: it's a read binary as file， and we're going to pickle。Load instead load S。And
    we want to load that file。And I'm going to say。Disk。Short for disco cat， why not？
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个以二进制格式读取的文件，我们要进行序列化加载，而不是加载 S。我们想要加载那个文件。我将说。磁盘。取名为 disco cat，为什么不呢？
- en: And we're going to take that。And then we're going to say disc display。From disk。And
    so what this code is going to do is' going to go out， open this binary file。Open
    with Hex editorit， it's going to load the bytes from the file， create an object。
    and then we can now work with that object， but these are now different objects
    even though they're coming from the same data source。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将取那个。接着我们会说从磁盘显示。这个代码将会去打开这个二进制文件。用十六进制编辑器打开，它将从文件中加载字节，创建一个对象。然后我们现在可以使用这个对象，但即使它们来自同一数据源，这些现在是不同的对象。
- en: 诶。R diskk。Othello， color black， weight 15， loves eating。Now。 if we do something
    a little bit interesting。Just to wrap this up。I'm going to print these out。 I'm
    going to print。My cat。 And I'm going to print。This cat， just to show you what's
    going on here。You can see。Hat object at。 And then they are two。Different memory
    locations。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 诶。R diskk。Othello，黑色，重15，喜欢吃东西。现在，如果我们做一些有趣的事情。为了总结一下。我将打印这些出来。我将打印。我的猫。我将打印。这个猫，来给你展示这里发生了什么。你可以看到。帽子对象在。然后它们是两个。不同的内存位置。
- en: meaning these are now two different objects。This is one of the little cautionary
    tales of serializing and desializing is you can actually save an object and then
    reload that object multiple times and you may not want two othllellos personally
    I'd love to have two that cap。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着现在这两个对象是不同的。这是关于序列化和反序列化的小心故事之一，你实际上可以保存一个对象，然后多次加载该对象，但你可能不想要两个 Othello。就我个人而言，我希望有两个那个帽子。
- en: but it may not be your intent， so be a little bit careful when you're desializing
    your objects。![](img/53fe70a8561215d4436c9c4659821325_2.png)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但这可能不是你的本意，所以在反序列化对象时要稍微小心一些。![](img/53fe70a8561215d4436c9c4659821325_2.png)
