- en: 【双语字幕+资料下载】PyTorch 极简实战教程！全程代码讲解，在实践中掌握深度学习&搭建全pipeline！＜实战教程系列＞ - P10：L10-
    数据集转换 - ShowMeAI - BV12m4y1S7ix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】PyTorch 极简实战教程！全程代码讲解，在实践中掌握深度学习&搭建全pipeline！＜实战教程系列＞ - P10：L10-
    数据集转换 - ShowMeAI - BV12m4y1S7ix
- en: Hi everybody， welcomele back to your new Pytorarch tutorial。 This time we want
    to talk about transforms for our data In the last tutorial。 we use the built in
    data and data loader classes and if we use a built in data like we see here then
    we see that we can pass the transform argument to this data set and then apply
    some transforms。So in this example， we used to build an Ms data set， and then
    we apply the2tenzo transform。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，大家好，欢迎回到你们的新Pytorach教程。这次我们想谈谈我们数据的变换。在上一个教程中，我们使用了内置的数据和数据加载器类，如果我们使用像这里看到的内置数据，那么我们会看到可以将变换参数传递给这个数据集，然后应用一些变换。所以在这个例子中，我们建立了一个Ms数据集，然后我们应用了2tenzo变换。
- en: which will convert images or Nmpy arrays to Tzos， and Pytorch already has a
    lot of transforms implemented for us。 so please have a look at the official documentation
    which you can find at this link。![](img/57a6f303b8d13bb7d856025a14ce5b5e_1.png)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将把图像或Nmpy数组转换为Tzos，Pytorch已经为我们实现了很多变换。所以请查看官方文档，你可以在这个链接找到。![](img/57a6f303b8d13bb7d856025a14ce5b5e_1.png)
- en: And there you can see all the available transforms。And for example。 there are
    transforms that can be applied to images。 For example。 centre crop or grayscale
    or petting。 And then there are transforms that can be applied to Tenzos like the
    linear transformation or normalize。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到所有可用的变换。例如，有可以应用于图像的变换。例如，中心裁剪或灰度或抚摸。然后还有可以应用于Tenzos的变换，比如线性变换或标准化。
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_3.png)'
- en: Then there are conversion transforms， for example， the Tu pillow image and the
    Tutenzoa transform。![](img/57a6f303b8d13bb7d856025a14ce5b5e_5.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有转换变换，例如，Tu枕头图像和Tutenzoa变换。![](img/57a6f303b8d13bb7d856025a14ce5b5e_5.png)
- en: Then there are also generic transforms where we can use Lambdas。 or we can write
    our very own custom class。![](img/57a6f303b8d13bb7d856025a14ce5b5e_7.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有一些通用变换，我们可以使用Lambdas，或者我们可以编写自己的自定义类。![](img/57a6f303b8d13bb7d856025a14ce5b5e_7.png)
- en: And then we can also compose multiple transforms so we can use transform dot
    compose and then pass in a list which will apply multiple transforms after each
    other。And。Yeah， so in the last tutorial， we implemented a custom wine data set。
    Now。 let's extend this class to support our transforms and write our own transform
    classes。 So let's start。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们还可以组合多个变换，所以我们可以使用transform.dot compose，然后传入一个列表，这将依次应用多个变换。是的，在上一个教程中，我们实现了一个自定义葡萄酒数据集。现在，让我们扩展这个类以支持我们的变换，并编写我们自己的变换类。让我们开始。
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_9.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_9.png)'
- en: And here， I。Copiied the code from the last tutorial where we have our own custom
    wine data set。 which will load the data。 and then we implemented the get item
    and the length method。 which will allow indexing and the length function。So let's
    extend this data set。 So now this should also support the transform argument。
    So we put this in our in it and say。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我复制了上一个教程中的代码，我们有自己的自定义葡萄酒数据集。它将加载数据。然后我们实现了get item和长度方法，这将允许索引和长度函数。所以让我们扩展这个数据集。现在这也应该支持变换参数。所以我们把这个放在我们的in
    it中，并说。
- en: transform， oh， sorry。Transform equals。 So this is optional。 So by default， this
    is none。 And then in the in it， we store this。 So we say self dot transform equals
    transform。![](img/57a6f303b8d13bb7d856025a14ce5b5e_11.png)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 变换，哦，抱歉。变换等于。这是可选的。所以默认情况下，这是没有的。然后在里面，我们存储这个。所以我们说self.dot transform等于transform。![](img/57a6f303b8d13bb7d856025a14ce5b5e_11.png)
- en: And now we also have to make some changes to our get item function。 So here
    we want to apply a transform。 if it's available。 So let's say here， sample equals
    this。 and then we say if self dot transform。 So if this is not none。 Then we apply
    this。 So we say sample equal self dot transform our sample。 and then we simply
    return our sample。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们还需要对我们的get item函数做一些更改。所以在这里我们想要应用一个变换，如果它可用。那么我们假设，sample等于这个。然后我们说如果self.dot
    transform。所以如果这不是none。那么我们应用这个。所以我们说sample等于self.dot transform我们的sample。然后我们简单地返回我们的sample。
- en: So let's return。![](img/57a6f303b8d13bb7d856025a14ce5b5e_13.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们回到正题。![](img/57a6f303b8d13bb7d856025a14ce5b5e_13.png)
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_14.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_14.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_15.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_15.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_16.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_16.png)'
- en: Sample。And this is all the change that we need for our data set。 and now let's
    continue and let's create some custom transform classes， for example。 we can write
    our own to Tenor class。 So in the last tutorial we already converted it to a Tensor
    right here in this step but we don't need to do this so we can leave this as a
    nuy array and then let's implement a to Tenor class。 which will then be passed
    to our data set and which will then later。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 样本。这就是我们数据集所需的所有更改。现在让我们继续，创建一些自定义变换类，例如。我们可以编写自己的to Tenor类。因此，在上一个教程中，我们已经在此步骤将其转换为Tensor，但我们不需要这样做，所以我们可以将其保留为nuy数组，然后实现一个to
    Tenor类。它将被传递到我们的数据集中，然后在后面使用。
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_18.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_18.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_19.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_19.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_20.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_20.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_21.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_21.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_22.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_22.png)'
- en: Convert this to a tenzo。![](img/57a6f303b8d13bb7d856025a14ce5b5e_24.png)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将其转换为tenzo。![](img/57a6f303b8d13bb7d856025a14ce5b5e_24.png)
- en: So the class twotenzor。 And the only thing that we need is that we need to implement
    is the double underscore call method。 which will get self and a sample。![](img/57a6f303b8d13bb7d856025a14ce5b5e_26.png)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以类twotenzor。我们需要实现的唯一内容是双下划线调用方法。它将接收self和一个样本。![](img/57a6f303b8d13bb7d856025a14ce5b5e_26.png)
- en: So now this is a callable object。And what we do here is first， we unpack our
    samples。 So we say inputs。And labels or targets。![](img/57a6f303b8d13bb7d856025a14ce5b5e_28.png)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在这是一个可调用对象。我们在这里所做的是，首先解包我们的样本。所以我们说输入和标签或目标。![](img/57a6f303b8d13bb7d856025a14ce5b5e_28.png)
- en: Equal sample。 And then we say， return。Torch dot from Numpai， and here inputs。And
    then also torch dot from nuy targets。![](img/57a6f303b8d13bb7d856025a14ce5b5e_30.png)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 等于样本。然后我们说，返回。Torch从Numpai，和这里的输入。然后也torch从nuy目标。![](img/57a6f303b8d13bb7d856025a14ce5b5e_30.png)
- en: So here also， we return。 We still want to return a tuple， like we did here。![](img/57a6f303b8d13bb7d856025a14ce5b5e_32.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里我们也返回。我们仍然想返回一个元组，像我们这里做的那样。![](img/57a6f303b8d13bb7d856025a14ce5b5e_32.png)
- en: And this is all that we need for our2tenar transform。 And now we can pass this
    in here。 So now we can say our wine data set gets the transform。Transform。Equals。To
    Tenz are。![](img/57a6f303b8d13bb7d856025a14ce5b5e_34.png)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们所需的所有内容，用于我们的2tenar变换。现在我们可以将其传入这里。所以现在我们可以说我们的葡萄酒数据集得到了变换。变换。等于。到Tenz。![](img/57a6f303b8d13bb7d856025a14ce5b5e_34.png)
- en: Which is a function。And。Now， let's have a look at this。 So let's get the first
    item。 So let's say first data equals data set of index 0。 and then let's unpick
    our data， so。First data。 So let's say features and labels equals first data。 And
    now let's print the type。Of the features and also the type of the labels。 So now
    if we run this。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个函数。现在，让我们看看这个。所以让我们获取第一个项目。所以我们说第一个数据等于数据集的索引0。然后让我们解包我们的数据， 所以。第一个数据。所以我们说特征和标签等于第一个数据。现在让我们打印特征的类型以及标签的类型。所以现在如果我们运行这个。
- en: then we should see this is now of class torch Tenor。 And if we don't pass this
    in here。 So if you say this is none。 No transform， then we see that it's still
    a nuy and D array。 So this is how we write our own Tenor， our own transform and
    then apply it for our own data set。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该看到这个现在是类torch Tenor。如果我们不把它传入这里。所以如果你说这个是none。没有变换，那么我们看到它仍然是一个nuy和D数组。这就是我们如何编写自己的Tenor，自己的变换，然后将其应用于我们的数据集。
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_36.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_36.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_37.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_37.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_38.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_38.png)'
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_39.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_39.png)'
- en: And now let's write， for example， another custom transform。 So let's call this
    mule transform。 So a multiplication。 And here we implement the init method。 So
    this has self。 and this has a factor argument。 So here we store this self dot
    factor equals factor。 And then again。 we must implement the double underscore
    call function or call method。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们写另一个自定义变换。例如，称之为mule变换。所以一个乘法。我们在这里实现init方法。所以这里有self，并且这里有一个factor参数。所以在这里我们存储self.dot
    factor等于factor。然后再次。我们必须实现双下划线调用函数或调用方法。
- en: which gets self and this sample。![](img/57a6f303b8d13bb7d856025a14ce5b5e_41.png)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接收self和这个样本。![](img/57a6f303b8d13bb7d856025a14ce5b5e_41.png)
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_42.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_42.png)'
- en: And here again， let's unpack our samples。 So let's say inputs and。Inputs and
    target equal sample。 And then let's only apply the factor to our features。 So
    let's say， inputs。Time is multiplied by our self dot factor。And now let's return
    our inputs。 our modified inputs and our target still as a tuple。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里再次，让我们解包我们的样本。所以假设输入和目标等于样本。然后我们只需将因子应用到我们的特征上。所以假设，输入。时间乘以我们的自点因子。现在让我们返回我们的输入，修改后的输入和目标仍然是一个元组。
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_44.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_44.png)'
- en: And so this is the multiplication transform。 And now。Let's apply this。 So let's
    apply a。![](img/57a6f303b8d13bb7d856025a14ce5b5e_46.png)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是乘法变换。现在。让我们应用这个。所以让我们应用一个。![](img/57a6f303b8d13bb7d856025a14ce5b5e_46.png)
- en: And let's say a comp transform in this case， to see how we can use this。![](img/57a6f303b8d13bb7d856025a14ce5b5e_48.png)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 并假设在这种情况下是复合变换，看看我们如何使用它。![](img/57a6f303b8d13bb7d856025a14ce5b5e_48.png)
- en: So。Let's say composed equals。 And here we need torch vision dot transforms，
    dot compose。 And here we put in a list of our transforms。 So here first， we want
    to have totenor。 And then we want to have mal transform。![](img/57a6f303b8d13bb7d856025a14ce5b5e_50.png)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以。假设组合等于。这里我们需要torch vision dot transforms，dot compose。我们在这里放入一个变换列表。所以首先，我们想要有totenor。然后我们想要有mal变换。![](img/57a6f303b8d13bb7d856025a14ce5b5e_50.png)
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_51.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_51.png)'
- en: And。Let's say， so this needs a factor。 So let's say multiplied by 2。 And now
    let's create a new data set equals wine data set。 which gets the transform equals
    our comp transform。![](img/57a6f303b8d13bb7d856025a14ce5b5e_53.png)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 并且。假设这需要一个因子。所以假设乘以2。现在让我们创建一个新的数据集等于葡萄酒数据集。它的变换等于我们的复合变换。![](img/57a6f303b8d13bb7d856025a14ce5b5e_53.png)
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_54.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_54.png)'
- en: Composed， and now again， let's get this。 So get or let's just copy this from
    here。![](img/57a6f303b8d13bb7d856025a14ce5b5e_56.png)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 组成，现在再次，让我们来处理这个。所以获取，或者我们就从这里复制这个。![](img/57a6f303b8d13bb7d856025a14ce5b5e_56.png)
- en: And run this to see if this is working。![](img/57a6f303b8d13bb7d856025a14ce5b5e_58.png)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 并运行这个来查看是否有效。![](img/57a6f303b8d13bb7d856025a14ce5b5e_58.png)
- en: So now here we have a Tenzoa。 and let's also have a look at the。 So let's print。![](img/57a6f303b8d13bb7d856025a14ce5b5e_60.png)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们有一个Tenzoa。让我们也看看这个。所以让我们打印。![](img/57a6f303b8d13bb7d856025a14ce5b5e_60.png)
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_61.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_61.png)'
- en: The features。And here， also， print the features。![](img/57a6f303b8d13bb7d856025a14ce5b5e_63.png)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 特征。这里也打印特征。![](img/57a6f303b8d13bb7d856025a14ce5b5e_63.png)
- en: To see if the multiplication got applied。 So here now we should see that each
    value got doubled。![](img/57a6f303b8d13bb7d856025a14ce5b5e_65.png)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 查看乘法是否已应用。所以现在我们应该看到每个值都被加倍。![](img/57a6f303b8d13bb7d856025a14ce5b5e_65.png)
- en: And now let's use another factor。 So let's multiply it by4 and run this。 And
    now we should see that each of the value should now be multiplied by 4。![](img/57a6f303b8d13bb7d856025a14ce5b5e_67.png)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用另一个因子。所以让我们乘以4并运行这个。现在我们应该看到每个值都应乘以4。![](img/57a6f303b8d13bb7d856025a14ce5b5e_67.png)
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_68.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_68.png)'
- en: And yeah， so this is how we can use the transform for our data sets。 and it's
    very useful。![](img/57a6f303b8d13bb7d856025a14ce5b5e_70.png)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这就是我们如何为数据集使用变换的方法，非常有用。![](img/57a6f303b8d13bb7d856025a14ce5b5e_70.png)
- en: Yeah， most of the time you see the conversion transform to Tensor。 but also
    a lot of times when we work with images， you might see some of them。![](img/57a6f303b8d13bb7d856025a14ce5b5e_72.png)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，大多数时候你会看到转换变换为Tensor。但在我们处理图像时，你可能会看到一些。![](img/57a6f303b8d13bb7d856025a14ce5b5e_72.png)
- en: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_73.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a6f303b8d13bb7d856025a14ce5b5e_73.png)'
- en: So， yeah， please check that out on the documentation website。 and I hope you
    like this tutorial。 Please subscribe to the channel and see you next time， bye。![](img/57a6f303b8d13bb7d856025a14ce5b5e_75.png)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，是的，请查看文档网站。我希望你喜欢这个教程。请订阅频道，下次见，拜！![](img/57a6f303b8d13bb7d856025a14ce5b5e_75.png)
