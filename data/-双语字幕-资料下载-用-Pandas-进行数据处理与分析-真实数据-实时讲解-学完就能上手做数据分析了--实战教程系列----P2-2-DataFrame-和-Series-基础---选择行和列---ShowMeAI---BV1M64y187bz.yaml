- en: 【双语字幕+资料下载】用 Pandas 进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P2：2）DataFrame
    和 Series 基础 - 选择行和列 - ShowMeAI - BV1M64y187bz
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】用Pandas进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P2：2）DataFrame和Series基础
    - 选择行和列 - ShowMeAI - BV1M64y187bz
- en: Hey there。 How's it going， everybody。 In this video， we're gonna continue learning
    more about pandas。 And specifically， we're gonna be learning about the data frame
    and series data types。 So like I said in the last video， these are basically the
    backbone of pandas and are the two primary data types that you'll likely be using
    the most。 So in this video we're gonna go over how we can think of data frames
    and series data types in a different way。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，大家好，最近怎么样？在这个视频中，我们将继续学习更多关于Pandas的知识。具体来说，我们将学习数据框和系列数据类型。因此，正如我在上一个视频中所说的，这些基本上是Pandas的支柱，是你最可能使用的两种主要数据类型。在这个视频中，我们将讨论如何以不同的方式看待数据框和系列数据类型。
- en: And then we'll look at the basics of getting information from these data types。
    Now。 I would like to mention that we do have a sponsor for this series of videos。
    and that is brilliant org。 So I really want to think brilliant for sponsoring
    the series。 And it would be great if you all can check them out using the link
    in the description section below and support the sponsors。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将了解如何从这些数据类型中获取信息的基础知识。现在，我想提到的是，我们为这个视频系列提供了赞助商，那就是Brilliant.org。因此，我真的很感谢Brilliant赞助这个系列。如果大家能通过下面描述部分的链接查看他们，并支持赞助商，那就太好了。
- en: And I'll talk more about their services in just a bit。 So with that said。 let's
    go ahead and get started。 Okay， so first， let's look at what a data frame is。
    and then we'll learn more about how we can think about this in terms of a Python
    object。 So we saw data frames briefly in our last video when we check to make
    sure that our data was loaded in correctly。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我会稍后再谈谈他们的服务。说到这里，让我们开始吧。好的，首先，让我们看看什么是数据框，然后我们将更多地了解如何将其视为Python对象。我们在上一个视频中简单查看了数据框，以确保我们的数据正确加载。
- en: So these were the。😊，Probjects that were displayed in Jupiter as rows and columns。
    Basically a table。 So let's take a look at what this looks like。 So if you were
    following along with the last video。 this is basically the same Jupyter notebook
    that I had before， except this is just cleaned up a bit。 So we're importing pandas
    here。 we are reading in our Cv files。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这些是😊，在Jupyter中显示为行和列的项目。基本上是一个表格。那么让我们看看这是什么样子。如果你跟着上一个视频，这基本上是我之前的同一个Jupyter笔记本，只是稍微整理了一下。因此，我们在这里导入Pandas，读取我们的Cv文件。
- en: So one is just our main data frame for our survey results。 one is our schema
    data frame for the schema results。 and then we are setting some options here where
    we have the max column set the 85 so we can see all the columns and the max rows
    set the 85 so that we can see all of the schema。 Now if you haven't been following
    along with the video so far。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一个是我们调查结果的主要数据框，一个是我们模式结果的模式数据框。然后我们在这里设置了一些选项，最大列数设置为85，这样我们就可以看到所有列，最大行数设置为85，这样我们就可以看到所有模式。如果你到目前为止还没有跟上视频。
- en: then I do have a link in the description section below that links to where you
    can download this data data and follow along with this。 Okay so this is a data
    frame here。 So where we are printing out Df do head。 this is what this returns。
    So this here。Is the first five rows of our data frame so you can see that a data
    frame is made up of multiple rows here and we also have multiple columns。 So in
    the case of this data， these are survey results but your data can be you know
    whatever your data is but it's most likely going to be in rows and columns kind
    of like a table So for this data what these being survey results each row is a
    survey is one person who answered the survey and each question was their answer
    for that question on the survey So for example。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我在下面的描述部分有一个链接，指向你可以下载这些数据并跟随这个视频的地方。好的，这里是一个数据框。因此，当我们打印出Df的头部时，这就是返回的结果。所以这是我们数据框的前五行，你可以看到数据框由多行组成，我们也有多列。所以就这组数据而言，这些是调查结果，但你的数据可以是任何东西，最有可能以行和列的形式呈现，就像一个表格。因此，对于这组数据，作为调查结果，每一行是一个回答调查的人的回答，每个问题是他们对调查中该问题的回答。举个例子。
- en: this respondent number one here， they answered that yes。 they were a hobbyist
    and if you want to know what hobbyist means then we just like we saw in the last
    video we can look at our schema data frame so let me go ahead and print this out
    here and let's look at this So if I look at what a hobbyist is then we can see
    that that question was do you code as a hobby。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个回应者编号一在这里回答说是的。他们是一个爱好者，如果你想知道爱好者是什么意思，我们可以像在上一个视频中看到的那样查看我们的模式数据框，所以让我在这里打印出来，让我们看一下。如果我查看爱好者的定义，我们可以看到那个问题是“你是否把编码作为爱好”。
- en: So that's what this data is。 And that kind of gives us an idea of what a data
    frame is。 Basically a data frame is just rows and columns。 But now let me explain
    how I like to think of data frames using native Python。 So if we are only using
    Python and not using pandas to store information in rows and columns then how
    would we do this。 Well for those of you familiar with dictionaries， you might
    think that it's a good idea to store information that way。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是这些数据的含义。这让我们对数据框有了一个基本的概念。数据框基本上就是行和列。但现在让我用原生 Python 来解释我对数据框的理解。如果我们只使用
    Python，而不使用 pandas 来将信息存储在行和列中，我们该如何做到呢？对于那些熟悉字典的人，你可能会认为以这种方式存储信息是个好主意。
- en: So let me pull up a new notebook here that I have open here with some snippets
    and let's take a look at this。 Okay so let's look at this first cell here。 So
    a lot of us are probably familiar with Python dictionaries where we have keys
    and values。 So if I'm representing some data in this example it's a person then
    we can use a dictionary So first off I have a key of first which is going be the
    first name and then that has a value of corey and then we also have keys and values
    for the last name and the email as well。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我在这里打开一个新笔记本，其中有一些代码片段，让我们来看看这个。好的，让我们看一下第一个单元格。我们中的很多人可能都熟悉 Python 字典，其中有键和值。所以如果我在这个例子中表示一些数据，例如一个人，那么我们可以使用字典。首先，我有一个键是“first”，表示名字，然后它的值是
    Corey，我们还有姓氏和邮箱的键和值。
- en: Okay， so this dictionary here represents data for a single person。 but how would
    we represent data for multiple people？ Well。 there are probably a couple of different
    ways that we could do this。 but the way that I like to think of this in terms
    of learning pandas is to make all of our values in our dictionaries a list。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这个字典代表一个人的数据。但我们如何表示多个人的数据呢？嗯，可能有几种不同的方法可以做到这一点，但我喜欢在学习 pandas 时将字典中的所有值都视为列表。
- en: So let's take a look in the second cell here to see what this would look like。
    So here in the second cell now we can see that we have a pretty similar dictionary
    to what we had above。 but now instead of just a single string here for the values
    I instead have a list and our list currently just has one person。 but now since
    this is a list we can add more first names and information in here。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们在第二个单元格中看看这是什么样子的。现在在第二个单元格中，我们可以看到我们有一个与上面相似的字典，但现在值不再是单个字符串，而是一个列表，目前这个列表中只有一个人。但现在由于这是一个列表，我们可以在这里添加更多的名字和信息。
- en: So the first value of our list is going to be our first person。 So if I go to
    the third cell down here at the bottom。 now we can use this as an example to see
    what this would look like with multiple people。 So the。Second value in our list
    will be our second person and the third value in the list will be our third person。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的列表的第一个值将是我们的第一个人。如果我在底部查看第三个单元格，现在我们可以用这个例子来看一下多个人的情况。列表中的第二个值将是我们的第二个人，列表中的第三个值将是我们的第三个人。
- en: So if we look here， we have people， we have a key of first。 So if we want the
    second person here。 we go to the second value。 That's Jane。 the last name is Do。
    and the email go to the second value here is Jane Do at email do com。 If you want
    the third person that would be John， and then third value in last would be do。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们在这里查看，我们有人的信息，有一个键是“first”。所以如果我们想要这里的第二个人，我们查看第二个值。那是简。姓氏是 Do，邮箱是第二个值，Jane
    Do at email do com。如果你想要第三个人，那就是约翰，第三个值的姓氏是 Do。
- en: and third value and email is John Do at email com。 So we can kind of think this
    like row and columns。 The keys are the columns and the values are the rose。 Now。
    if you look up the definition of a panda data frame online。 then you'll see a
    lot of definitions that just say something like it's a twodimenional data structure。
    Now that might sound a little confusing button layhman's terms that basically
    just means rows and columns。 Okay so like I said here， the key for email here
    would be our email column and contain all of the email value。And if we wanted
    to see the email column then we can just access that key。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个值和电子邮件是John Do at email com。所以我们可以将其视为行和列。键是列，值是行。现在，如果你在线查找pandas数据框的定义，你会看到许多定义，仅仅说它是一个二维数据结构。虽然这听起来有点混乱，但用外行的话来说，基本上就是指行和列。好吧，正如我所说，电子邮件的键将是我们的电子邮件列，并包含所有电子邮件值。如果我们想查看电子邮件列，那么我们只需访问那个键。
- en: So if I come down here into actually let me run all of these really quick here
    I think I open this up without running these so I want to make sure that we have
    this registered okay so if I wanted to see that email column then I could simply
    say people and then access that email key if I run that then we can see that we
    got all of the emails Now the reason that I wanted to show you this is because
    I feel like this really helped me in terms of how I think about data frames。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我在这里下来，实际上让我快速运行所有这些，我想我在没有运行这些的情况下打开了这个，所以我想确保我们已注册好。如果我想查看那个电子邮件列，我可以简单地说people，然后访问那个电子邮件键。如果我运行它，我们可以看到所有的电子邮件。现在，我想向你展示这一点是因为我觉得这真的帮助我理解了如何思考数据框。
- en: So data frames are very similar to this but with more functionality than what
    we have here in standard Python Now we can actually create a data frame from this
    dictionary and see what this looks like。 So let's do that and look at some basic
    data frame functionality and then we'll look at this more using the stack overflow
    data from the last video So here in this bottom cell in order to create a data
    frame from the information。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以数据框与此非常相似，但功能比我们在标准Python中拥有的更多。现在我们实际上可以从这个字典创建一个数据框，看看它是什么样子。让我们这样做，看看一些基本的数据框功能，然后我们将利用上个视频中的Stack
    Overflow数据深入探讨。所以在这个底部单元格中，为了从这些信息创建一个数据框。
- en: We have here， I'm going to go ahead and import pandas So I'm going say import
    pandas as PD and now we can create a data frame actually using this dictionary
    that we have up here。 so to do that I can just say Df is equal to PD do data frame
    and check the casing there that's a capital D and a capital F。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里有的信息，我将继续导入pandas。所以我将说import pandas as PD，现在我们可以使用上面这个字典实际创建一个数据框。所以要做到这一点，我可以简单地说Df等于PD的data
    frame，注意大小写，这里是大写的D和F。
- en: and then we'll just pass in that dictionary that has values as list So if I
    run this and that seem to run okay without any errors And now let me just print
    out Df here。 and if I print that out， then we can see that now our data frame
    is representing this in a way to where we do have rows and columns that we can
    visualize So we get these people printed out in a nice table ofs and columns。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将传入一个包含值作为列表的字典。如果我运行这个，似乎没有任何错误运行良好。现在让我打印出Df。如果我打印出来，我们可以看到现在我们的数据框以一种方式表示，能够可视化出行和列。所以我们得到了这些人以一个漂亮的表格显示出来。
- en: Now we also have these over here to the far left that don't have column names
    this01 and 2 Now this is an index。 Now I'm not going go much into。es right now
    because that's what the next video is going to cover。 but basically it's a unique
    value for our rows。 Now it doesn't need to be unique， but again。 we'll talk more
    about that in the video specifically on indexes。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们左边还有一些没有列名的值，这就是索引。我现在不想深入讨论，因为下一个视频将会涉及这个内容，但基本上这是我们行的唯一值。它不需要是唯一的，但我们将在专门讨论索引的视频中详细讨论。
- en: So now that we have a bit of an idea of how to think about data frames。 Now
    let's take a look at how to access information here within the data frame。 So
    first。 let's just access the values of a single column。 So just like we did with
    the dictionary。 we can access a single column just like we were accessing the
    key of a dictionary。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对如何思考数据框有了一定的了解。现在让我们看看如何在数据框中访问信息。首先，让我们访问单个列的值。就像我们在字典中做的那样，我们可以像访问字典的键一样访问单个列。
- en: So just like I did people and email up here。 I can do very similar down here
    and just say that I want that email column of my data frame。 Now that's not actually
    a key that is going to access the column of a data frame。 but we can see here
    that we get all of the emails back from that data frame。 So again。 I do want to
    emphasize that I only use the pure Python example so。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我在这里做的人和电子邮件一样。我可以在这里做类似的事情，只需说我想要数据框的电子邮件列。现在，这实际上并不是一个访问数据框列的关键。但是我们可以看到，我们从数据框中得到了所有电子邮件。因此，我想强调的是，我只使用纯
    Python 示例。
- en: We could get an idea of how to think about a data frame， but like I said， a
    data frame is much。 much more than just a dictionary of lists， so for example。
    we can see that when we displayed the email column here。 it doesn't look the same
    as when we displayed the list of values from that dictionary and that's because
    this is actually returning a series and we can see this if we check the type so
    if I check the type of this email column here。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对数据框的思考方式有一个大致的想法，但正如我所说，数据框远不止是一个列表字典。例如，我们可以看到当我们显示这里的电子邮件列时，它的显示方式与我们从字典中显示值的列表不一样，因为这实际上返回的是一个系列，如果我检查这个电子邮件列的类型，我们就能看出。
- en: So let me run that。 We can see that this is pandas core series series。 So this
    is a series object。 So what is a series。 So a series is still basically a list
    of data。 But just like with a data frame。 it has a lot more functionality than
    just that。 Now。 if you look up the definition of a series online。 Then you'll
    see a lot of definitions that just say it's a one dimensional array。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我运行一下。我们可以看到这是 pandas 核心系列对象。所以这是一个系列对象。那么什么是系列呢？系列基本上仍然是一个数据列表。但正如数据框一样，它比这要具备更多功能。现在，如果你在网上查找系列的定义，你会看到很多定义只说它是一个一维数组。
- en: And that might sound a little confusing， but in layman's terms that basically
    just means that it's rows of data。 So again， you can think of a data frame as
    being rows and columns。 and a series as being rows of a single column。 So a data
    frame is basically a container for multiple of these series objects。 So again，
    that's important。 So let me go over that one more time。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有些困惑，但通俗来说，这基本上意味着它是数据行。因此，你可以将数据框视为行和列，而系列则是单一列的行。因此，数据框基本上是多个系列对象的容器。所以这很重要。让我再说一遍。
- en: So we can see that a data frame here is two dimensional because it has rows
    and columns。 So we can see here that it has you know， first name， last name email。Now。
    whenever we access just the email， then we can see that we get all these emails
    here。 Now。 this is a series。 And I said that a data frame basically contains is
    a container for multiple series objects。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以看到，这里数据框是二维的，因为它有行和列。我们可以看到它包含名字、姓氏和电子邮件。现在，每当我们只访问电子邮件时，我们就可以看到这里的所有电子邮件。现在，这是一个系列。我之前提到过，数据框基本上是多个系列对象的容器。
- en: So we can think of this email column here as a series。 this last column here
    as a series and this first column as a series。 And also we can see where we print
    it out this series here for the emails。 we can see that this series also has an
    index as well， just like our data frame did。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以将这里的电子邮件列视为一个系列，这最后一列视为一个系列，这第一列也视为一个系列。我们还可以看到，当我们打印这个电子邮件的系列时，这个系列也有一个索引，就像我们的数据框一样。
- en: So this index is over here on the left。 the0，1 and 2。 Okay so we can access
    a single column of a data frame like we're accessing a key just like we did here
    in this cell。 but you might also see some people use dot notation to do this same
    thing So you might see some people do it like this。 So they might do Df dot email。
    And if I run this cell。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个索引在左侧，有0、1和2。好的，所以我们可以像访问关键一样访问数据框的单个列，就像我们在这个单元格中做的那样，但你可能还会看到一些人使用点表示法来完成同样的事情。所以你可能会看到一些人这样做，他们可能会写
    Df. email。如果我运行这个单元格。
- en: then we can see that let me get rid of this cell。And just so we can compare
    these two。 we can see that this gives us the same thing。 whether we access this
    like a key or whether we use dot notation。 this returns the same series object
    of the email values。 Now whichever way that you want to do this is really just
    a personal preference I actually prefer the first way of using the brackets and
    there are a couple of reasons that I prefer to use that over dot notation first
    is that I like using the brackets because there's a chance that one of your columns
    is named the same thing as one of the attributes or methods of a data frame。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到，让我去掉这个单元。为了让我们能够比较这两者，我们可以看到这给我们带来了相同的结果。无论我们是像键那样访问还是使用点符号，这都会返回相同的电子邮件值系列对象。无论你想用哪种方式，这真的只是个人偏好，我实际上更喜欢使用括号的第一种方式，原因有几个，我更喜欢使用它而不是点符号，首先是我喜欢使用括号，因为有可能你的某一列与数据框的某个属性或方法同名。
- en: And if that's the case， then using the dot notation might give you some errors。
    So for example。 if a data frame a data frame has a method called count So if you
    had a column named count and you did and you were trying to access that count
    column using dot notation then that's actually going to access。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这种情况，那么使用点符号可能会给你一些错误。例如，如果一个数据框有一个名为 count 的方法。如果你有一个名为 count 的列，而你尝试使用点符号访问那个
    count 列，那么实际上这会访问。
- en: The count method from data frame instead of that count column。 So that actually
    wouldn't work how we did it here。 if you wanted to access the actual column called
    count which we don't have one in this specific data frame。 but if we did than
    we would have to access it like this。 So that's kind of why I prefer brackets。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框的 count 方法，而不是 count 列。所以我们这里的做法实际上是不可行的。如果你想访问实际名为 count 的列，虽然在这个特定数据框中我们没有这个列，但如果有，我们将不得不这样访问。所以这就是我更喜欢使用括号的原因。
- en: So I'm going to be using brackets throughout this series。 but I wanted you to
    know about dot notation because if you're working with other people using pandas。
    then you might see them access columns in using dot notation。 So you need to know
    that it's at least a possibility。 And again。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这个系列中我将会使用括号。但我想让你知道点符号的用法，因为如果你和其他使用 pandas 的人一起工作，那么你可能会看到他们用点符号来访问列。所以你需要知道这至少是一种可能性。而且再一次。
- en: that doesn't mean that they're doing it wrong， it's just a personal preference。
    I just prefer using the brackets。 so I said that data frames have a lot more functionality
    than what we saw using you know standard Python So let's look at some other stuff
    that we can do here。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着他们在做错，只是个人偏好。我更喜欢使用括号。所以我说数据框的功能远比我们使用标准 Python 所看到的要多得多。那么让我们看看我们可以在这里做的一些其他事情。
- en: So let's say that we wanted to access multiple columns。 Now in order to access
    multiple。We can use the bracket notation and pass in a list of the columns that
    we want。 So if I wanted both the last name and email columns。 then we could say
    Df and use our brackets just like we saw before。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要访问多个列。为了访问多个列，我们可以使用括号符号并传入我们想要的列的列表。所以如果我想要姓氏和电子邮件这两列，那么我们可以说 Df 并使用我们的括号，就像我们之前看到的那样。
- en: But now I'm going to put in a set of inner brackets here as a list of columns
    that I want to access。 So for the first value， I'll put last for the last name
    and for the second value。 I'll put email for the email。 So if I run this， then
    we can see that now we have a data frame returned here of the last column and
    the email column。 Now I want to emphasize again here， that I pass a list inside
    of these brackets here。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我将放入一组内层括号，作为我想要访问的列的列表。所以对于第一个值，我将输入姓氏，对于第二个值，我将输入电子邮件。所以如果我运行这个，我们可以看到现在返回了一个包含姓氏列和电子邮件列的数据框。现在我想再次强调，我在这些括号中传入了一个列表。
- en: So there are two pairs of brackets。 you can't leave off the inner brackets because
    you'll likely get a key error because pandas will think that you're passing in
    both of those strings as a single column name。 And another thing that I want to
    point out here is that now that we're getting。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以有两对括号。你不能省略内层括号，因为你很可能会遇到键错误，因为 pandas 会认为你将这两个字符串作为单个列名传入。还有一点我想在这里指出的是，现在我们在获取。
- en: Multiple columns this can no longer be a series because remember。 a series is
    basically a single column of rows。 So when we get multiple columns like this。
    it's just returning another data frame。 And in this case。 it's a filter down data
    frame with just these specific columns。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 多个列这不再是一个系列，因为记住，系列基本上是单列的行。所以当我们像这样获取多个列时，它只是返回另一个DataFrame。在这种情况下，它是一个仅包含这些特定列的过滤DataFrame。
- en: So we filtered out the first name column here。 and we just have the last and
    the email。 Okay。 so that's how we get a specific column or multiple columns。 and
    we can slice these as well。 similar to how we slice a list。 but I'll show that
    on our larger stack overflow data set here in a second。 Now， if you have a lot
    of columns and want to see all of them easily。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们过滤掉了第一列的名字，只保留了姓和电子邮件。好的，这就是我们如何获取特定列或多列，我们也可以像切片列表一样进行切片。不过我将在稍后的更大Stack
    Overflow数据集中展示这一点。现在，如果你有很多列并想轻松查看所有列。
- en: then we can just grab the columns specifically by saying Df dot columns。 and
    we can run this and we can see here that this gives us all of our columns here。
    So our columns are an index of first last and email。OkaySo now we've seen how
    to get a column。 but how would we get a row So in order to get rows。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过说Df.columns来特定地获取列。我们可以运行这个，看到它给我们所有的列。所以我们的列是first、last和email的索引。好吧，现在我们已经看到如何获取一列，但我们该如何获取一行呢？因此，要获取行。
- en: we can use the lo and i lo indexers so that is lo and i Lo。 so let's take a
    look at these。 So first let's take a look at i Lo。 So i Lo allows us to access
    rows by integer location hence the name i Lo is integer location So if I wanted
    to get the first row then we can just say Df do i Lo and then use brackets here
    to since this is an indexer use brackets and pass in a0 and that will give us
    the first row。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用lo和i lo索引器，分别是lo和i Lo。让我们看看这些。首先，我们来看i Lo。i Lo允许我们通过整数位置访问行，因此名称为i Lo即整数位置。所以如果我想获取第一行，我们可以直接说Df.i
    Lo，然后在这里使用括号，因为这是一个索引器，使用括号并传入0，这样就能给我们第一行。
- en: So if I run this then we can see that the first row has a first name of Cory
    last name of shaefffer and email of coreium schaffer atgmail do com So what that
    did is it returns a series that contains the values of that first row of data
    which like I said is the first name。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我运行这个，我们可以看到第一行的名字是Cory，姓是Shaefffer，电子邮件是coreium.schaffer@gmail.com。所以它返回的是一个包含第一行数据值的系列，正如我所说的，这是名字。
- en: last name and email。Of the first person in this example。 And again。 we haven't
    discussed indexes yet。 that will be in the next video。 but the index here is the
    column names so that we know what those values are So up here our index was 0。1
    and2 but whenever we're actually accessing a row。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个例子中第一个人的姓和电子邮件。再说一次，我们还没有讨论索引，这将在下一个视频中讲解，但这里的索引是列名，以便我们知道这些值是什么。所以在这里我们的索引是0、1和2，但每当我们实际访问一行时。
- en: it's going to set that index to the column name so that we know what those values
    are because if this just said0。1 and 2， then we might not know what these are
    and just like when we select multiple columns。 we can select multiple rows as
    well by passing in a list of integers so if I want the first and second row then
    we can just say and again this is going to be a pair of brackets within these
    brackets because we're passing in a list to our index here and I'm just going
    to pass in a list of0 and1。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它将把索引设置为列名，以便我们知道这些值是什么，因为如果它只是说0、1和2，我们可能不知道它们是什么。就像当我们选择多个列时，我们也可以通过传入一个整数列表来选择多行。所以如果我想要第一和第二行，我们只需说，再次强调，这将在这些括号内形成一对括号，因为我们在这里将一个列表传给索引，我将传入0和1的列表。
- en: So if I run this then we can see that now we get the first two rows of data。And
    again。 be sure to pass in an enter list inside those brackets so that it does
    what you expect it to do。 And also， we can see that now we're getting a data frame
    with these multiple rows。 Now。 with these i lo and lo indexers， we can also select
    columns as well。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我运行这个，我们可以看到现在我们得到了前两行数据。再说一遍，请确保在这些括号内传入一个整数列表，这样它才会按预期执行。同时，我们可以看到现在我们得到了一个包含这些多行的DataFrame。现在，使用这些i
    lo和lo索引器，我们也可以选择列。
- en: And that is going to be the second value that we pass into these outer brackets。
    So if we thought of ilo and lo as functions， then we can think of the rows that
    we want as the first argument and the columns as the second argument。 So let me
    show you what this looks like。 So here we have our inner bracket。 Those are the
    rows that we want。 But now after that list， we can put a comma。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们传递给外部括号的第二个值。所以如果我们把`ilo`和`lo`看作函数，那么我们可以把想要的行视为第一个参数，把列视为第二个参数。让我给你展示一下这是什么样的。这里是我们的内部括号。那些是我们想要的行。但是现在在那个列表后面，我们可以加一个逗号。
- en: And now we can specify the column that we want。 Now with i Lo。 we can't specify
    and actual column name because these use integer integer locations。 So these are
    for integers only。 So remember， our first name is the first column。 the last name。The
    second column and the email is the third column。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以指定想要的列。使用`i Lo`时，我们不能指定实际的列名，因为这些使用的是整数位置。因此这些仅适用于整数。记住，我们的名字是第一列，姓氏是第二列，电子邮件是第三列。
- en: So if we wanted to grab the email address of the first two rows。 then we can
    grab the column at index 2， which will be the third column since all of these
    start at zero。 So if I was to pass in a two here。 and run that。 then we can see
    that now we get the email addresses of these first two rows。 Okay so that's ioc。
    So now let's look at Lo。 So with ioc。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要前两行的电子邮件地址，那么我们可以抓取索引为2的列，这将是第三列，因为所有这些都是从零开始的。如果我在这里传入一个2并运行它，那么我们可以看到现在得到了这前两行的电子邮件地址。好的，这就是`ioc`。现在让我们看看`Lo`。与`ioc`相比。
- en: we were searching by integer location with Lo， we're going to be searching by
    label。 And when we're talking about labels for rows， these will be the indexes。
    And again。 we don't have custom indexes right now。 So this index is just a default
    range of integers。 So at the moment， this will somewhat be similar with i Lo。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前是通过整数位置进行搜索的，现在我们将通过标签进行搜索。当我们谈论行的标签时，这些将是索引。而且目前我们没有自定义索引。所以这个索引只是一个默认的整数范围。因此，目前这在某种程度上与`i
    Lo`相似。
- en: the i Lo indexer but we'll look at uses or use cases with Lo with actual labels
    in the next video when we cover indexes。 So real quick， let's look。our entire
    data frame again。 So I'm just gonna print that out down here。 So like I said，
    over here on the far left， these are our indexes。 So these are the labels for
    that row。 So if I want the first row， then by default。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看使用实际标签的`Lo`的用例，下一期视频将介绍索引。因此，快速来看一下我们的整个数据框。我会在这里打印出来。正如我所说，左边这些是我们的索引。这些是该行的标签。如果我想要第一行，那么默认情况下。
- en: this just has a label of0。 so I can say Df do lo and pass in a0 there。 and if
    I run that。 then we can see that we get that row with that label of0。 And again。
    I know that that looks similar to i Lo at the moment。 but we'll see how to use
    indexes with labels in the next video。 And just like with i Lo。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个标签为0的行。所以我可以说`Df do lo`并传入一个0。如果我运行它，我们可以看到得到了标签为0的那一行。再说一次。我知道目前看起来与`i
    Lo`相似，但我们将在下个视频中看到如何使用带标签的索引。就像使用`i Lo`一样。
- en: we can also pass in a list to specify multiple rows。 So if I wanted the first
    and second row。 then just like with i Lo， I can pass in an inner list here。 So
    let's say that I want the first row and the second row。 So I'll run that。 we can
    see that now we get the first and the second row。 And again。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以传入一个列表，以指定多个行。因此，如果我想要第一行和第二行，就像使用`i Lo`一样，我可以在这里传入一个内部列表。假设我想要第一行和第二行。我会运行它。我们可以看到现在得到了第一行和第二行。再说一次。
- en: now we can see that we are getting a data frame back with now that we have multiple。Rs
    and just like with I Lo， we can also pass in a second value into our indexer to
    select specific columns for these rows。 Now， with Ilo， we used integers to select
    the columns。 But now that we're using Lo。 we can use labels。 So if we want the
    email column of these first two rows。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到，返回了一个数据框，因为我们有多个`R`，而且就像`I Lo`一样，我们也可以在索引器中传入第二个值，以选择这些行的特定列。现在，使用`Ilo`时，我们用整数选择列。但现在使用`Lo`时，我们可以使用标签。所以如果我们想要这前两行的电子邮件列。
- en: then now we can just pass in a value of email。 So if I run that。 then we can
    see that now we get the email value of these first two rows。 Now I didn't show
    this with IL， but we can also pass in a list for the columns as well。 So if I
    want the last name and the email for these rows。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以直接传入电子邮件的值。如果我运行它，我们可以看到现在得到了这前两行的电子邮件值。我没有在`IL`中展示这一点，但我们也可以为列传入一个列表。所以如果我想要这几行的姓氏和电子邮件。
- en: then instead of just passing in a string as the second value here。 then we can
    pass in a list of strings of the columns that we want。 So I'm going wrap this
    in brackets here。 I know that this can get a little confusing with all these inner
    brackets。 But let's say that we want email and we want last name。So if I run this。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在这里作为第二个值传入字符串，而是可以传入我们想要的列的字符串列表。所以我将把它用括号括起来。我知道所有这些内部括号可能会让人有点困惑。但假设我们想要电子邮件和姓氏。所以如果我运行这个。
- en: then now we can see that we got these specific columns here。 email and last
    name for these specific rows， the row with label 0 and the row with label of one
    and also notice that the columns display and the order that we used in our list
    up here within Lo which is a different order from our original data frame So up
    here it' first last email but we asked for email and last and it gave us back
    in that order of email and last so now that we've seen the basics of grabbing
    certain rows and columns from a small data set now let's go back to our data from
    the last video and see how we grab some rows and columns from the stack overflow
    data set So I'm going to go over here to back to our pandas demo here and again
    just a quick overview of the data that we have here we're importing pandas we
    have Df as our main survey results here。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到这些特定的列。电子邮件和姓氏对应于这特定行，标签为 0 和 1 的行，同时注意到列的显示顺序与我们在 Lo 中使用的列表顺序不同，上面是先名后姓，但我们请求的是电子邮件和姓氏，它以电子邮件和姓氏的顺序返回给我们。现在我们已经看到了从小数据集中抓取特定行和列的基础知识，现在让我们回到上一个视频中的数据，看看如何从
    Stack Overflow 数据集中抓取一些行和列。我将回到我们的 pandas 演示，这里再快速回顾一下我们拥有的数据，我们在导入 pandas，Df
    是我们的主要调查结果。
- en: our schema Df as our schema。We are setting some options here。 This is what our
    main data frame head looks like， which is the first five rows。 And then this is
    what our schema looks like。 So I'm going to go down below our schema here。 And
    now let's mess around with this a little bit。 So let's go over a bit of what we
    learned and pluck out certain rows and columns。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模式 Df 作为我们的模式。我们在这里设置了一些选项。这是我们的主数据框头部的样子，即前五行。然后这是我们的模式的样子。所以我将在我们的模式下方进行一些操作。现在让我们稍微复习一下我们学到的内容，并挑选出某些行和列。
- en: But first， let's see how many rows and columns that we have in this data frame。
    Now we saw a couple couple of different ways to do this in the last video。 So
    the easiest way to do this is to use the shape attribute。 So if I say Df do shape
    and run this。 then we can see that we have 88000 rows and 85 columns。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们看看这个数据框中有多少行和列。我们在上一个视频中看到了几种不同的方式来做到这一点。所以最简单的方法是使用 shape 属性。所以如果我说
    Df.do.shape 并运行这个，那么我们可以看到我们有 88000 行和 85 列。
- en: So let's grab all of the responses for the hobbyist column。 So again。 what I'm
    trying to do here is if we look at our main data frame。 I want to grab all of
    the responses for this column right here， hobbyist。 Okay so how would we do that
    Now， if you remember if you。To see what columns are available。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们抓取 hobbyist 列的所有响应。再次重申，我在这里想做的是，如果我们查看我们的主数据框，我想抓取这一列的所有响应，hobbyist。好的，我们该如何做到这一点呢？如果你还记得，如果你要查看可用的列。
- en: then you could just say Df do columns to see all of these。 We can see that these
    are kind of long。 We have 85 here。 But here we have hobbyist， which is the one
    that we want。 And that is the question where people answered if they code as a
    hobby or not。 And in the next video， we're going to cover indexes。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以说 Df 做列来查看所有这些。我们可以看到这些列有点长。这里有 85 列。但这里我们有 hobbyist，这是我们想要的。这个问题是人们是否把编程当作爱好来回答的。接下来的视频中，我们将讨论索引。
- en: I'll show how we can you know search a schema data frame to find exact questions
    so that we can see what questions are what specific columns in the data frame。
    But right now， let's just grab those hobbyist responses。 So if you remember from
    that small data set that we just saw in order to grab that hobbyist column。 we
    can just access that like a key。 So if I say Df。 and then pass in hobbyist there。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示我们如何搜索模式数据框以找到确切的问题，这样我们就可以看到数据框中哪些问题对应于特定的列。但现在，让我们直接抓取这些 hobbyist 响应。所以如果你记得我们刚刚看到的小数据集，要抓取
    hobbyist 列，我们可以像访问键一样访问它。所以如果我说 Df，然后传入 hobbyist。
- en: Then we get a series of all of those responses。 And luckily。 that doesn't display
    the entire 89000 rows in our browser here。 But we do get the head and the tail
    of。That data to get an idea of what those responses look like。 Now， real quick，
    let me show you something that we'll cover more of further into the series。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们得到了所有回复的系列。幸运的是，这不会在我们的浏览器中显示所有 89000 行。但是我们确实得到了数据的头部和尾部，以便了解这些回复的样子。现在，快速让我给你展示一些我们在系列后面会更深入讨论的内容。
- en: but I want to give you an idea of how powerful something like pandas is。 So
    let's say that we wanted to know how many of these responses were answered， yes。
    and how many were answered no。 Now， if we were using regular Python。 then we might
    import the counter class or write a quick function or a loop to do this。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但我想让你了解 pandas 这样的东西有多强大。所以假设我们想知道这些回复中有多少是回答“是”的，有多少是回答“否”的。现在，如果我们使用常规 Python，我们可能会导入计数器类，或者写一个快速函数或循环来做到这一点。
- en: But pandas has so much of this stuff already built in。 So to get the count of
    unique values in this column。 I can just use this value counts method to calculate
    this。 So right up here。 I can just tack on a method of value underscore counts。
    Now， again。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 pandas 已经内置了很多这样的功能。因此，为了获取这一列中唯一值的计数，我可以直接使用这个值计数方法来计算。所以在这里，我只需添加一个 value_counts
    方法。现在，再次。
- en: this is going to be for a future video。 But I just want to give you an idea
    of what pandas can do。 So whenever I add this value counts method we can see that
    out of this series that we returned here for all of our answers for this hobbyist。Question
    the value counts are 71000 people said yes， they do code as a hobby and about
    18000 said no。 they don't code as a hobby。 And again， we'll cover more of this
    in future videos when we learn more about analyzing data in depth。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是未来视频的内容。但我只是想让你了解 pandas 能做什么。因此，每当我添加这个值计数方法时，我们可以看到在我们返回的这个系列中，对于所有回答这个爱好者问题的人中，71000
    人表示是，他们确实把编程作为爱好，大约 18000 人表示否，他们并不把编程作为爱好。再次提到，当我们深入学习数据分析时，我们会在未来的视频中讨论更多内容。
- en: But I wanted to give you a quick taste as to why it's beneficial to even learn
    pandas like we're doing here。 it makes this type of stuff really easy and we could
    go further and plot that out and everything。 Okay， but with that quick sidetrack
    out of the way。 let's keep going and go over the other things that we learned
    earlier。 So we got a column here。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我想让你快速了解一下，为什么学习 pandas 是有益的，就像我们在这里做的那样。这使得这类事情变得非常简单，我们可以进一步绘制图表等等。好的，但在这个快速的偏离话题之后，让我们继续并回顾一下我们之前学到的其他内容。所以我们这里有一列。
- en: So let me get rid of that value counts So we have our column here。 So now let's
    grab a specific row and a specific column。 So let's grab the first row。 and we'll
    also grab that same hobbyist column for that row。 So how do we grab rows。 So remember
    if we want to grab rows that we use the lo or i Lo。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我去掉那个值计数。所以我们有我们的列在这里。那么现在让我们获取特定的行和特定的列。我们获取第一行，同时也获取那一行的相同爱好者列。那么我们如何抓取行呢？请记住，如果我们想抓取行，我们使用
    lo 或 i Lo。
- en: indexexers So I'm going to go ahead and use Lo because remember that that's
    the one that allows me to use labels and I'm going to use a label instead of an
    integer for the hobbyist column name Now again。 since we're just using a default
    index and we can see the indexes here，0，1，2，3。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: indexers 所以我将继续使用 Lo，因为请记住，这是允许我使用标签的那个，我将为爱好者列名使用一个标签，而不是整数。现在再次提到，由于我们只是使用默认索引，我们可以在这里看到索引，0，1，2，3。
- en: 4 Since we're just using a default index instead of a custom one our current
    labels for our indexes are just a range of values from0 to 88000 something。 So
    in order to get the first row， I can say Df do Lo and pass in that label of that
    first index。 which in this case is just a0。 and these are all of the responses
    from the first respondent。 So this is one person's entire survey results here。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只是使用默认索引，而不是自定义索引，我们当前的索引标签只是从 0 到 88000 的一系列值。因此，为了获取第一行，我可以说 Df 的 Lo，并传入那个第一个索引的标签。在这种情况下，它只是
    a0。这是第一位受访者的所有回复。所以这是某个人的整个调查结果。
- en: Now if we wanted to see their results for just that hobbyist question then remember。Within
    the brackets here， I can pass in a second value for the columns that I would like。
    So if I pass in hobbyist， then we can see that their answer to that whether they
    code as a hobby is yes。 and also like we saw earlier， I can also pass in a list
    of multiple rows or multiple columns to get the exact rows and columns that we
    want to see。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们想查看仅针对那个爱好者问题的结果，那么请记住。在这里的括号内，我可以传入我想要的列的第二个值。所以如果我传入爱好者，那么我们可以看到他们的回答是否作为爱好编程是“是”。而且像我们之前看到的，我还可以传入多个行或多个列的列表，以获取我们想要查看的确切行和列。
- en: So to get the first three responses for the hobbyist column。 then instead of
    just passing in a single value here。 then I can put in some inner brackets here
    and pass in a list of multiple rows。 So if I pass in a list of three rows here，
    and run this。 then these are the first three results for that hobbyist column。
    Now。 one thing that we haven't seen yet is that we can also use slicing to grab
    multiple rows and columns as well。 Now， if you're familiar with list slicing，
    then this is pretty much the same thing。 The only difference is that our last
    value is going to be。Inclusive， at least with Lo。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以要获取爱好者列的前三个响应，而不是仅仅传入一个值，我可以在这里放一些内括号，并传入多个行的列表。如果我在这里传入三个行的列表，并运行这个，那么这些就是爱好者列的前三个结果。现在，我们还没有看到的一件事是，我们也可以使用切片来抓取多个行和列。如果您熟悉列表切片，那么这几乎是同样的事情。唯一的区别是我们的最后一个值将是包含的，至少在Lo中是这样。
- en: So if we wanted the first three rows， then we could say。That we want from0 and
    then slice to the index of2。 And if I run this。 oops。 and I accidentally made
    a mistake here， actually， whenever we're using slicing。 we do not wrap these in
    brackets。 So I'm going to take that out。 So for our first value。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们想要前三行，那么我们可以说我们想从0开始，然后切片到2的索引。如果我运行这个，哎呀，我不小心在这里犯了个错误，实际上，无论何时使用切片，我们都不将其包装在括号中。所以我将把它去掉。所以对于我们的第一个值。
- en: we're just saying we're no longer passing in a list of values。 we're just passing
    in the slice of0 and then colon2。 So if I run that。 then we can see that now we
    get the same result that we got before。 And we can do this with the columns as
    well。 So right now， we're only getting the hobbyist column。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是说我们不再传入一个值的列表，我们只是传入从0开始的切片，然后是冒号2。所以如果我运行它，我们可以看到现在我们得到的结果与之前相同。我们也可以用列来做到这一点。所以现在，我们只获得爱好者列。
- en: But let's go back and look at our columns and see what columns come after the
    hobbyist column。 So up here， these are all of our columns here， where we printed
    them out。 So let's look at a few columns after hobbyist here。 So we have open
    sourcer， open source employment。 So let's say that we wanted to get all of the
    columns from hobbyist all the way up to this employment column。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但是让我们回去看看我们的列，看看爱好者列之后有哪些列。在这里，这些都是我们的列，我们打印出来了。所以让我们看看爱好者之后的几列。所以我们有开源者，开源就业。假设我们想从爱好者一直获取到这个就业列的所有列。
- en: So to do that， I'm just going copy that。 we can come down here and。We can just
    pass in a colon and then employment。 and that'll do a slice from hobbyist to employment。
    Now， I also want to point out that this is the reason that slicing is inclusive。
    for these values because imagine how much of a pain it would be。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我只是复制那个。我们可以在这里向下走，我们可以直接传入一个冒号然后是就业。这样就会从爱好者切片到就业。现在，我还想指出，这是切片包含这些值的原因，因为想象一下这会多麻烦。
- en: if we wanted all of the columns from hobbyist to employment。 but the last value
    here wasn't inclusive， and we had to come up here and say， well。 if I went from
    hobbyist to employment， then I really need to pass in， you know。 hobbyist to country
    and country not inclusive。 that would just be way too confusing。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从爱好者到就业的所有列，但最后一个值不是包含的，我们必须上面说，如果我从爱好者到就业，那么我真的需要传入，您知道的，爱好者到国家，而国家不包含。那就会太混乱了。
- en: So it's so much easier for this to be inclusive here。 So if you are wondering
    why they did that。 then that's why they do it。 So if I run this。 then we can see
    that now for we get these first three rows here。 And for the first three rows，
    we get all of those responses for the columns of hobbyist open sourcer all the
    way up to employment。So now we've seen an overview of everything that we've learned
    about exploring our data frames and series objects so far and how we can pluck
    some you know basic information out of these。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里变得更加包容。如果你在想他们为什么这样做，那就是原因所在。所以如果我运行这个，那么我们可以看到现在前面有这三行数据。对于前三行，我们获得了从业余爱好者到就业的所有列的响应。现在我们已经概述了到目前为止我们所学的关于探索数据框和系列对象的所有内容，以及如何提取一些基本信息。
- en: Now there's still tons to learn about data frames and series objects and will
    continue learning more learning more about these throughout the pandas series
    since these two data types are the main data types that we'll be using in pandas
    So we'll be learning more about advanced filtering queries。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在还有很多关于数据框和系列对象的内容需要学习，我们将继续在pandas系列中学习更多内容，因为这两种数据类型是我们在pandas中使用的主要数据类型。因此我们将学习更多关于高级过滤查询的内容。
- en: how to see which data type each column of our data contains and a lot more。
    Now before we end here。 I do want to mention that we have a sponsor for this video
    and that is brilliant org Briiant is a problem solving website that helps you
    understand underlying concepts by actively working through guided lessons and
    brilliant would be an excellent way to supplement what you learn here with their
    handson courses they have some excellent courses and lessons on data science that
    do a deep dive on how to think about and analyze data correctly So if you're watching
    my panda series because you're getting into the data science field then I would
    highly。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如何查看每一列的数据类型，还有很多其他内容。在结束之前，我想提到我们这段视频的赞助商是Brilliant。Brilliant是一个解决问题的网站，通过积极进行指导课程帮助你理解基础概念，Brilliant将是补充你在这里所学知识的极佳方式，他们有一些关于数据科学的优秀课程和教程，深入探讨如何正确思考和分析数据。因此，如果你在观看我的pandas系列，因为你正在进入数据科学领域，那么我强烈推荐你。
- en: '![](img/2d4994747457c38b804caa4a5ea21b5b_1.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d4994747457c38b804caa4a5ea21b5b_1.png)'
- en: '![](img/2d4994747457c38b804caa4a5ea21b5b_2.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d4994747457c38b804caa4a5ea21b5b_2.png)'
- en: '![](img/2d4994747457c38b804caa4a5ea21b5b_3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d4994747457c38b804caa4a5ea21b5b_3.png)'
- en: Recommend also checking out brilliant and seeing what other data science skills
    you can learn They even use Python in their statistics course and will quiz you
    on how to correctly analyze the data within the language Their guided lessons
    will challenge you but you'll also have the ability to get hints or even solutions
    if you need them it's really tailored towards understanding the material so to
    support my channel and learn more about brilliant you can go to brilliant org
    cms to sign up for free and also the first 200 people to go to that link will
    get 20% off the annual premium subscription and you can find that link in the
    description section below again that's brilliant。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 还建议你查看Brilliant，看看你可以学习到哪些其他数据科学技能。他们甚至在统计课程中使用Python，并会考核你如何正确分析语言中的数据。他们的指导课程将挑战你，但如果需要，你也可以获得提示或解决方案，这些课程非常适合理解材料。为了支持我的频道并了解更多关于Brilliant的信息，你可以访问brilliant
    org cms免费注册，前200位访问该链接的人将获得年度高级订阅20%的折扣，你可以在下面的描述部分找到该链接，再次感谢Brilliant。
- en: org cms。![](img/2d4994747457c38b804caa4a5ea21b5b_5.png)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: org cms。![](img/2d4994747457c38b804caa4a5ea21b5b_5.png)
- en: Okay， so I think that's gonna do it for this pandas video。 I hope you feel like
    you' got a good introduction to the data frame and series objects and how to navigate
    through some of your data。 Now， like I said， there's a lot more to learn about
    these data types and some advanced filtering that will learn in future videos。
    So be sure to stick around for that。 Now in the next video。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我想这就是这段pandas视频的全部内容。我希望你觉得自己对数据框和系列对象有一个好的介绍，以及如何浏览一些数据。正如我所说的，关于这些数据类型还有很多内容要学习，以及一些高级过滤将在未来的视频中学习。所以请务必关注接下来的内容。在下一个视频中。
- en: we're going be learning more about indexes。 So we saw basic default indexes
    in this video。 But we'll learn how to set the index to specific columns and the
    benefits of doing that in the next video。 But if anyone has any questions about
    what we covered here。 then feel free to ask in the comment section below and I'll
    do my best to answer those。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习更多关于索引的内容。在这个视频中我们看到了基本的默认索引。但在下一个视频中，我们将学习如何将索引设置为特定列及其好处。如果有人对我们这里讨论的内容有任何疑问，请随时在下面的评论区提问，我会尽力回答。
- en: And if you enjoyed these tutorials and would like to support them。 Then there
    are several ways you can do that。 The easiest ways to simply like the video and
    give it a thumbs up。 And also it's a huge help to share these videos with anyone
    who you think would find them useful。 And if you have the means you can contribute
    through Patreon。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这些教程并希望支持它们，有几种方式可以做到这一点。最简单的方式就是给视频点赞，点个赞。此外，分享这些视频给任何你认为会觉得有用的人也是巨大的帮助。如果你有条件的话，也可以通过Patreon进行支持。
- en: And there's a link to that page in the description section below。 be sure to
    subscribe for future videos。 And thank you all for watching。😊。![](img/2d4994747457c38b804caa4a5ea21b5b_7.png)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的描述部分有一个链接到那个页面。确保订阅以便观看未来的视频。感谢大家的观看。😊。![](img/2d4994747457c38b804caa4a5ea21b5b_7.png)
