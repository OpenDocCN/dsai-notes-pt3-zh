- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P40：40）Filter函数 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P40：40）过滤函数 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/8136362644f8a25b56808178af805eb5_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8136362644f8a25b56808178af805eb5_0.png)'
- en: Welcome back， everyone。 In this video， we're going to cover the filter function。
    And this is very similar to the map function we covered in the previous video
    where we have some sort of function。 I actually put this as fun because I think
    filters are fun and some sort of iterable containers。 It's going to return true
    if it matches the filter。 This is important。😊，If it matches the filter。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，大家。在这个视频中，我们将介绍过滤函数。这与我们在上一个视频中讨论的映射函数非常相似，我们有某种函数。我实际上把它称为fun，因为我认为过滤器很有趣，还有某种可迭代容器。如果匹配过滤条件，它将返回true。这很重要。😊如果它匹配过滤器。
- en: it will be placed in the result。 Otherwise， it will not。 This is a really powerful
    way of filtering things。We're going to look at two example usages of the filter
    function。 The first one is just simply getting a subrange。 And when I say simply。
    this is actually pretty powerful。 So I'm going to import a random。We've talked
    about random before。 and then I'm going to say some values， and we're going to
    make a blank list of values。Or x in range。And we're going to make 10 items。 And
    in those 10 items， we want to get a random number。 Some must say V do append。And
    we going to say or random。That。Rand range。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它将被放入结果中。否则，它将不会。这是一种非常强大的过滤方式。我们将看两个过滤函数的示例用法。第一个只是简单地获取一个子范围。当我说简单时，这实际上相当强大。所以我将导入一个随机数。我们之前讨论过随机数。然后我将说一些值，我们将创建一个空的值列表。对于x在范围内。我们将创建10个项目。在这10个项目中，我们想获取一个随机数。某种必须说V添加。我们将说或随机。那。随机范围。
- en: This is going to take a range from  one， I should say，0 all the way up to whatever
    there we go。 So we're going to say R range。And then we're just going to print
    this out。Just so we can see what our range actually returned。Let's go ahead and
    run this so we're just getting some random numbers 96， I mean。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从1，我应该说，从0开始，一直到我们所需的范围。所以我们要说R范围。然后我们只需打印出来。这样我们就可以看到我们的范围实际返回了什么。我们来运行一下，所以我们得到一些随机数96，我是说。
- en: you see they're just all over the place if I' run this multiple times and you
    see the numbers are changing down there。So what we're going to do now is say，
    I want to note the lower half of this。Bss walks in the room and says， I don't
    want anything over 50。 Okay。 so I'm going to make a little function。We're going
    to take our value。I'm going to say if。Value。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到它们到处都是，如果我多次运行这个，你会看到下面的数字在变化。那么我们现在要做的是说，我想注意这个的下半部分。老板走进房间说，我不想要超过50的东西。好的。所以我将创建一个小函数。我们将获取我们的值。我将说如果值。
- en: Is less than 50。Then I want to do something with it。I want to return。Rue。 because
    the boss said he only wants to see values less than 50， otherwise I'm going to
    say else。And we're going to return。Alsose。This is about as simple as it gets。
    This is basic filtering。 That's really what a filter does。 Does it match yes or
    no。That's it。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 是否小于50。然后我想对它做点什么。我想返回。真实。因为老板说他只想看到小于50的值，否则我将说else。我们将返回。假。这就是最简单的过滤。这就是过滤器的基本功能。是否匹配，是或不是。这就是全部。
- en: That's really as complex as it needs to be。 So I'm going to say F equals。 and
    we're going to go ahead and filter。Using the lower function。 Remember。 we had
    this conversation in the last video。So we have our function call and then we have
    our values。This list of values right here。Each one of these is going to get called
    turned。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的是它需要的复杂程度。所以我要说F等于。我们将继续过滤。使用下限函数。记住，我们在上一个视频中讨论过这个。因此我们有函数调用，然后是我们的值。这个值列表中的每一个都会被调用。
- en: So it's going to call it on 57，72 dot， dot and so on。 And the logic here is
    it's going to say。 is that individual value like 57。 I it less than 50 falses，70
    falses too true。 I think you understand the logic here。 So let's go ahead and。Print
    this out I'm going say print。F。And I want to say。Less than。I help if I put that
    in the actual votes there。Le， than  50。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它将调用57、72，等等。这里的逻辑是，它将说，像57这样的单独值。它是否小于50是假的，70是假的，是真的。我想你明白这里的逻辑了。那么我们继续吧。打印出来，我要说打印F。我想说小于。如果我把它放在实际的投票中，那就更好了，少于50。
- en: When your keyboard betrays you， Okay， so we're going to convert that into a
    list。Otherwise。 we're just going to get back a function object， which really doesn't
    help us out a whole lot。So here's our number set and the items that are less than
    50，1733，45 and 11。 So this is what I mean by it is extremely fun and powerful。Very
    quickly。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的键盘背叛你时，好吧，我们将把它转换为一个列表。否则，我们只会得到一个函数对象，这对我们帮助不大。所以这是我们的数字集合，以及小于50的项目，17、33、45和11。这就是我所说的，它非常有趣且强大。非常快。
- en: can you just take some sort of data set here and just say， you know what。 I
    only want to see certain items and then build some sort of custom logic to get
    a subrange of that data。Now， even though this video series is aimed at the complete
    newbie。 I don't like to stay in newbie land very long。 So we're going to jump
    into a little bit more of an advanced topic。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你能否在这里拿一个数据集，然后说，我只想查看某些项目，然后构建某种自定义逻辑来获取该数据的子范围？虽然这个视频系列是针对完全的新手，但我不喜欢在新手阶段停留太久。因此，我们将跳入一个稍微高级一点的主题。
- en: and we're going to actually filter types。 So when I say filter types， we're
    talking about classes。 So we're going to filter an animal。And we're just going
    to make a class real quick here and' going to set your name。My name error。 My
    keyboard has betrayed me。And we're going to say。Instructtor here。Bear with me
    super quick as I make some little plumbing code。Get our constructor up and roll
    in here。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上要过滤类型。所以当我说过滤类型时，我们是在谈论类。我们将过滤一种动物。我们将在这里快速创建一个类，并设置你的名字。我的名字错误。我的键盘背叛了我。我们将说这里是构造函数。请耐心等我快速写一些代码，让我们的构造函数开始运行。
- en: Self dot name。Wells name， All right， now that we've got our animal class。 and
    I'm not going to make this super complex。We could just take this copy。Haste。 let's
    call this hat。It's going to inherit animal。And because we're inheriting。 we can
    get rid of this and we can get rid of this。And it's super simple from here。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: self.dot.name。好的，现在我们已经有了我们的动物类。我不会让它变得超级复杂。我们可以简单地复制一下。让我们称之为帽子。它将继承动物。因为我们在继承，我们可以去掉这个和这个。从这里开始超级简单。
- en: we just say super。Get it super simple。 Anyways， I won't quit my day job。 We're
    gonna go ahead and initialize it with the name。I could actually spell name。 There
    we go。 And because I know there's also dog lovers out there。 We're gonna make
    a dog class as well。 And anybody who knows dogs and cats know， they typically
    don't mix swell together。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们就说超级。让它超级简单。无论如何，我不会辞掉我的日常工作。我们将用名字初始化它。我实际上可以拼写出名字。好了。因为我知道外面也有狗狗爱好者。我们还将创建一个狗类。任何了解狗和猫的人都知道，它们通常不太容易和谐相处。
- en: Although I've been pretty fortunate in life where every dog and cat combination
    that I've had。 they've just really gotten get along together really well。 So animal。😊，We
    have a cat。 which is an animal dog， which is an animal， but these are two different
    classes that don't even know the other exists。This is where the complexity comes
    in， and you're going to see this time and time again。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我在生活中非常幸运，每一对狗和猫的组合都相处得很好。所以动物。😊 我们有一只猫，它是动物；有一只狗，它也是动物，但这两个类根本不知道对方的存在。这就是复杂性所在，你将一次又一次地看到这一点。
- en: What have we just done？Well， we are making a list。That will be called animals。
    And we're going to dump at some dogs into the same list。 Some must say poor X
    in range。And we want from under 10。I should say 0 to 9， but we're going to go
    ahead and let's say。If。And then we're going to do something a little funky here。
    We're going to say x。Moud to。Well 0。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚做了什么？好吧，我们正在创建一个名为动物的列表。我们将把一些狗放入同一个列表中。有些可以说在范围内的可怜的X。我们希望在10以下。我应该说从0到9，但我们将继续，假设。如果。然后我们将做一些奇怪的事情。我们将说x模0。
- en: basically， what we're doing here is we're saying we only want the even number。Then
    we're going to go ahead and say animals dot append。We're going to make a new cat。And
    we're going to give it some type of name。 So let's go back up here real quick。
    And I'm going to say name equals。Animal。Plus， whatever the number is。All right。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们在这里所做的就是，我们只想要偶数。然后我们将继续说animals.dot.append。我们将创建一只新的猫，并给它一些名字。所以让我们回到这里。我要说名字等于。动物加上，无论数字是多少。好的。
- en: so once we've gotten to this point， then if it's not even， it is， well， you
    guessed it odd。 and we can just simply grab this。AndMaybe I should have done that
    backwards because cats are just odd。 Dos are usually pretty even， but cats are
    usually really weird。All right， so anyways。 we've got that。Now we're going to
    go ahead and print out。Are animals。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一旦我们达到这一点，如果它不是偶数，那就是，你猜的对，是奇数。我们可以简单地抓住这个。也许我应该反向操作，因为猫是奇数。狗通常是偶数，但猫通常真的很奇怪。好的，反正。我们已经得到了。现在我们将继续打印出我们的动物。
- en: Just so we can see that we have a mixture of them and sure enough， a bit of
    godly g on the screen。 but we have cat dog， cat dog， cat dog， cat dog。Very simple。
    very easy to understand what we've just done。 We've made a list that contains
    both cats and dogs and is just a jumbled mass。Now， I want to sort this out a little
    bit。 Can't say 4 a in animals。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以看到它们的混合，果然，屏幕上出现了一些神奇的东西。但我们有猫狗，猫狗，猫狗，猫狗。非常简单。非常容易理解我们刚刚做了什么。我们做了一个包含猫和狗的列表，只是一个杂乱的集合。现在，我想稍微整理一下。不能在动物中说4a。
- en: And I'm just going to print this out make it look nice and pretty on the screen。And
    I'm just having a good day。Enjoying my coffee。And we'll say animal。And super smart
    of me to do this。 Now， it looks super great。 And I'm going to impress the boss。
    and I'm going to get a raise and oh， name。 Yes， cause we hard coded it。Very easy
    to fix this。Yes。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是要把它打印出来，让它在屏幕上看起来漂亮。我今天过得很好，享受我的咖啡。我们说动物。做这个真是聪明。现在，看起来非常棒。我会给老板留下深刻印象，我会得到加薪，哦，名字。是的，因为我们硬编码了这个。修复它非常简单。是的。
- en: my boss is walking around the corner。 I'm going to show him this。 I'm going
    to save the company millions of dollars。 And sure enough。 I have my nice little
    collection of animals here。 And the boss says， that's great。😊，But。 I only want
    cats。And then I only want dogs。 I want two different lists。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我的老板正在转角走来。我将向他展示这个。我将为公司节省数百万美元。果然，我在这里有我漂亮的小动物集合。老板说，太好了。😊，但是。我只想要猫。然后我只想要狗。我想要两个不同的列表。
- en: but you have to maintain this single list。Now， I got to write all this code。
    Well。 this is where the filter function comes in， as you might have guessed， some
    must say deaf cats。And we're going to make a cat filter。That just sounds really，
    really cool。 a cat filter。 So we're going to turn is instance。And I'm going to
    say， is that value。An instance of the cat class。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但你必须保持这个单一列表。现在，我得写下所有这些代码。好吧。这就是过滤函数的用武之地，正如你可能猜到的，某些人会说聋猫。我们要创建一个猫过滤器。听起来真的很酷，一个猫过滤器。所以我们将转为实例。我会说，这个值。是猫类的实例吗？
- en: That's it， that's really as complex as we need to make this。 we just want to
    make sure it is an instance。We can do the same thing for dogs。And then we can
    use that filter function。To utilize these two functions。To their fallalest extent。So
    I'm going to say4 C in。And then I want to make a list。And we're going to filter。Because
    remember。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，这就是我们需要使其复杂的程度。我们只想确保它是一个实例。我们可以对狗做同样的事情。然后我们可以使用那个过滤函数。充分利用这两个函数。因此，我要说4
    C，然后我想创建一个列表。我们将进行过滤。因为记住。
- en: filter is going to return a filter object。 We need to convert that to a less。
    We're going to filter the cats。Using the animals。Slow and way down。 So it makes
    sense here。We're going to go ahead and print。Actually， I going say cats。And I
    am going to explain this in case you're completely lost。 Don't worry。All right。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: filter将返回一个过滤对象。我们需要将其转换为一个较少的。我们要过滤猫。使用动物。慢下来一点。这在这里是合理的。我们将继续打印。实际上，我要说猫。我会解释这一点，以防你完全迷失方向。别担心。好的。
- en: so what we're doing is very similar to our 4A in animals。 except for we're saying4
    C and we're going to make a list from whatever filter gives us and we're telling
    filter。 use the cats function。And use the animals collection。 Remember animals
    is a mixture of cats and dogs。And we're just going to say for each item。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们所做的与我们在动物中的4A非常相似。除了我们说4 C，我们将从过滤器给我们的任何内容中创建一个列表，我们告诉过滤器。使用猫的函数。并使用动物集合。记住，动物是猫和狗的混合。我们只是说对每个项目。
- en: determine if it is a cat， which're is going to return is instance。And then we
    can do the same thing。Or dogs。Very simple， very easy to understand， and when we
    run it now we have beautifully separated these。Now， we have cats。And those are
    the evens， and then we have dogs， and those are the odds。Okay。Prety much sums
    it up for this video。 main takeaway from this is filter is going to return a alter
    object。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确定它是否是猫，这将返回实例。然后我们可以做同样的事情。或者是狗。非常简单，容易理解，当我们现在运行时，我们已经很好地将这些分开了。现在，我们有猫。这些是偶数，然后我们有狗，这些是奇数。好的。这段视频大致总结就是，filter将返回一个替代对象。
- en: We need to pass it a function and some sort of iterable container From there。
    it just really needs to return a true or a false。 If it's true。 it's going to
    end up in the result list。![](img/8136362644f8a25b56808178af805eb5_2.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要传递一个函数和某种可迭代容器。从那里，它只需要返回真或假。如果是真，它将最终出现在结果列表中。![](img/8136362644f8a25b56808178af805eb5_2.png)
