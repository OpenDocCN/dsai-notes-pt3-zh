- en: 【双语字幕+资料下载】Pytorch 进阶学习讲座！14位Facebook工程师带你解锁 PyTorch 的生产应用与技术细节 ＜官方教程系列＞ - P1：L1-
    PyTorch 中的复数 - ShowMeAI - BV1ZZ4y1U7dg
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Pytorch 进阶学习讲座！14位Facebook工程师带你解锁 PyTorch 的生产应用与技术细节 ＜官方教程系列＞ - P1：L1-
    PyTorch 中的复数 - ShowMeAI - BV1ZZ4y1U7dg
- en: 🎼。![](img/30cfbf4aab59021d051c0076fb315c26_1.png)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 🎼。![](img/30cfbf4aab59021d051c0076fb315c26_1.png)
- en: Hi， everyone。 Thanks for having me here today。 My name is Anjuli。 and I've spent
    the last year working on an exciting project in the Pytorch team。 That project
    is complex numbers， and that's all we're going to be talking about today。 So jumping
    right in。 let's talk a little about what complex numbers are。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，大家好。感谢你们今天让我来这里。我的名字是Anjuli，我在Pytorch团队工作了过去一年，参与了一个令人兴奋的项目。这个项目就是复数，今天我们将讨论的就是这个话题。所以直接开始吧，让我们聊聊复数是什么。
- en: Some of you may already be familiar with complex numbers。 but I'll just go over
    them briefly to make sure we're on the same page。😊。![](img/30cfbf4aab59021d051c0076fb315c26_3.png)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一些人可能已经熟悉复数。但我会简单回顾一下，以确保我们在同一页面。😊。![](img/30cfbf4aab59021d051c0076fb315c26_3.png)
- en: Conft numbers are numbers that can be expressed as a+ B。 where A and B are real
    numbers and I is a unit imaginary number。 which equals to square root of minus1。So
    now that we have established what complex numbers are。 let's talk a little about
    where they are used。Complex numbers of applications in a variety of fields。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 复数是可以表示为 a + b 的数字，其中 A 和 B 是实数，I 是单位虚数，等于负1的平方根。所以现在我们已经确定了复数是什么，让我们谈谈它们的应用领域。复数在多个领域都有应用。
- en: especially ones in math， physics and engineering quantum mechanics and signal
    processing are some of the examples you might be familiar with。 and thanks to
    Euler who came up with this amazing formula as shown on the screen that relates
    in imaginary number to sine and cosine terms so for example。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在数学、物理和工程领域，量子力学和信号处理是你可能熟悉的一些例子。感谢欧拉，他提出了这个神奇的公式，如屏幕上所示，将虚数与正弦和余弦项联系起来，例如。
- en: this relationship can be used to rewrite a standard cosine wave equation as
    a product of two complex exponentials and this often simplifies a math involved
    since complex exponentials are easier to manipulate than their sinusoidal counterparts。😊，We
    can also get benefit from complex numbers in the field of deep learning。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个关系可以用来将标准的余弦波方程重写为两个复指数的乘积，这通常简化了相关的数学计算，因为复指数比它们的正弦对应物更容易处理。😊我们还可以在深度学习领域中从复数中获益。
- en: Recent work on neural nets and older fundamental theoretical analysis suggests
    that complex numbers could have a rich representational capacity before Pytorch's
    lack of native complex support made it harder than it had to be to unlock that
    potential and at Pytororch we're about empowering research in our users our philosophy
    is to make things easy to use and to get the hard things out of users way So as
    we've been receiving a request for complex number support。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最近关于神经网络的工作和旧有的基本理论分析表明，复数可能具有丰富的表示能力，但由于Pytorch缺乏原生复数支持，使得解锁这种潜力变得更加困难。在Pytorch，我们致力于赋能我们的用户，我们的理念是使事情易于使用，并为用户扫清困难的障碍。随着我们收到对复数支持的请求。
- en: we decided to do something about it。 Here are some of the request from the Pytorge
    discussion forum that we have received over the years。 we're going to talk about
    some of these things listed here later。 but what I would really like to emphasize
    on is that this is a community drivenn project and we prioritize the features
    weve built based on the ongoing feedback from the community as well with the community
    to do the actual development。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定对此采取一些措施。以下是我们多年在Pytorge讨论论坛收到的一些请求。稍后我们会讨论这里列出的一些内容，但我想特别强调的是，这是一个以社区驱动的项目，我们根据社区的持续反馈来优先考虑我们构建的功能，并与社区合作进行实际开发。
- en: '![](img/30cfbf4aab59021d051c0076fb315c26_5.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30cfbf4aab59021d051c0076fb315c26_5.png)'
- en: So what we heard from the community boils down to three main points。 which were
    the motivation behind adding native complex support。 First is natural representation。
    Historically， we represented complex numbers as a tuple of two real numbers。 but
    we heard from many users。 that was just plain exhausting to write code with that
    convention。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从社区听到的意见归结为三个主要点。这是添加原生复数支持的动力。第一个是自然表示。历史上，我们将复数表示为两个实数的元组。但我们听到许多用户反映，使用这种约定编写代码实在太累了。
- en: And so we wanted to introduce an API that makes working with complex numbers
    in Pytorrch easier。 as well as makes the code more maintainable。 Second， is complex
    functionality。 If would like to provide nuy like support for complex operations
    and leverage Pytorch's ability to run with accelerators。😊，So far， we've also added
    many specialized kernels on both CPUU and GPU to optimize complex operations。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们希望引入一个 API，使得在 Pytorrch 中处理复数变得更简单，同时让代码更易于维护。其次是复数功能。如果你想为复数操作提供类似的支持，并利用
    Pytorch 在加速器上运行的能力。😊到目前为止，我们还在 CPU 和 GPU 上添加了许多专用内核，以优化复数操作。
- en: in fact on CPUU we also support recization for complex operations。And third
    is autograd。 as I mentioned before， we want to support neuralNe research。 and
    so we're working to add complex autograd support， which is helpful in optimization
    problems。![](img/30cfbf4aab59021d051c0076fb315c26_7.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，在 CPU 上，我们也支持复数操作的复用。第三是自动微分。正如我之前提到的，我们希望支持神经网络研究，因此我们正在努力添加复数自动微分支持，这在优化问题中是非常有帮助的。![](img/30cfbf4aab59021d051c0076fb315c26_7.png)
- en: '![](img/30cfbf4aab59021d051c0076fb315c26_8.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30cfbf4aab59021d051c0076fb315c26_8.png)'
- en: So let's take a look at how will complex tensor simplify our life in Pitorrch？
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们来看看复数张量如何简化我们在 Pitorrch 中的生活？
- en: '![](img/30cfbf4aab59021d051c0076fb315c26_10.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30cfbf4aab59021d051c0076fb315c26_10.png)'
- en: Those of you who view spectrallos in Pytorch before might be familiar with the
    code on the right。 the display tensor shows how we have historically represented
    complex numbers in torch。 As you can see it looks bulky， ugly and hard to read。
    and there's really no good reason to not have complex data types in torch。 so
    in Pytorch 1。6。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那些在 Pytorch 中查看过谱图的朋友，可能对右侧的代码比较熟悉。显示的张量展示了我们历史上在 torch 中如何表示复数。正如你所见，它看起来笨重、丑陋且难以阅读，实际上没有理由不在
    torch 中使用复数数据类型。因此在 Pytorch 1.6 中。
- en: we introduced two native complex D types， complex 64 and complex 128。 which
    correspond to float and double data types。I would also like to mention here that
    the functions in the newly added towards 15 module。 which Michael will talk about
    later support complex numbers。Now another good thing about having native complex
    support is that you no longer have to write all the annoying time consuming and
    error prone workarounds which used to be necessary。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了两种本地复数 D 类型，complex 64 和 complex 128，分别对应于 float 和 double 数据类型。我还想提到，新增加的第
    15 模块中的函数，迈克尔稍后会讲到，支持复数。现在，拥有本地复数支持的另一个好处是，你不再需要编写所有麻烦、耗时且容易出错的解决方法。
- en: and with our latest release， many common operations like Mamall， SVD。 etc are
    available for our complex number users。We've also added support for core properties
    as well as Tensa constructors to have natural complex number support that you
    may be familiar with from Ny and Python。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们最新的版本中，许多常见操作，如 Mamall、SVD 等，已经为我们的复数用户提供了支持。我们还添加了核心属性和张量构造函数的支持，以便提供自然的复数支持，正如你在
    Ny 和 Python 中所熟悉的那样。
- en: and on their right is an example of a Facebook code of function written using
    the native complex support。The details of the code are not really important， it's
    really to tell that we're constantly adding functionality to prioritize use cases
    that our community finds valuable。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧是使用本地复数支持编写的 Facebook 代码函数的示例。代码的细节并不重要，重要的是我们不断添加功能，以优先满足社区认为有价值的用例。
- en: 😊。![](img/30cfbf4aab59021d051c0076fb315c26_12.png)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 😊。![](img/30cfbf4aab59021d051c0076fb315c26_12.png)
- en: Here are some examples of the operators we have added so far。 as you can see
    we have added support for many linear algebra ops。 trignometric ops and algebraic
    ops， and we're constantly working to add more。![](img/30cfbf4aab59021d051c0076fb315c26_14.png)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们迄今为止添加的一些操作符的示例。正如你所见，我们已经支持了许多线性代数操作、三角函数操作和代数操作，并且我们不断努力添加更多。![](img/30cfbf4aab59021d051c0076fb315c26_14.png)
- en: And it doesn't stop there， with the latest release， you can also differentiate
    complex functions。![](img/30cfbf4aab59021d051c0076fb315c26_16.png)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 而且不仅如此，在最新版本中，你还可以对复数函数进行微分。![](img/30cfbf4aab59021d051c0076fb315c26_16.png)
- en: For those of you who are familiar with complex differentiation。 we compute the
    conjugate wording derivatives For those of you who are not but just want to be
    able to use optimizers with complex parameters。 we got you covered with a gradientd
    convention the existing optimizers work out of the box with a common case of optimizing
    real valued objective and in case you are just curious to write custom gradient
    functions you can check out our complex autograd documentation on our website。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些熟悉复杂微分的人来说，我们计算共轭词导数；对于那些不熟悉但希望能够使用复杂参数的优化器的人，我们为你提供了梯度约定，现有的优化器可以开箱即用，处理优化实值目标的常见情况。如果你只是好奇想要编写自定义梯度函数，可以查看我们网站上的复杂自动微分文档。
- en: And that's where we stand today， going forward， we're actively working to a
    and distribute computing support。 which would help us deliver performance wins
    bigger than before。😊。We're also expanding complex operator coverage and working
    to add native complex support to torch audio。 which uses a lot of complex numbers。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们今天的现状，展望未来，我们正在积极工作以支持分布式计算，这将帮助我们实现更大的性能提升。😊 我们还在扩展复杂操作符的覆盖范围，并努力为torch
    audio添加本地复杂支持，因为它使用了大量的复杂数字。
- en: '![](img/30cfbf4aab59021d051c0076fb315c26_18.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30cfbf4aab59021d051c0076fb315c26_18.png)'
- en: So I hope we got you excited about using conflict numbers in Pytorch。 We had
    the documentation up on our website to get you started， So try it， give us feedback。
    let us know what you think and really every bit of feedback we get like every
    bug report and every you know this was weird and we didn't really understand why
    this happened is really valuable to us we also have a lot of interesting ongoing
    discussions at Github like conflict support for To N N modules that you can get
    involved in Finally。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我希望我们能让你对在Pytorch中使用复杂数字感到兴奋。我们在网站上提供了文档以帮助你入门，所以请尝试一下，给我们反馈，让我们知道你的想法。我们收到的每一条反馈，如每一个bug报告和每个“这很奇怪，我们不明白为什么会发生”的意见，对我们都非常有价值。我们在Github上还有很多有趣的讨论，如N
    N模块的冲突支持，你可以参与其中。
- en: if you would like to request new functionality or join the amazing community
    of contributors check us out on Github。 we're constantly monitoring the complex
    table on Github。 So filing new issues and engaging in discussions is a great way
    to let us know what youd like to see in the upcoming releases。 I would like to
    bring this presentation to a close by giving a shout out to our amazing open source
    contributors and thanking them for adding a lot of conflict support to Pytorch。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想请求新的功能或加入这个精彩的贡献者社区，请在Github上查看我们。我们一直在监控Github上的复杂表格。因此，提交新问题和参与讨论是让我们知道你希望在即将发布的版本中看到什么的好方法。我想以感谢我们出色的开源贡献者为结束，感谢他们为Pytorch添加了大量的冲突支持。
- en: 😊。![](img/30cfbf4aab59021d051c0076fb315c26_20.png)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 😊。![](img/30cfbf4aab59021d051c0076fb315c26_20.png)
- en: '![](img/30cfbf4aab59021d051c0076fb315c26_21.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30cfbf4aab59021d051c0076fb315c26_21.png)'
- en: And thank you for tuning in today and showing interest。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你今天的收看和关注。
