- en: 【双语字幕+资料下载】用 Pandas 进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P4：4）过滤 - 使用条件过滤行和列
    - ShowMeAI - BV1M64y187bz
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】用 Pandas 进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P4：4）过滤 - 使用条件过滤行和列
    - ShowMeAI - BV1M64y187bz
- en: Hey there。 How's it going， everybody。 In this video。 we're gonna go over the
    basics of filtering data from data frames and series objects。 So。 for example，
    if we wanted to look at our survey data and only look at people who know Python。
    Then we can filter that data out。 Or maybe we only want to see results from a
    specific country or people that have a specific salary range。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，你们过得怎么样？在这个视频中，我们将介绍如何从数据框和系列对象中过滤数据的基础知识。所以，例如，如果我们想查看我们的调查数据并只查看会使用Python的人。我们可以过滤出那些数据。或者也许我们只想查看来自特定国家的结果，或者是拥有特定薪资范围的人。
- en: Anything like that。 We can do all of that by filtering out data from our series
    and data frame objects。 and we'll learn how to do that in this video， So filtering
    is one of the main things to learn with pandas because it's basically how we begin
    every project by filtering the data that we want from the data that we don't。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 类似这样的事情。我们可以通过过滤我们的系列和数据框对象中的数据来做到这一切。我们将在这个视频中学习如何做到这一点，所以过滤是学习pandas的主要内容之一，因为这基本上是我们通过过滤我们想要的数据与不想要的数据来开始每个项目的方式。
- en: Now， I'd also like to mention that we do have a sponsor for this video。 And
    that is brilliant org。 So I'd really like to thank brilliant for sponsoring this
    series。 And it would be great if you all could check them out using the link in
    the description section below and support the sponsors。 And I'll talk more about
    their services in just a bit。 So with that said。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我还想提到我们有一个赞助商为这个视频提供支持。那就是brilliant org。所以我真的很想感谢brilliant赞助这个系列。如果你们能通过下面描述部分的链接去查看他们并支持赞助商，那就太好了。我稍后会多谈谈他们的服务。所以话说回来。
- en: let's go ahead and get started。 Okay， so first of all。 let me show you something
    that's going to be the basis for our filters。 If we perform。😊。basic comparisons
    using our data frames。 Then we'll get back some interesting results。 So let's
    see what this looks like。 So right now， I have my snippets notebook open that
    we've seen a couple of times throughout the series。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。好的，首先让我给你们展示一些将成为我们过滤基础的内容。如果我们进行基本的比较，使用我们的数据框。那么我们将得到一些有趣的结果。让我们看看这个是什么样的。所以现在，我打开了我们在系列中看到过几次的代码片段笔记本。
- en: and at the bottom here。 I'm going to make a basic comparison and see what the
    result looks like。 So let's say that I wanted everyone that has the last name
    of do from our data frame。 there should be two， since we have a Jane do and a
    John Do here in our data frame。 So in our bottom cell here， I'm going to put a
    comparison that says Df。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里底部，我要进行一个基本的比较，看看结果是什么样的。所以假设我想要数据框中姓氏为“do”的每个人。应该有两个，因为我们在数据框中有一个Jane do和一个John
    Do。所以在我们底部的单元格中，我将放入一个比较，表示Df。
- en: and then we want to access that last name column。 And now we can just say if
    that last name equals equals do。 So if I run this then what we get back is a series
    object。 And this might not be what you expected。 So maybe you thought we would
    just get a data frame back with all of the values that met our criteria。 But what
    we got back is a series with a bunch of true false values。😊，Now。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们想要访问那个姓氏列。现在我们可以简单地说，如果那个姓氏等于“do”。所以如果我运行这个，那么我们得到的将是一个系列对象。这可能不是你所期望的。所以也许你认为我们会得到一个包含所有满足我们条件的值的数据框。但我们得到的是一个带有一堆真值和假值的系列。😊
    现在。
- en: these true false values actually correspond to our original data frame and the
    true values are the rows that met our filter criteria and the false values are
    the rows that didn't meet our filter criteria。 So you can basically think of this
    like a mask。 So we can see here up here in our simple data frame the last name
    of shaffer is false。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些真值和假值实际上对应于我们的原始数据框，真值是满足我们的过滤条件的行，而假值是未满足过滤条件的行。所以你可以基本上把这个想象成一个掩码。因此我们可以在这里看到，在我们的简单数据框中，姓氏为shaffer的值是假的。
- en: and these two last names here with do are true。 So this is a filter mask when
    and when you apply it to a data frame。 it will give you all of the rows that meet
    that filter criteria。 So now let's apply this filter to our data frame。 So first。
    I'm going to assign this this return series here to a variable。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个姓氏中的“do”是真的。所以这是一个过滤掩码，当你将它应用于数据框时，它会给你所有满足该过滤条件的行。那么现在我们来将这个过滤器应用于我们的数据框。首先，我要将这个返回的序列赋值给一个变量。
- en: And I'm just gonna call this variable filter。 So I'll say Fil is equal to。 and
    then this comparison here。 Now filter is a built in Python keyword。 So be sure
    to use something else。 Anytime I assign these two variables。 I usually just use
    this fil keyword here。We not keyword， but variable name。 Now。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我就把这个变量叫做过滤器。所以我会说Fil等于，然后这个比较。现在filter是Python内置的关键字。所以请确保使用其他名称。每次我分配这两个变量时，我通常只使用这个fil关键字。我们不是关键字，而是变量名。现在。
- en: I also usually like to wrap my entire filter in parentheses because I find it
    easier to read。 So this isn't going to change anything。 but I'm just going to
    put this entire thing here within parentheses so that I can see that this assignment
    here is separate from this equal sign。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常也喜欢将整个过滤器用括号括起来，因为我觉得这样更容易阅读。所以这不会改变任何事情，但我只是把整个内容放在括号里，这样我就可以看到这个赋值和这个等号是分开的。
- en: Okay， so now we have this filter here。 and remember that this this filter variable
    here is equal to this series here of true and false values。 And now let's apply
    this filter to our data frame。 And we can do this in a couple of ways。 So you
    might see some people do it like this。 We can just pass that directly in like
    we are searching for a column。 we can pass in a filter there。 And if I run this。
    oops。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以现在我们有这个过滤器。记住，这个过滤器变量等于这系列的真和假值。现在让我们将这个过滤器应用于我们的数据框。我们可以通过几种方式做到这一点。所以你可能会看到一些人这样做。我们可以直接传入，就像我们在搜索一个列一样。我们可以在这里传入一个过滤器。如果我运行这个，哦，不。
- en: and I got an error there because I did not run this cell to set that variable。
    So I'll rerun that And now if I run this。 Then now we can see that we get a data
    frame back where it returned all of the rows that have。😊，Last name of Do。 Now，
    we only assigned the filter on a different line because I think that's easy to
    read。 but you might see some people put these comparisons directly in the brackets
    for the data frame。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里遇到了一个错误，因为我没有运行这个单元来设置那个变量。所以我会重新运行它。现在如果我运行这个，然后我们可以看到返回了一个数据框，其中包含所有有姓氏“Do”的行。😊现在，我们只是在不同的行上分配过滤器，因为我觉得那样更容易阅读。但你可能会看到一些人将这些比较直接放在数据框的括号中。
- en: So you might see something like this。 So I'm just going to comment that out
    right now and just grab this entire filter here。 you might see some people do
    it like this and just paste it or put it directly in there。 and we can see that
    that works too。 Now I think that that's a little more difficult to read than just
    assigning this to a variable。 So I'm just going to use that as a variable， but
    you should know that it is a possibility since you will see some people put the
    filter directly in there。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可能会看到像这样的情况。我现在就把它注释掉，抓取这个整个过滤器。你可能会看到一些人这样做，直接粘贴或放进去，我们也可以看到那样也有效。现在我觉得这比仅仅将其分配给变量更难以阅读。所以我会将其用作变量，但你应该知道这是一种可能性，因为你会看到一些人直接将过滤器放进去。
- en: Okay so that's one way of narrowing down those rows。 Now another way that you
    can do this。 And the way that I prefer to do it is to use the dot lo indexer that
    we've seen a few times now。 And I'll talk a bit about why I prefer this in a second。
    But if we pass in that。Of bullions into dot Lo， then it should give us the same
    results that we currently have。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是一种缩小这些行的方法。现在你可以做的另一种方法，我更喜欢的方式是使用我们已经看到几次的点lo索引器。我稍后会讲讲我为什么更喜欢这个。但如果我们将布尔值传入点lo，那么它应该给我们与当前相同的结果。
- en: So if I say Df dot lo and pass in that same filter。 then we can see that we
    get the exact same thing。 This here gave us the same results as our dot Lo down
    here。 So this is one reason why pandas can be a bit confusing to people because
    there are multiple things that you can pass into these different brackets to get
    different results。 So like I said before， do Lo is used to look up rows and columns
    by label。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我说Df点lo并传入相同的过滤器，我们可以看到得到完全相同的结果。这给我们带来了与我们下面的点lo相同的结果。这是pandas让人感到困惑的一个原因，因为你可以将多个东西传入这些不同的括号以获得不同的结果。正如我之前所说，do
    lo用于按标签查找行和列。
- en: But if you pass in a series of bulloles like we did here， then you can also
    filter data out。 Now。 the reason that I like using dot Lo for this is because
    we can still grab these specific columns that we want as well。 So， for example，
    if I wanted the email column then I could simply say pass in a second value here
    into dot Lo。 and just say that we want that email column。 if I run that。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你传入一系列布尔值，就像我们这里做的那样，你也可以过滤数据。现在，我喜欢使用**dot Lo**的原因是因为我们仍然可以抓取我们想要的特定列。例如，如果我想要电子邮件列，我可以简单地在**dot
    Lo**中传入第二个值，并说我们想要那个电子邮件列。如果我运行这个。
- en: then we can see that we get the emails that match those last names。So remember
    the first value to dot Lo are the rows that we want and the second value here。
    are the columns that we want。 So since I wanted the email column。 it gives me
    a series of those emails where the last name is equal to Do so real quick let's
    go over some other ways to filter data out here。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到匹配那些姓氏的电子邮件。所以记住，**dot Lo**的第一个值是我们想要的行，第二个值是我们想要的列。由于我想要电子邮件列，它给我返回了一个那些姓氏等于**Do**的电子邮件系列。所以让我们快速看看其他一些过滤数据的方法。
- en: So first， let's go over the and and or operators。 Now we can't use the python
    built in and and or keywords for our filters So we're going to be using some other
    symbols and the ss that we're going to use here are the ampersand for and let
    me write these out here。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看**与**和**或**操作符。现在，我们不能使用Python内置的**and**和**or**关键字作为我们的过滤器，所以我们将使用其他符号，我们将在这里使用的符号是&作为**与**，让我把这些写下来。
- en: the ampersand for an and and this vertical bar for an or。 So these symbols carry
    over from other programming conventions So you may have seen them before。 So for
    example， let's say that we wanted our filter to get all of the rows where the
    last name is Do and the first name is John which should only return this one result。So
    in order to do this， we can go back up to our filter here and I'm just going to
    get rid of this cell here because I'm just going to be using dot Lo from now on。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**与**的符号是&，**或**的符号是竖线。这些符号沿用了其他编程约定，所以你可能以前见过它们。例如，假设我们想要过滤所有姓氏为**Do**且名字为**John**的行，这应该只返回这个结果。为此，我们可以回到我们的过滤器，并且我会去掉这个单元格，因为接下来我只会使用**dot
    Lo**。'
- en: so now with our filter here， let's say that we want a last name equal to dough
    and which we're going to use the Ampersand and we want the first name equal to
    John。So I will put that in here。 And I also let me actually separate these out
    as well。 I like to have each one wrapped in parentheses。 I think it makes it a
    bit easier to read。 So now if I rerun that filter and then rerun our dot Lo。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用我们的过滤器，假设我们想要姓氏等于**dough**，我们将使用&，并且我们想要名字等于**John**。所以我会把这个放进去。我还会把它们分开。我喜欢把每一个都用括号括起来。我认为这样阅读起来更容易。所以如果我重新运行那个过滤器，然后重新运行我们的**dot
    Lo**。
- en: then we can see that now we're just getting that single email address。 And that
    email。 again is where all of the last names were equal to Doe。 and the first names
    were equal to John。 So in this case， it's just one result。 So now let's look at
    an example using the or operator。 Now for this， we can use the vertical bar character。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到现在只得到了那个单一的电子邮件地址。这个电子邮件地址是所有姓氏等于**Doe**且名字等于**John**的结果。所以在这种情况下，只有一个结果。那么现在我们来看一个使用**或**操作符的例子。为此，我们可以使用竖线字符。
- en: So let's say that I wanted a filter where the last name is equal to shaeffer
    or the first name is equal to John。 Okay， so if I wanted the last name to be equal
    to chaeffer。 or the first name is equal to John for the or， we're going to do
    a vertical bar character there。 So now if I rerun this。 then we can see that we
    get back all of the rows or all the email addresses。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想要一个过滤器，其中姓氏等于**shaeffer**或名字等于**John**。好吧，如果我想让姓氏等于**chaeffer**，或名字等于**John**，我们在这里使用一个竖线字符。因此，如果我重新运行这个，就可以看到我们得到了所有的行或所有的电子邮件地址。
- en: 😊，Where the last name is equal to shafer or the first name is equal to John。
    So in this case。 it was these two rows here。 Now we can also get the opposite
    of a filter。 So let's say that I wanted to get the complete opposite of this filter
    where we want all of the rows where the last name isn't shaefffer and the first
    name isn't John。 Now I could go in here and fiddle around with this query that
    I currently have trying to get everything right。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 😊，最后一个名字等于沙弗，或者第一个名字等于约翰。所以在这种情况下，这正是这两行。现在我们也可以得到一个过滤器的相反结果。假设我想获得这个过滤器的完全相反结果，即我们希望所有最后一个名字不是沙弗，且第一个名字不是约翰的行。现在我可以在这里调整一下我当前的查询，尝试把一切弄对。
- en: or I could simply add in a tilda at the beginning of this filter。 and it will
    give me everything that didn't match that filter。 So if I just come in here and
    put a tilda there。 then that is going to negate that filter and give me the opposite
    of those results。 So we can see here that we get Jane Doe。 because that are that
    is all the results where the last name was not shaffer or the first name wasn't
    John。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我可以简单地在这个过滤器的开头添加一个波浪号，它会给我所有不匹配该过滤器的结果。所以如果我在这里输入一个波浪号，那么它将否定那个过滤器，并给我相反的结果。所以我们可以看到这里得到了简·多，因为所有结果中最后一个名字不是沙弗，或者第一个名字不是约翰。
- en: So this goes back to truth tables that some of us may have studied in。School
    now。 if anyone is unfamiliar with true tables， then let me know and maybe I can
    make a future video on that subject。 but it's more mathematical related than programming
    related。 although the two do overlap very frequently。 Okay so that kind of covers
    the basics of filtering on a small data frame。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这回到了我们可能在学校学习过的真值表。如果有人对真值表不熟悉，请告诉我，也许我可以在未来的视频中讨论这个主题，但这更多是数学相关的，而不是编程相关，尽管这两者确实经常重叠。好的，这基本上涵盖了对小数据框进行过滤的基础知识。
- en: But now let's go back to our larger data set of survey data and look at some
    real worldorl examples of some filters that we might want to take a look at。 So
    I'm going bring up my other notebook here。 and here we have the stack overflow
    survey data that we've been using throughout the series。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在让我们回到更大的调查数据集，看看一些我们可能想要查看的过滤器的现实例子。我将打开我的另一个笔记本，这里是我们在整个系列中使用的Stack Overflow调查数据。
- en: and again， if you'd like to follow along， then you can find a link to this code
    and the data in the description section below。 Okay so now that we've learned
    about some basic filtering。 let's see if we can run some filters on our survey
    data here。 So for example。 let's say that we wanted to look at the data for people
    who are making a salary over a certain amount。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，如果你想跟着做，你可以在下面的描述部分找到这段代码和数据的链接。好的，现在我们了解了一些基本的过滤方法。让我们看看能否对我们的调查数据运行一些过滤器。例如，假设我们想查看那些薪水超过某一金额的人的数据。
- en: Now maybe want want to take a look at what languages are earning the higher
    salaries or something like that。So in order to do that， I'm going to first create
    a filter。 Now。 if you don't know which column and the data frame gives the salary。
    then you can always find that using the schema data frame that we've seen throughout
    the series that tells us what each of these columns here means。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们想看看哪些语言的薪水更高，或者其他类似的事情。因此，为了做到这一点，我将首先创建一个过滤器。如果你不知道数据框中的哪一列给出了薪水，那么你总是可以通过我们在整个系列中看到的模式数据框找到，它告诉我们这些列的含义。
- en: but for the sake of time here， I'll just tell you that the column for salary
    if I go over here。 I think I can find it here pretty quick it is this converted
    comp right here。 So if we scroll down through some of these survey results we
    can see that this person says that they make about 9000 this person makes 61000
    and these are converted to USD and real quick。 let me reload this page here just
    to make sure that I have run all of these cells and that I'm that all of these
    variables here have been initialized。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但是为了节省时间，我只告诉你这个关于薪水的列在这里。如果我在这里找，我想我可以很快找到它，它就是这个转换后的薪资。所以如果我们滚动查看这些调查结果，我们可以看到这个人说他们的收入大约是9000，另一个人赚61000，这些都是转换为美元的。让我刷新一下这个页面，以确保我运行了所有这些单元，并且这些变量都已初始化。
- en: okay so if we wanted to get a filter with all of the high salaries then let
    me come over here and again I。copypy this column name here。 and now let's make
    a filter。 and I'll call this filter high salary。 and I'll set this equal to a
    conditional here where we're saying that we want the Df of this converted comp
    column of our data frame。 we want that to be over let's say a high salary is over
    7000。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，如果我们想要获取所有高薪的过滤器，那么让我过来这里，再次复制这个列名。现在让我们创建一个过滤器，我称之为高薪，并将其设置为条件，其中我们说我们想要数据框中这个转换薪资列的`Df`，希望它超过7000。
- en: you know this is kind of subjective but we'll do that as a filter here。 And
    now let's apply that filter to our data frame。 So just like we saw before。 I can
    say Df do Lo and I can pass in that high salary filter there。 And now we can see
    that we get some results here。 and this isn't all of our respondents。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道这有点主观，但我们将把它作为过滤器。现在让我们将该过滤器应用到我们的数据框中。就像之前看到的那样。我可以说`Df do Lo`，然后将高薪过滤器传入。现在我们可以看到一些结果，但这并不是我们所有的受访者。
- en: we can see that now it's respondent 6 and 9 and 13。 So if I scroll over to our
    to our converted comp。 then all of these salaries here should be over 70000。 and
    it looks like they are。Now， in order to narrow these columns down a bit。 let's
    just grab a certain number of columns。 So I'll grab the country。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到受访者6、9和13。如果我滚动到我们的转换薪资，那么这些薪水都应该超过70000，看起来确实如此。现在，为了稍微缩小这些列，让我们只抓取一定数量的列。所以我将抓取国家。
- en: the programming languages and the salary。 So to do this， remember。 we can just
    pass these into dot Lo。 So up here where we are doing dot Lo。 I'll put in a comma
    here。 And now I'll put in a list for the columns that we want。 And let's say that
    we want to get the country， we also want to get the programming languages that
    they that the these people have worked with。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言和薪水。因此，为了做到这一点，请记住。我们可以将这些传入`dot Lo`。在这里，我们正在进行`dot Lo`。我在这里放一个逗号。现在我将列出我们想要的列。假设我们想获取国家，我们还想获取这些人所使用的编程语言。
- en: And this here， and like I said， you can look all of these up in the schema。
    But this is under languages worked with。 we can see that this person knows Java
    R Sql and so on。 So I'll paste that in as one of the columns that we want。 And
    also I will get the converted comp。 So I will paste that in as well。 And now let's
    run that。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，正如我所说，你可以在架构中查找所有这些。但这是在“使用的语言”下。我们可以看到这个人会Java、R、SQL等等。因此我将其粘贴为我们想要的列之一。我还会获取转换薪资，所以我也将其粘贴。现在让我们运行这个。
- en: Now we can see that we get not only the people who meet this。High salary standard
    filter that we set， but also we're getting we're only getting the country。 the
    languages that they know and their salary。 So our filter does seem like it is
    being applied correctly and that this is working nice so now that I'm actually
    seeing the countries here that reminds me that we might want to do some filtering
    with multiple values。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们不仅得到了符合这个高薪标准的人员过滤器，而且我们只获得国家、他们知道的语言和他们的薪水。所以我们的过滤器似乎确实被正确应用，这样运行得很好。现在我看到这些国家，这让我想起我们可能想用多个值进行一些过滤。
- en: So for example， you know my YouTube audience comes mainly from the United States，
    India。 the United Kingdom Germany and Canada。 well， that's where the largest percentages
    of the audience of people who are watching the videos come from。 So let's say
    that I wanted to filter out the survey results here so that I only see the results
    from those five countries that I mentioned now I could create a super long filter
    up here where I say。 you know if the country is equal to the United States or
    if the country is equal to India or if the country is equal to the United Kingdom。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我的YouTube观众主要来自美国、印度、英国、德国和加拿大。好吧，这就是观看视频的观众中最大比例的来源。所以假设我想过滤出这里的调查结果，只查看这五个国家的结果，现在我可以在这里创建一个超级长的过滤器，我说。如果国家等于美国，或者如果国家等于印度，或者如果国家等于英国。
- en: That would take up a lot of space。 Instead， let's just create a list of those
    countries。 And then I'll show you a neat trick that we can do to filter those
    out。 So now up here。 instead of using this high salary filter here， I'm just going
    to call make a list of countries here。 And I'll set this equal to。 I'm kind of
    a slow typer here。 So let me type these out really quick。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这会占用很多空间。因此，让我们创建一个国家的列表。然后我将向你展示一个我们可以用来过滤这些的好技巧。那么现在，在这里，而不是使用这个高薪过滤器，我将创建一个国家的列表。我会把这个等于……我打字有点慢，所以让我快速打出来。
- en: Okay， so now if we want all of these survey results where the respondents said
    that they were from one of these five countries。 then I can simply say， I'll set
    a new filter here。 Actually， let me do that up here。 I'll set a new filter， and
    I'll set this equal to D F。Of country。 So where the country dot is in。And we want
    the country to be in this list of countries here。 So I'm going to run that cell。
    and now。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在如果我们想要所有这些调查结果，其中受访者表示他们来自这五个国家之一，那么我可以简单地说，我将在这里设置一个新的过滤器。实际上，让我在这里做这个。我会设置一个新的过滤器，并将其等于
    DF 的国家。所以国家在……我们想要国家在这个国家列表中。所以我要运行这个单元格，现在。
- en: Let's apply that filter。To our data frame。 So if I run this。 and just to narrow
    down these results to make sure to where we can see the country right off the
    bat。 I'm just going to only grab the country there。 So if I run this， then we
    can see okay。 we get United Kingdom， United States， Canada， India。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个过滤器应用到我们的数据框中。因此，如果我运行这个，并且只是为了缩小这些结果，以确保我们能立刻看到国家。我将只抓取国家。所以如果我运行这个，我们可以看到好的，我们得到了英国、美国、加拿大和印度。
- en: So it looks like that applied correctly as well。 Now。 let me show you one more
    common filter operation that you'll probably use a lot。 So we can actually use
    string methods within pandas as well to do some alterations to our data frame。
    or in this case to help with a conditional。 So let me show you what I mean。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这也应用得很正确。现在，让我给你展示一个你可能会经常使用的常见过滤操作。因此，我们实际上也可以在 pandas 中使用字符串方法来对数据框进行一些修改，或者在这种情况下帮助处理条件。让我告诉你我想表达的意思。
- en: So let's say that we only want to look at people who answered that they knew
    Python as a programming language。 So let's see how we do this。 So first of all，
    the column that list。 the programming languages that each person said that they
    know is that language worked with column。 So let's see what this looks like。 So
    in this here。 I'm just going to grab。That language。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想查看那些回答自己知道 Python 作为编程语言的人。那么我们看看该怎么做。首先，列出每个人说他们知道的编程语言的是“所用语言”列。让我们看看这看起来如何。这里，我只是抓取“所用语言”。
- en: Worked with column oops， and I spelled language wrong。 So language worked with。
    I that right。 Y。 okay， so we can see that we get some programming languages here
    and each different language is separated by a semicolon。 So we can't just do a
    query where we say， you know if the language worked with equals Python because
    the actual value of that column will be any combination of the languages listed
    on the survey。 So one way that we could do this is to instead use a string method
    and see if Python is within this string of these languages that they know。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所用语言列，哎，我把“语言”拼错了。所以是“所用语言”。我没说错吧？好的，我们可以看到这里有一些编程语言，每种语言之间用分号分隔。因此，我们不能仅仅查询“所用语言”是否等于
    Python，因为该列的实际值将是调查中列出的任何语言组合。因此，我们可以采用的方法是使用字符串方法，看看 Python 是否在他们知道的这些语言字符串中。
- en: So to do this， I'm going to rewrite my filter here。 And I'm just going to say
    that my filter is going to be equal to。 and we want to grab the language is worked
    with for each person。 and then we're going to use some string method。 So I'm going
    to say dot STR dot contained。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我将重新编写我的过滤器。我只是想说我的过滤器将等于，并且我们要抓取每个人的“所用语言”，然后我们将使用一些字符串方法。所以我将说 dot
    STR dot contained。
- en: And then I will pass in Python Now also we can see that we have some inN values
    here。 but not a number。 Now we need to also set a fill value for those or else
    we're gonna to probably get an error so that is part of the contains method here。
    I can just say in is equal to false we're just not going to do anything with those。
    So let me explain this one more time here。 So this filter that we're putting in
    place here。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将传入 Python。现在我们还可以看到这里有一些 inN 值，但不是数字。现在我们还需要为那些设置一个填充值，否则我们可能会得到一个错误，所以这是
    contains 方法的一部分。我可以说 in 等于 false，我们不会对那些做任何操作。所以让我再解释一次。我们这里放置的这个过滤器。
- en: it's saying， okay， for this column here， the language is worked with。 which
    are all of these results here。 we are saying the string in that column does it
    contain Python So that's my filter。 I'm going to run that cell and now let's apply
    that filter to our data frame by saying dot Lo and I will pass in that filter
    and now let's also just grab the languages worked with column to make sure that
    that。Worked correctly。 So if I run that， then all of these results here or all
    of these rows that it gave us back should have Python in their languages known。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它说，好的，对于这一列，这里的语言是处理过的。这些结果都是在这里。我们在说这一列中的字符串是否包含 Python。所以这就是我的过滤器。我将运行那个单元，现在让我们通过调用
    dot Lo 并传入这个过滤器来应用到我们的数据框中，现在让我们还抓取一下处理过的语言列，以确保这一点。正常工作。因此，如果我运行它，那么所有这些结果或者说这些行都应该在它们的已知语言中包含
    Python。
- en: so we can see that we have Python there there there So yes。 it does seem to
    be in all of these results。 Now this one here number8 we can't actually see it
    here but we have these ellipses here So it's probably just being truncated here。
    Now in my last video I kept saying that these were being concatenated。 I meant
    truncated。 a few people pointed that out in the comments。 So yeah。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以看到那里有 Python。所以是的，似乎在所有这些结果中都有。现在这个编号 8 的地方我们实际上看不到，但这里有省略号，所以可能只是被截断了。在我上一段视频中，我一直在说这些是被连接的。我是指被截断。一些人指出了这一点。所以是的。
- en: these are being truncated here So we just can't see the python value there but
    they are there。 and I'll probably do a complete video on string methods here in
    the future since there's so much more that we can do with these we can use them
    to replace text to split values and all kinds of different stuff。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里被截断了，所以我们无法看到 Python 的值，但它们确实存在。我可能会在将来做一个关于字符串方法的完整视频，因为我们可以用这些方法做很多其他事情，比如替换文本、拆分值等各种不同的操作。
- en: So it's very these string methods are extremely useful in pandas So that's a
    basic overview of doing some filters with our data frames。Again， the key takeaways
    are that we can do these conditionals here and have them as a filter and again
    let me print out just the filter without applying it to the data frame。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这些字符串方法在 pandas 中非常有用。这是对我们数据框进行一些过滤的基本概述。再次强调，关键点是我们可以在这里进行这些条件筛选，并将它们作为过滤器，另外让我仅仅打印出这个过滤器，而不应用到数据框上。
- en: we can see that the filters return a series of true false values and when we
    apply that to our data frame。Those true false values basically apply a mask to
    our data frames where we get all of the true values back and not the false。 So
    if I look down here， we have respondent 12，4 and 5 as true and 3 was false。 So
    if I look at my data frame here。 We can see that we get  one to 4 and 5 and 3
    is not there because that value was false。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到过滤器返回了一系列的真和假的值，当我们将其应用到数据框时。这些真假的值基本上对我们的数据框应用了一个掩码，我们得到所有的真值，而不是假的值。所以如果我看这里，我们有响应者
    12、4 和 5 是真的，而 3 是假的。所以如果我查看我的数据框，我们可以看到我们得到了 1、2、4 和 5，而 3 不在那，因为那个值是假的。
- en: So that's how filters work。 And again， it's an essential part of pandas。 because
    this is the one of the first things that we do with our data whenever we are loading
    it into pandas。 Okay， so before we end here。 I would like to mention that we do
    have a sponsor for this video。 And that is brilliant dot org。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是过滤器的工作原理。再一次，这是 pandas 的一个重要部分，因为这是我们在加载数据到 pandas 中时首先要做的事情之一。好的，在我们结束之前，我想提一下，我们为这个视频找到了一个赞助商，那就是
    brilliant.org。
- en: '![](img/dd05cb8c181c3adeeebf376747608bf2_1.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd05cb8c181c3adeeebf376747608bf2_1.png)'
- en: Briiant is a problem solving website that helps you understand underlying concepts
    by actively working through guided lessons and brilliant would be an excellent
    way to supplement what you learn here with their handson courses。 They have some
    excellent courses and lessons on data science that do a deep dive on how to think
    about and analyze data correctly。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Brilliant是一个解决问题的网站，通过积极参与指导课程帮助您理解基本概念，Brilliant将是补充您在这里学习的知识的绝佳方式，他们提供动手课程。他们有一些关于数据科学的优秀课程和课程，深入探讨如何正确思考和分析数据。
- en: So if you're watching my panda series because you're getting into the data science
    field。 then I would highly recommend also checking out brilliant and seeing what
    other data science skills you can learn。 They even use Python in their statistics
    course and will quiz you on how to correctly analyze the data within the language。
    Their guided lessons will challenge you， but you also have the ability to get
    hints or even solutions if you need them。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您正在观看我的熊猫系列，因为您正在进入数据科学领域，那么我强烈建议您也查看一下Brilliant，了解您可以学习哪些其他数据科学技能。他们甚至在统计课程中使用Python，并会对您如何正确分析语言中的数据进行测验。他们的指导课程会挑战您，但如果您需要，您也可以获得提示甚至解决方案。
- en: It's really tailored towards understanding the material。 So to support my channel
    and learn more about brilliant。 You can go to brilliant org for Cms to sign up
    for free。 And also the first 200 people to go to that link will get 20% off the
    annual premium subscription。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它真正侧重于理解材料。因此，为了支持我的频道并了解更多关于Brilliant的信息，您可以访问brilliant org，免费注册。此外，前200位访问该链接的人将获得年度高级订阅的20%折扣。
- en: And you can find that link in the description section below。 again， that's brilliant
    org forge。😊。![](img/dd05cb8c181c3adeeebf376747608bf2_3.png)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下面的描述部分找到该链接。再次说明，这是brilliant org forge。😊。![](img/dd05cb8c181c3adeeebf376747608bf2_3.png)
- en: '![](img/dd05cb8c181c3adeeebf376747608bf2_4.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd05cb8c181c3adeeebf376747608bf2_4.png)'
- en: '![](img/dd05cb8c181c3adeeebf376747608bf2_5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd05cb8c181c3adeeebf376747608bf2_5.png)'
- en: '![](img/dd05cb8c181c3adeeebf376747608bf2_6.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd05cb8c181c3adeeebf376747608bf2_6.png)'
- en: '![](img/dd05cb8c181c3adeeebf376747608bf2_7.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd05cb8c181c3adeeebf376747608bf2_7.png)'
- en: MS okay， so I think that's going to do it for this pandas video。 I hope you
    feel like you got a good idea for how to filter the data within our data frames
    to find the information that you're looking for。 Like I said， this is a fundamental
    skill and pandas which is usually one of the first things that we do with our
    data in the next video will be learning how to alter the data in our data frames
    and make changes。 So we'll learn how to make changes to specific values。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我想这就是本期熊猫视频的内容。希望您能清楚地了解如何在数据框中过滤数据，以找到您所寻找的信息。正如我所说，这是熊猫中的一项基本技能，通常是我们处理数据时首先要做的事情。在下一个视频中，我们将学习如何更改数据框中的数据并进行修改。我们将学习如何更改特定值。
- en: and also how to make multiple changes at once across the entire data frame。
    So for example。 maybe you want to make it so that email addresses are all cast
    to lowercase。 so that they're easier to search。 or maybe you want to take out
    any spaces of your column names and replace them with underscores。 So all of that
    will be covered in the next video。 So be sure to stick around for that。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以及如何在整个数据框中一次性进行多项更改。例如，您可能希望将所有电子邮件地址转换为小写，以便更容易搜索。或者您可能想删除列名中的空格，并用下划线替换它们。这些内容将在下一个视频中介绍，请务必关注。
- en: But if anyone has any questions about what be covered in this video。 then feel
    free to ask in the comment section below and I'll do my best to answer those。
    And if you enjoy these tutorials and would like to support them then there are
    several ways you can do that。 The easiest ways to。😊，Like the video and give it
    a thumbs up。 And also。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果有人对本视频中涉及的内容有任何疑问，请随时在下面的评论区提问，我会尽力回答。如果您喜欢这些教程并想支持它们，那么您可以通过几种方式做到这一点。最简单的方法是😊，给视频点赞并点个赞。还有。
- en: it's a huge help to share these videos with anyone who you think would find
    them useful。 And if you have the meansme， you can contribute through Patreon。
    And there's a link to that page in the description section below。 Be sure to subscribe
    for future videos。 And thank you all for watching。😊。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与您认为会觉得这些视频有用的任何人分享这些视频是非常有帮助的。如果您有能力，您可以通过Patreon支持我。该页面的链接在下面的描述部分。请确保订阅以获取未来的视频。感谢大家的观看。😊。
- en: '![](img/dd05cb8c181c3adeeebf376747608bf2_9.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd05cb8c181c3adeeebf376747608bf2_9.png)'
