- en: 【双语字幕+资料下载】用 Pandas 进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P5：5）更新 - 修改Dataframe内的行列数据
    - ShowMeAI - BV1M64y187bz
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】用Pandas进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P5：5）更新 - 修改Dataframe内的行列数据
    - ShowMeAI - BV1M64y187bz
- en: Hey there。 How's it going， everybody。 In this video。 we're gonna be learning
    how to alter existing rows and columns in our data frames。 So in the last video，
    we learned how to filter out specific information。 and we can use those techniques
    here to also modify our data。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，大家好。你们好吗？在这个视频中，我们将学习如何更改数据框中的现有行和列。在上一个视频中，我们学习了如何筛选特定信息，我们可以在这里使用那些技术来修改我们的数据。
- en: So we'll learn how to update the data for our rows and our columns。 And then
    in the next video。 we'll also learn how to add and remove rows and columns from
    our data frames。 Now。 I'd like to mention that we do have a sponsor for this series
    of videos。 And that is brilliant org。 So I really want to thank brilliant for
    sponsoring this series。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将学习如何更新行和列的数据。接下来在下一个视频中，我们还将学习如何从数据框中添加和删除行和列。现在，我想提到的是，我们确实有这个系列视频的赞助商，那就是**Brilliant
    Org**。因此，我非常感谢**Brilliant**赞助这个系列。
- en: And it would be great if you all can check them out using the link in the description
    section below and support the sponsors。 And I'll talk more about their services
    in just a bit。 So with that said。 let's go ahead and get started。 Okay， so let's
    look at how to update data within our rows and columns。 The last couple of videos。
    we've already seen how we can filter specific data。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果大家能通过下面描述部分的链接查看他们并支持赞助商，那就太好了。我会稍后详细讲述他们的服务。所以说完这些，让我们开始吧。好吧，让我们看看如何更新我们行和列中的数据。在最近的几个视频中，我们已经看到如何筛选特定数据。
- en: But now let's take a look at those same concepts and use them to make changes
    to our data。 So let's look at updating columns first。 and then we'll update some
    rows。 So I currently have my snippets file open here。😊，That we've seen in previous
    videos so that we can see what this looks like on a smaller data set before seeing
    how to do this on our larger data with that stack overflow survey data。 Now， before
    we modify the columns， let's take a look at these first using the columns attribute
    that we've seen in previous videos。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在让我们看看这些相同的概念，并用它们来对我们的数据进行更改。所以我们先看看更新列，然后再更新一些行。我目前在这里打开了我的片段文件😊，这是我们在之前的视频中看到的，以便在查看如何在更大的数据集（即堆栈溢出调查数据）上执行此操作之前，了解它在较小数据集上的表现。现在，在修改列之前，让我们先看看这些列，使用我们在之前的视频中看到的列属性。
- en: So let me add a new cell here down at the bottom。 we can look at the columns
    just by saying Df do columns and we can see that we just have three columns here。
    So our column names are first last and email。 So let's say that we wanted to update
    the columns to be a little more specific。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我在底部添加一个新单元。我们可以通过说`Df.columns`来查看列，我们可以看到这里只有三列。所以我们的列名是“first”，“last”和“email”。所以假设我们想要将列更新得更具体一些。
- en: So let's say that I wanted this to be first name instead of first。 So there's
    a couple of ways that we can do this。 So first， if we want to rename all of the
    columns。 then we can simply do an assignment using the columns attribute that
    I just used。 So in order to do this。 I could just use an assignment here。 and
    just pass in a list。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想把这个改为“first name”而不是“first”。所以我们可以用几种方法来实现这一点。首先，如果我们想重命名所有列，我们可以简单地使用我刚才用过的列属性进行赋值。为了做到这一点，我可以在这里使用赋值，并传入一个列表。
- en: So I could just pass in a list of all the different columns that I want these
    to be。 So I'll call this。First name， last name。 and I'll just keep email the same。
    So if I run this。 let's now look at these columns again。 and now we can see that
    those column names have changed。 And if I actually look at the data frame here。
    then they show up changed in the data frame as well。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我可以传入一个我想要的所有不同列的列表。我将其称为“first name”，“last name”，并将“email”保持不变。所以如果我运行这个，现在再看看这些列，现在我们可以看到这些列名已经改变。如果我实际查看这里的数据框，它们在数据框中也显示为已更改。
- en: Now， I almost never use this because this is used for when you're passing in
    different names for all of your columns I usually only need to change the names
    of a few different columns。 Now， one thing that is a lot more common is the need
    to change something specific about each column in our data frame。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我几乎从不使用这个，因为这是在传递不同名称给所有列时使用的，我通常只需要更改少数不同列的名称。现在，更常见的一件事情是需要更改数据框中每列的特定内容。
- en: So， for example， maybe your columns are all uppercase and you want them to be
    lowercase or vice versa or maybe your columns。 your column names have spaces and
    you want to replace the spaces in the column names with an underscore in this
    case。 we can use a list comprehension。 So for example， let's say that I wanted
    to uppercase。 all of the column names here。 So in order to do this。 I could use
    a list comprehension。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，也许你的列都是大写的，你想把它们改成小写，反之亦然，或者也许你的列名中有空格，你想用下划线替换列名中的空格。在这种情况下，我们可以使用列表推导式。比如说，假设我想把所有的列名变成大写。那么为此，我可以使用列表推导式。
- en: And I could just。Say Df columns is equal to。 and now we'll just say like x dot
    upper。4 x in Df dot columns。 So if I print out that data frame after making that
    change。 then we can see that now all of our column names have been translated
    to uppercase。 Now another thing that you might want to do is remove spaces and
    replace them with underscores。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以直接说Df的列等于，然后我们就说像x.upper()，对于Df的列中的每个x。所以如果我在做完这个更改后打印出数据框，那么我们可以看到现在所有的列名都已转换为大写。另一个你可能想做的事情是去掉空格，用下划线替换。
- en: especially if you like using the dot notation to access a column name that doesn't
    work if there are you know。 spaces in the column name because that just not correct
    syntax。 So if you wanted to replace spaces with underscores instead。 then what
    you could do is just do something similar here and say Df columns is equal to
    Df dot columns do SR。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是如果你喜欢使用点表示法来访问列名，那在列名中有空格时就不起作用，因为这不符合语法。所以如果你想用下划线替换空格，可以做类似的操作，直接说Df的列等于Df的列进行替换。
- en: we're using the STR method on this columns series here。 And then we can use
    the replace method from that stream class。 So I can just pass in a space and say
    that we want to replace。Place all those spaces with underscores Now this isn't
    going to make any changes in our specific data frame because all of ours already
    have underscores if I reverse this and I did an underscore and then a space then
    we can see that now we replaced all those underscores with spaces that's probably
    not what you want though I would rather have underscores instead of spaces。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个列序列上使用STR方法。然后我们可以使用来自该序列类的replace方法。所以我可以直接传入一个空格，说明我们想要替换，把所有这些空格替换为下划线。现在这不会对我们的具体数据框做出任何更改，因为我们所有的列名中已经有下划线。如果我反转这一点，使用下划线和空格，那么我们可以看到我们将所有的下划线替换为空格，这可能不是你想要的，我更希望用下划线代替空格。
- en: so if we do it this way then that's how you replace all of those。 but let me
    go ahead and set these columns back to the way that they were before I like lowercase。
    So I'm going to change those back to lowercase there。 and now everything that
    we've seen so far applies to every one of our columns。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们这样做，那就是如何替换所有这些。但让我先把这些列设置回它们之前的样子，我喜欢小写字母。所以我将把它们改回小写。到目前为止我们看到的所有内容都适用于我们的每一列。
- en: but what if we only wanted to change some columns Well in this case we can use
    the rename method and just pass in a dictionary of the columns that we want to
    change So if I want to set the first name and last name back to what they were
    before then I could say Df do rename。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们只想更改某些列呢？在这种情况下，我们可以使用重命名方法，并传入一个我们想要更改的列的字典。所以如果我想把名字和姓氏恢复到之前的样子，我可以说Df进行重命名。
- en: Now we can just pass in the columns and we're going to pass in a dictionary
    of what we want here。 So the key is going to be the old value。 So I'll set first
    name back to first。 So the value is going to be the new value for that column
    name So we're going to map first name to first and then I will map last name here
    to last。 so I just have to put that in as a value there and now if I run this
    now。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以传入列，并传入我们想要的字典。键将是旧值。所以我将把名字恢复为first。值将是该列名的新值。所以我们将名字映射为first，然后将姓氏映射为last。我只需要将其作为值放入，现在如果我运行这个。
- en: then it might look like it worked， but if I look at my data frame。 then those
    changes actually didn't go through。 this is another one of those methods where
    if we actually want that place to or if we want that change to take place then
    we have to say in place is equal to true because it'll just let us kind of see
    what it would look like if it worked。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是成功了，但如果我查看我的数据框，那么这些更改实际上并没有生效。这是另一种方法，如果我们确实想让更改生效，我们必须说in place等于true，因为它只会让我们看到如果成功的话会是什么样子。
- en: but it's not actually going to change it So saying in place equals to true we'll
    make that change go through。 So now if I rerun this again， then we can see that
    those column names are set。To the way that they were。 Okay， so that's a quick
    look at updating our columns。 Now let's take a look at updating the data in our
    rows。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上它不会改变。所以说in place等于true将使该更改生效。因此，现在如果我再次运行这个，那么我们可以看到那些列名被设置回原来的样子。好吧，这就是更新我们列的快速查看。现在让我们看看如何更新我们行中的数据。
- en: and we'll spend the majority of video learning how to update data in our rows
    since there's so much more that we can do here。 So first， let's look at how to
    update a single value。 Now， in the previous video。 we saw how we can look up values
    using lo and i Lo。 and we'll use that as our starting point for setting values
    as well。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在视频的大部分时间里学习如何更新我们行中的数据，因为这里还有更多我们可以做的事情。所以首先，让我们看看如何更新一个单一的值。现在，在之前的视频中，我们看到如何使用lo和i
    Lo查找值，我们也将以此作为设置值的起点。
- en: So let's grab the row for John Doe right here， it's row number2。 let's grab
    that row and change last name to Smith。 So in order to grab that row。 we can simply
    grab that row with the index label2 so we can say Df do lo of2。 if I run that。
    then we can see that we get that row of first name John last name Doe。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们抓取John Doe的这一行，它是行号2。让我们抓取这一行并将姓氏改为Smith。为了抓取这一行，我们可以简单地用索引标签2来抓取，所以我们可以说Df
    do lo of2。如果我运行这个，那么我们可以看到我们得到了这一行，名字是John，姓氏是Doe。
- en: And if you wanted to use a conditional like we saw in the last video to grab
    that row。 then that's definitely possible too。 you can do that as well。 Now， we
    could have。😊，Saaiid， you know。 give me rows where the first name is equal to John
    and the last name is equal to Doe if we wanted to do that as a conditional。 So
    now in order to update this information， there are a couple ways that we can do
    this。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用像我们在上一个视频中看到的条件来抓取那一行，那也是完全可能的。你可以这样做。现在，我们可以说，😊，Saaiid，你知道的。如果我们想作为一个条件，可以给我第一名为John且姓氏为Doe的行。那么现在，为了更新这些信息，我们可以有几种方法来做到这一点。
- en: we can just pass in all of the new values for this row by passing in a list
    So I could just say that this row I want to set this equal to and then pass in
    all the new values So I'll say that I want to keep John the same。 I want his last
    name to be equal to Smith and then let's also change his email as well。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传入一个列表来传入所有的新值。因此，我可以说这一行我想设置为，并传入所有的新值。我会说我想保持John不变，我想让他的姓氏等于Smith，然后我们也来改变一下他的电子邮件。
- en: So John Smith at email co。 So if I run this and then we look at our data frame。
    then we can see that now that last row has a new last name and a new email address。
    Now what if we had a lot of columns but we only wanted to change a couple of values。
    So imagine you know with our survey data we have 85 different column So it'd be
    a pain if we wanted to change a single row and we had to pass in or a single column
    and we had to pass in this huge list。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以John Smith的电子邮件是email co。所以如果我运行这个，然后我们查看我们的数据框，我们可以看到，现在最后一行有了新的姓氏和新的电子邮件地址。那么如果我们有很多列，但只想改变几个值会怎么样？想象一下，我们的调查数据有85个不同的列，所以如果我们想改变一行的单个列，而必须传入这个庞大的列表，那会很麻烦。
- en: Of 85 different values。 know that would really suck to need to pass in that
    entire list just to change those couple of values。 So in this case， we can just
    specify the exact columns using Lo。 And again。 we saw this before when learning
    how to use the lo to filter data。 So if I wanted to just change the last name
    and email。 then first。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有85个不同的值。知道仅仅为了改变那几个值需要传入整个列表真的很糟糕。所以在这种情况下，我们可以仅使用Lo指定确切的列。同样，我们在学习如何使用lo过滤数据时见过这个。所以如果我只想改变姓氏和电子邮件，那么首先。
- en: let's just grab those specific values。 So I can say Df do Lo。 and then I can
    pass in a two for the rows。 and if you remember that we can also pass in a list
    as the second value here for the columns that we want。 So I'll say that I want
    the last and I want the email。 So if I run this。 then we can see that we just
    get the last name and we just get the email。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们抓取那些特定的值。我可以说Df do Lo，然后我可以传入2作为行。如果你记得，我们还可以将一个列表作为我们想要的列的第二个值传入。所以我会说，我想要姓氏和电子邮件。所以如果我运行这个，那么我们可以看到，我们只得到了姓氏和电子邮件。
- en: and now we can change this as well using the same method that we used here above。
    but we don't need to pass in this the values that are staying the same。 So I don't
    need to pass in that John value anymore since we're not changing that。Let's change
    this back to Doe just to make sure that this worked。 So John。Do at email do com。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们也可以用上面使用的相同方法来更改这个。但我们不需要传入那些保持不变的值。所以我不需要再传入那个John的值，因为我们不再更改它。我们就把它改回Doe，以确保这有效。So
    John。Doe在email do com。
- en: So now if I run this， that should have made the assignment。 And now if I look
    at our data frame。 then we can see that those were set back。 So now we have John
    Doe and John Doe at email dot com。 Okay， and finally here， now let's just look
    at how to change a single value。 you might be able to guess how it be done。 But
    what we can do is just pass in a single row in a single column and just change
    that value。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在如果我运行这个，它应该完成赋值。现在如果我查看我们的数据框。我们可以看到那些已经被恢复。所以现在我们有John Doe和John Doe在email
    dot com。好吧，最后，让我们看看如何更改一个单一值。你可能能够猜到这怎么做。但我们可以做的就是传入一行中的一个列，并只更改那个值。
- en: We don't need to pass in a list。 So just to change that one value。 I will copy
    this line here。 But now I don't want a list of these columns。 let's just change
    the last name。 So this won't be a list anymore。 Now I'm just saying that I want
    row to the column of last。 and we'll just set that equal to Smith。 whoops， let
    me put that in the string there。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要传入一个列表。所以只需更改那个值。我会把这一行复制到这里。但现在我不想要这些列的列表。我们就改一下姓氏吧。所以这不再是一个列表了。现在我只是说我想要最后一列的行。我们就把它设置为Smith。哎，我得把那个放进字符串里。
- en: So if I run that。 Then we look at our data frame。 Then we can see that it only
    change that one value。 Now Padas does have another indexer called at。And this
    is specifically meant for changing or looking up a single value。 Now， honestly，
    I just use dot lo for these most of the time。 but the option is there if you want
    it。 I'm assuming it's there for performance reasons。 So if I wanted to change
    this back。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行这个。那么我们查看我们的数据框。我们可以看到它只更改了那一个值。现在Pandas确实有另一个索引器叫at。这是专门用于更改或查找单一值的。老实说，我大多数时间都使用dot
    lo，但如果你需要的话，选项是存在的。我认为这是出于性能考虑。所以如果我想把这个改回来。
- en: since this is just a single value。 then instead of using dot lo， then I could
    also use dot at。 So I'll do this exact same assignment here。 and I'll change this
    back to dough。 but instead of dot lo， I'm going to say dot at。 and let's just
    set that back。 and then if I look at the theta frame， then we can see that that
    worked as well。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这只是一个单一值。那么我可以选择使用dot at，而不是dot lo。所以我在这里做同样的赋值。并且我会把它改回dough。但这次我会说dot at。我们就把它设置回去。如果我查看theta
    frame，那么我们可以看到这也有效。
- en: And I'll be honest here， I'll have to look at the documentation。 I'm not really
    sure why we would use dot at instead of dot lo when we only need to get or set
    a single value。 maybe it' for performance reasons。 but I personally find myself
    using lo and i Lo even for single values。 I actually did look it up in the panda
    as documentation， but all it says there is that it's there。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须诚实地说，我得查看文档。我不太确定为什么我们在只需要获取或设置单一值时会使用dot at，而不是dot lo。也许是出于性能原因。但我个人发现即使对于单一值，我也常常使用lo和i
    Lo。我实际上在Pandas文档中查过，但上面只是说它存在。
- en: That it's similar to dot Lo。 It doesn't provide any actual justification as
    to why we' use it。 But I wanted you know it's available since it's obviously there
    for a reason and hasn't been deprecated yet。 Okay， so now let me show you one
    mistake that is very common。 and that is when people try to change a value without
    using one of these indexers without using dot Lo or dot at。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这和dot Lo很相似。它并没有提供任何实际的理由说明为什么我们会使用它。但我想让你知道它是可用的，因为它显然是有原因的，并且还没有被弃用。好吧，现在让我给你展示一个非常常见的错误。那就是人们试图在不使用这些索引器的情况下更改一个值，而没有使用dot
    Lo或dot at。
- en: So let me show you what this error or this warning would look like。 So let's
    say that we have a large data frame where we want to find this John Doeper and
    change their last name to Smith。 So one way that we could do this is to use a
    filter to grab that specific row。 So I will come down here to the bottom and I'll
    just create a filter here。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你展示一下这个错误或警告会是什么样子。假设我们有一个大的数据框，我们想找到这个John Doeper并将他的姓氏更改为Smith。我们可以使用过滤器来获取那个特定的行。所以我会下来到底部，在这里创建一个过滤器。
- en: and I will say that the email column of the data frame。Equals equals John Doe
    at email dot com。 That is the filter that we're looking for。 So if I apply this
    filter to my data frame。 just passing an in directly to the brackets like this。
    Then we saw in the last video， oops。 and this is filter， not filter since filter
    is a built in Python keyword。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我会说数据框的邮箱列。等于等于 john.doe@email.com。这是我们要找的过滤条件。所以如果我把这个过滤条件应用到我的数据框中。就像这样直接传递到括号里。那么我们在上一个视频中看到，哎呀。这是过滤器，而不是
    filter，因为 filter 是 Python 的内置关键字。
- en: So if I pass in that filter variable there， directly into the brackets。 again。
    we saw this in the last video。 If I run this， then we can see that that works
    for looking up these values。 So that actually returned a data frame there that
    just has a single row。 So we could grab that last name column just by accessing
    that last name from that data frame that was returned。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我把那个过滤变量直接传递到括号中。再次重申。我们在上一个视频中看到过。如果我运行这个，那么我们可以看到这对于查找这些值是有效的。所以实际上返回了一个只有一行的数据框。所以我们可以通过访问返回的数据框中的姓列来获取那个姓。
- en: So if I run this， then that works as well， we can see that we got that do value。
    And finally。 you might think that in order to change this last name to Smith。
    that we could just come up here and say， okay。We got that value。 Now I want to
    set that equal to Smith。 so if I run this。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我运行这个，那么这也有效，我们可以看到我们得到了那个值。最后，你可能会认为为了将这个姓改为史密斯，我们可以直接上来这样说，好的。我们得到了那个值。现在我想把它设置为史密斯。所以如果我运行这个。
- en: then you can see that this big warning pops up here and if we look at this warning。
    it says that we get this setting with copy warning so we got a warning。 but that
    it actually make that change to our data frame So let's look at our data frame
    here。 Okay so we tried to change that last name to Smith I know we've been going
    back and forth between these last names here。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以看到这里弹出了一个大警告，如果我们看看这个警告。它说我们得到了这个带有复制警告的设置，所以我们得到了一个警告。但实际上，它并没有对我们的数据框进行更改。让我们看看我们的数据框。好的，我们尝试把那个姓改成史密斯，我知道我们在这些姓之间反复讨论过。
- en: but it was though。 and then we tried to change it to Smith and that didn not
    work。 so it didn't make that change when we did the assignment this way。 Now the
    reason that it didn't work here is a little complicated。 essentially it's because
    the way that we're doing it here requires multiple operations in the background
    which can determine whether pandas returns a view or a copy of our data frame
    So when our value isn't getting set it's because it's getting set on a temporary
    object that's just getting tossed out immediately after。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但那确实是这样。然后我们试着把它改成史密斯，但那并没有成功。所以当我们以这种方式进行赋值时，它并没有进行更改。现在，这里之所以不成功有点复杂。本质上是因为我们这样做的方式需要在后台进行多个操作，这会决定
    pandas 返回我们的数据框的视图还是副本。所以当我们的值没有被设置时，是因为它被设置在一个临时对象上，而这个对象在之后立即被丢弃。
- en: Pands does a lot better job of explaining this specific warning and they have
    a little link here down to the documentation directly within the warning itself。
    so if you want to learn more about this， then you can just click on that warning
    or go to this link and it explains it in a lot more detail。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 在解释这个特定警告方面做得更好，他们在警告本身中有一个小链接，直接指向文档。所以如果你想了解更多关于这个的内容，你可以点击那个警告或访问这个链接，它会详细解释。
- en: But the moral of the story here is that when you're setting values just use
    dot Lo or the dot at indexers that we've already seen and you shouldn't have any
    problems。 So we could rerun this same operation up here at the top and actually
    let me just copy this so that if anybody I will put this notebook out here on
    after I'm done with this and if people want to see this exact error then I will
    leave that cell there So we could rerun this exact same operation but instead
    of using these brackets directly here I can just say Df dot Lo。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个故事的核心是，当你设置值时，只需使用 dot loc 或我们已经看到的 dot indexers，你就不会遇到任何问题。因此我们可以在顶部重新运行相同的操作，实际上让我复制一下，这样如果有人想在我完成后查看这个笔记本，我会把它放在那里，如果人们想看到这个确切的错误，那么我会把那个单元留下来。所以我们可以重新运行这个确切的操作，但不直接使用这些括号，我可以说
    df.loc。
- en: And then I want to apply those filters to my rows and then I want to grab。The
    last name column as well。 So if I run it this way instead， and then we look at
    our data frame。Then we can see that that change did go through。 So we were able
    to apply that filter and then set that last name equal to Smith in that data frame。
    So if you ever get these warnings like this that just pop up。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我想将这些过滤器应用到我的行上，并且我还想抓取。姓氏列。所以如果我这样运行，然后查看我们的数据框。我们可以看到那个更改确实生效了。所以我们能够应用那个过滤器，然后在数据框中将姓氏设置为
    Smith。如果你遇到这样的警告。
- en: then definitely don't ignore them because you know， in this case。 it didn't
    even actually set the value that we thought that we were setting。 So you really
    need to be careful of stuff like that。 Okay。 so that's how we would update a single
    row of data。 So how would we update multiple rows of data。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一定不要忽视它们，因为你知道，在这种情况下。它甚至没有设置我们认为我们要设置的值。所以你真的需要对这种情况小心。好的。这就是我们如何更新单行数据。那么我们如何更新多行数据呢？
- en: Well， there's a couple of different ways that we could do this。 So for our for
    our first example。 let's just assume that we want to change all of the email addresses
    so that they are lowercase。 So this might be something that you want to do to
    make the email addresses easier to search。 So to do this we could just assign
    that column to the lowercase value of itself。 So first。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们有几种不同的方法可以做到这一点。因此，对于我们的第一个示例。我们假设我们想要更改所有的电子邮件地址，使它们都是小写的。这可能是你想要做的事情，以便使电子邮件地址更容易搜索。因此，为此，我们可以直接将那一列分配为它自己的小写值。所以首先。
- en: let me grab those lowercase values and to do this， we could just say D F。 And
    then we could access。😊，That email column。 And then that's going to return a series。
    And then we can just use this dot STr class on the series and use the lower method
    on that string class。 So if I run this。 then we can see what this returns is a
    lowercase version of all these emails。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我抓取那些小写值，做到这一点，我们可以直接说 D F。然后我们可以访问。😊，那个电子邮件列。接着这将返回一个序列。然后我们可以在这个序列上使用这个 dot
    STr 类，并在那个字符串类上使用 lower 方法。所以如果我运行这个，那么我们可以看到返回的是所有这些电子邮件的小写版本。
- en: if I look up here in the original data frame。 then these have mixed casing in
    there。 And now these are all lowercase。 Now， this just returns the lowercase values
    of these emails。 it didn't actually make that change。 Now， in order to make that
    change。 we can simply assign that column to this value。 So what I could do here
    is I could just say Df email is equal to Df email dot string dot lowercase。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我查看原始数据框中的内容。那么这些内容有混合的大小写。而现在这些都是小写的。现在，这只是返回这些电子邮件的小写值。它并没有实际进行更改。现在，为了进行更改。我们可以简单地将那一列分配为这个值。因此，我可以在这里说
    Df email 等于 Df email dot string dot lowercase。
- en: So if I run this， and then we look at our data frame。 Now those changes actually
    did go through and all of our emails are now lowercase。 So that's one way that
    we can change multiple rows at once。 maybe。We want to do something a little more
    advanced。 So there are several ways that we can do this and we'll go over all
    four popular methods in order to do this。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行这个，然后查看我们的数据框。现在那些更改确实生效了，我们的所有电子邮件现在都是小写的。这是我们一次性更改多行的一个方法。也许。我们想做一些更高级的事情。因此，我们可以通过几种方法来做到这一点，我们将逐一讨论所有四种流行的方法。
- en: and a lot of people get these four methods confused So let's go over each one
    individually and try to explain them in detail。 and there's definitely a good
    reason why people get these confused because they're very similar in what they
    do。 So the four methods that I'm going to be talking about are apply and map and
    apply map and replaces let me spell that correctly replace。 So first， let's take
    a look at apply。 So apply is used for calling a function on our values and apply
    can work on either a data frame or a series object and the behavior might be a
    little different than you expect for each of those different objects。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人对这四种方法感到困惑，所以我们逐一讨论每一种，并试着详细解释它们。人们会感到困惑确实是有原因的，因为它们在功能上非常相似。我将要讨论的四种方法是
    apply、map、apply map 和 replace，让我正确拼写一下 replace。所以首先，让我们看一下 apply。apply 用于对我们的值调用一个函数，它可以在数据框或系列对象上工作，对于这两种不同的对象，其行为可能会与你预期的有所不同。
- en: So first， let's look at how apply works for a series。 So when we use this on
    a series it can apply a function。To every value in our series。 So。 for example，
    let's say that I want to see the length of all of our email addresses。 Maybe we
    have a website， and we want to make sure that none of the email addresses are
    too long or something like that。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以首先，让我们看看 apply 是如何在一个系列中工作的。所以当我们在一个系列上使用它时，它可以将一个函数应用于我们系列中的每个值。例如，假设我想查看我们所有电子邮件地址的长度。也许我们有一个网站，我们想确保没有电子邮件地址过长或类似的东西。
- en: So I can apply the LN the length function to each value in our series by doing
    something like this。 I can say Df and access that email column and then I can
    say dot apply L。 So we'll apply that  L function。 And when I run that。 what we
    can see what it's doing here。 is it's saying， okay， the L of the first row email
    addresses was 23。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我可以通过做一些类似的事情，将 LN 长度函数应用到我们系列中的每个值。我可以说 Df 并访问那个电子邮件列，然后我可以说点 apply L。所以我们将应用这个
    L 函数。当我运行它时，我们可以看到它在这里做的事情是，它在说，好的，第一行电子邮件地址的 L 值是 23。
- en: So I've never actually counted up the characters in my email address， but it's
    telling me it's 23。 And then this one says it's 17。 and then it says this one
    is 17。 So that's a quick little way that we can use apply to grab some information
    about our data。 So we can also use this to update values as well。 So in this example。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我从未实际计算过我的电子邮件地址中的字符数，但它告诉我是 23。然后这个说是 17。然后它说这个也是 17。所以这是一个快速的方法，我们可以使用 apply
    获取一些关于我们数据的信息。我们也可以用它来更新值。因此在这个例子中。
- en: I'm just going to create a simple function that returns。The uppercase version
    of our email。 but the function can be as complicated as you want it to be。 So
    let me write a simple function here that does what I want it to do。 So I'm going
    to say let's say I'll call this function update email and this will take in an
    email value here and then I'll just return that email in uppercase。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是想创建一个简单的函数来返回我们的电子邮件的大写版本，但这个函数可以复杂得多。所以让我在这里写一个简单的函数，做我想要做的事情。所以我会说，我们就叫这个函数更新电子邮件，它将接受一个电子邮件值，然后我只会返回那个电子邮件的大写版本。
- en: So email dot upper so let me run this。 Now again， this is a super basic example
    here if I really wanted to uppercase the email addresses。 then I would just do
    the same thing that we did before when we made them lowercase but I just am using
    this as an example here。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以电子邮件 dot upper，让我运行这个。现在再次，这只是一个超级基础的例子，如果我真的想将电子邮件地址转换为大写，那么我只需做我们之前将其转换为小写时所做的相同事情，但我只是把这作为一个例子。
- en: So when we apply functions， it's usually to do some more advanced updates than
    what we're doing here but let's apply this function to our email column so to
    do this we could say Df and access that email column dot apply and then we can
    pass in that update email。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我们应用函数时，通常是为了进行一些比我们在这里所做的更高级的更新，但让我们将这个函数应用到我们的电子邮件列。为了做到这一点，我们可以说 Df 并访问那个电子邮件列
    dot apply，然后我们可以传入那个更新电子邮件的函数。
- en: Function that we just wrote Now we don't want to execute this function。 So you
    don't want to put parentheses here。 You just want to pass in the function without
    parentheses so that we're passing in the function itself and not an executed version
    of itself。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚写的函数现在我们不想执行这个函数。所以你不想在这里放括号。你只想传入函数而不带括号，这样我们传入的是函数本身，而不是其执行版本。
- en: so let me run this cell and we can see that now we're getting back a series
    here of our email addresses in uppercase。 Now if this doesn't actually change
    our values or change our rows like we saw before。 So to do this。 we can just assign
    that to our column。 So I can just take what we wrote here And then I can just
    set that series equal to that series with that applied function。 So if I run that，
    and then we look at our data frame。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我运行这个单元，我们可以看到现在我们得到了一个电子邮件地址大写的系列。现在如果这实际上并没有改变我们的值或像之前那样改变我们的行。那么为了做到这一点，我们可以将其分配给我们的列。所以我可以把我们在这里写的内容，然后我可以将那个系列设置为应用了那个函数的系列。所以如果我运行它，然后我们查看我们的数据框。
- en: then we can see that now our email addresses are all uppercase。 Now again。 this
    was a pretty simple function here。 All we did was return this email dot upper。
    Now for simple for simple functions like this。 you might see people use lambda
    function。As wellNow。 if you're not familiar with Lambda functions， basically。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到，现在我们的电子邮件地址都是大写的。现在再次，这只是一个相当简单的函数。我们所做的就是返回这个电子邮件 dot upper。现在，对于像这样的简单函数，你可能会看到人们使用
    lambda 函数。如果你对 Lambda 函数不熟悉，基本上。
- en: they are anonymous functions with a specific name or without a specific name
    that we can use for things like this。 So here's what it would look like in this
    example。 So let's say that I wanted to convert these back to lowercase。 So what
    I could do is I will just grab this here。Now I'm going to use a pass in a lambmbda
    function here to dot apply instead of passing in that other function that we wrote。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是匿名函数，可以有特定名称或没有特定名称，我们可以用来做这样的事情。那么在这个例子中它会是这样的。所以假设我想把这些转换回小写。所以我可以做的是，我将抓住这个。现在我要在这里传入一个
    lambda 函数进行 dot apply，而不是传入我们写的那个其他函数。
- en: So I'll say Lambda。 and if you're not familiar with lambda functions。 then the
    syntax can be a little weird here。 but basically we just have a no name function
    here。 and then what we want to return。 So I want to return X dot lower of that
    argument that we get passed in。 So if I run that， and then look at our data frame
    again。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我会说 Lambda。如果你不熟悉 lambda 函数。那么语法在这里可能会有点奇怪。但基本上我们这里有一个无名函数，然后我们想要返回的内容。所以我想返回
    X dot lower 的那个传入的参数。如果我运行它，然后再查看我们的数据框。
- en: then now we can see that we have the lowercase version of our email。 So if you're
    more comfortable writing regular functions， then you can do it this way。 But if
    you are comfortable writing lambda functions and your function isn't too complicated。
    then you can always do it this way like we did here。 now we're working with strings
    here。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后现在我们可以看到我们的电子邮件的小写版本。所以如果你更喜欢写常规函数，那么你可以这样做。但如果你习惯写 lambda 函数，而你的函数不太复杂。那么你总是可以像我们在这里做的那样来做。现在我们正在处理字符串。
- en: but you can also use this with numbers where we can run any type of calculations
    that we want as well。 Okay， so this is how apply works on series objects。 So now
    let's look at how apply works with data。sSo far， we've only been using this with
    a series。 So anytime we access a column like this。 that returns a series。 And
    again， when we ran apply on the series。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你也可以将其用于数字，我们可以运行任何我们想要的计算。好的，这就是 apply 在系列对象上的工作方式。所以现在让我们看看 apply 在数据上的工作。到目前为止，我们只使用这个与系列。每当我们像这样访问一列时。它返回一个系列。再次，当我们在系列上运行
    apply 时。
- en: it ran a function on all of the values in that series。 Now， when we run apply
    on a data frame。 it runs a function on each row or column of that data frame。
    So let's see what this looks like and it should make more sense。 So let me grab
    the example above where we ran the L function right here。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它对该系列中的所有值运行了一个函数。现在，当我们在数据框上运行 apply 时。它对该数据框的每一行或列运行一个函数。让我们看看这是什么样子的，它应该更有意义。所以让我抓住上面我们运行
    L 函数的例子。
- en: And let me copy this and paste this down here。 and then we'll take a look at
    what this looks like on a data frame。 So again， what this gave us was the length
    of each value in that email series。 So you might think that you can run this same
    apply method on the entire data frame and it'll give us the length of each value
    in the data frame。 but that's not what it does。 So let's see what that gives us。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我复制这个并粘贴到这里。然后我们将看看在数据框中这是什么样子的。所以再次，这给我们的每个值在那个电子邮件系列中的长度。所以你可能会认为你可以对整个数据框运行这个相同的
    apply 方法，它会给我们数据框中每个值的长度。但实际上并不是这样。所以让我们看看这会给我们什么。
- en: So instead of accessing a specific column。 let's just say Df dot apply。 and
    pass in that L function。 So if I run this， then we get this response that you
    might not expect。 So what's going on here is that it's not applying the length
    function to every value in the data frame。 It's actually applying the length function
    to each series in the data frame。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以， instead of 访问特定的列。我们就说 Df dot apply。并传入那个 L 函数。如果我运行这个，那么我们会得到一个你可能意想不到的响应。所以这里发生的事情是，它并没有将长度函数应用于数据框中的每个值。它实际上是将长度函数应用于数据框中的每个系列。
- en: specifically the columns。 So basically what this is telling us is that our first
    name column has a length of three。 So if we look up here at first we can see that
    first has three values。Teling us that last has three values and email has three
    values。 So that's just the number of rows in each column。 And we can get that
    same result for a specific series if we manually check the length of one of these。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是列。所以基本上这告诉我们，名字列的长度是三。所以如果我们在上面查看，我们可以看到名字有三个值。告诉我们姓氏有三个值，电子邮件也有三个值。所以这只是每列中的行数。如果我们手动检查其中一个的长度，我们也可以得到相同的结果。
- en: So if I was to say Ly and access one of these columns。And ran this。 then we
    can see that gives us three。 So that's basically what apply is doing here on the
    data frame。 but it's doing it for every column。 and you can also have this apply
    to rows as well。 if you change the axis。 So we can change the axis here and say
    no。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我说 Ly 并访问这些列之一，然后运行这个。我们可以看到，这给我们带来了三。所以这基本上是 apply 在数据框上所做的事情，但它是针对每一列的。如果你更改轴的话，也可以将其应用于行。因此，我们可以在这里更改轴并说不。
- en: I want to do this on the rows whoops， and I put row I meant to put rows。 So
    if I run this and I made another mistake here。 actually didn't need to put rows
    rows is the default。 I meant to put columns。 So if I put columns， then we can
    see that now we get three as well。 but now what it's doing here is it's counting
    it this way。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在行上做这个，哎，我放错了，应该放行。我运行这个时又犯了一个错误，实际上不需要放行，行是默认的。我本来想放列。所以如果我放列的话，我们现在也可以看到结果是三。但现在它的计算方式是这样的。
- en: So it's saying okay one or row0 has three values， but it's saying， okay。 those
    values are corey Schffer and then the email it's not counting it downward。 So
    basically we want to use functions that will make sense to be used on a series
    object when using a apply on an entire data frame。 So for example， let's say that
    we wanted to grab the minimum value。From each column。 Well。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它说，好的，行 0 有三个值，但它说，好的。这些值是 Cory Schffer，然后是电子邮件，它没有向下计算。所以基本上，我们希望使用在整个数据框上使用
    apply 时，对序列对象有意义的函数。例如，假设我们想从每一列中抓取最小值。那么。
- en: series objects have a min method。 So we could pass that in to apply and see
    the minimum value for each series。 Now， in our sample data frame， we have all
    string values。 So if we grab the minimum value from a series of strings。 then
    it'll just return the one the first one in alphabetical order。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 序列对象有一个最小值方法。所以我们可以将其传入 apply，以查看每个序列的最小值。现在，在我们的示例数据框中，我们有所有字符串值。所以如果我们从字符串序列中抓取最小值，它只会返回按字母顺序排列的第一个。
- en: So let's see what this would look like。 So we can come down here and we can
    say Df dot apply。 and now let me pass in that series min method。 So I could say
    Pd is what we imported panda as Pd dot series do min。 So if I run this。 then we
    can see， okay， it's saying that the one that comes first in the alphabet in the
    first category is Cory。 the one that comes first in the last names is do。 So that
    is， you know。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们来看一下这会是什么样子。我们可以到这里，并说 Df.dot.apply。现在让我传入那个序列最小值方法。所以我可以说 Pd 是我们导入的熊猫，Pd.dot.series.do.min。运行这个后，我们可以看到，好的，它说在第一个类别中按字母顺序排列的第一个是
    Cory，姓氏中排在首位的是 do。所以这就是。
- en: that's a D these two are E's that makes sense。 And then my email comes before
    these other two emails。 Now， it probably would have been better to take a look
    at this using。A series of numerical data instead， because with numerical data。
    this stuff you know obviously makes more sense。 So if we used series do min on
    numerical data。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 D，这两个是 E，这很合理。然后我的电子邮件在这两个电子邮件之前。现在，可能用一系列数字数据来看看会更好，因为对于数字数据，这些东西显然更有意义。所以如果我们在数字数据上使用序列的最小值。
- en: then that would obviously give us the minimum values for each of those numbers
    and we can use lambda functions with this as well。 but you just have to remember
    that the lambmbda will be working on a series object。 So if I come down here I
    can say Df dot apply。 and now let's pass in a lambda。Now， this X here。 this X
    is going to be a series。 It's not going to be a value。 So what methods do a series
    have。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后这显然会给出每个数字的最小值，我们也可以使用 lambda 函数。但你只需记住，lambda 将在序列对象上工作。所以如果我到这里，可以说 Df.dot.apply。现在让我们传入一个
    lambda。现在，这里的 X。这个 X 将是一个序列，而不是一个值。那么，序列有哪些方法呢？
- en: Well， a series has a min method。 So let's return the minimum value and run that。
    And we can see that that gives us the same response that this one up here gave
    us。 Now， like I said。 this is kind of a contrived example because we could get
    these same results by using the data frames Min method。 But I just wanted to point
    out how this actually works。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，序列有一个最小值方法。所以让我们返回最小值并运行它。我们可以看到这给出了与上面这个相同的响应。现在，就像我说的，这算是一个人为的例子，因为我们可以通过使用数据框的最小值方法得到相同的结果。但我只是想指出这实际上是怎么工作的。
- en: So this is way more useful when your data frame contains numerical data。 So
    for example。 we could use nupy to apply these square root for all of our series
    objects or any type of numerical analysis like that。 Okay， so running apply on
    a series applies a function to every value in the series。 And running apply to
    a data frame like we did here。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据框包含数值数据时，这更加有用。例如，我们可以使用 nupy 对所有系列对象应用平方根或任何类型的数值分析。好的，在系列上运行 apply 将一个函数应用于系列中的每个值。在数据框上运行
    apply，就像我们在这里做的那样。
- en: applies a function to every series in the data frame。 But you might be wondering
    if。Theres a way that we can apply a function to every individual element in the
    data frame。 And that's what apply map is used for。 and apply map only works on
    data frames。 series objects don't have the apply map method。 So let me show you
    how this is different。 So again。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它对数据框中的每个系列应用一个函数。但你可能会想，是否有办法将函数应用于数据框中的每个单独元素。这就是 apply map 的用途，apply map
    仅适用于数据框，系列对象没有 apply map 方法。让我给你展示一下这有什么不同。
- en: let's use that same built in length function。 and pass that into apply map。
    So I'll say Df dot apply map。 And now let's pass in that built in length function。
    So if I run this。 then we can see that what this does is that it's now applying
    that length function to each individual value in our data frame。 So the first
    name had these many characters。 So first name mine was Cory。 So C O R E Y。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用那个内置的长度函数，并将其传入 apply map。我将说 Df.dot.apply map。现在让我们传入那个内置的长度函数。如果我运行这个，那么我们可以看到这将长度函数应用于我们数据框中的每个单独值。因此，名字有这些字符。我的名字是
    Cory。所以 C O R E Y。
- en: that's five characters。 and then Jane and then John。 So those are four characters。
    And we saw the length of the emails before 231717。 So that's what this is doing
    here。 It's applying that function to every。ual element of our data frame。 So this
    might be how some of you expected the apply method to work on a data frame。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 那是五个字符。然后是 Jane 和 John。那是四个字符。我们之前看过电子邮件的长度是 231717。这就是它在这里的作用。它对数据框中的每个元素应用那个函数。所以这可能是你们一些人预期的
    apply 方法在数据框上的工作方式。
- en: but instead we use apply map for this。 Now I know that this can be a bit confusing
    but hopefully after seeing those differences。 it makes a little bit more sense
    of when we would want to use which So for example since we have an entire data
    frame full of strings in this example if I wanted all of them to be lowercase
    then I could just do something like this I could say Df do apply map and then
    I can just pass in the string do lower method。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们改用 apply map。现在我知道这可能有点令人困惑，但希望在看到这些差异后，何时使用哪个会更有意义。因此，例如，由于我们在这个示例中有一个充满字符串的完整数据框，如果我想让它们都变为小写，那么我可以这样做，我可以说
    Df.do.apply map，然后我只需传入字符串的 do lower 方法。
- en: so if I run this then we can see that now all of the values in that data frame
    are lowercase。 Now if you had numerical data in your data frame then you would
    get an error here since you can't run string methods on numbers so you'd need
    to pass in a more complicated function that handles that appropriately so now
    we've looked at apply and apply map and hopefully those make more sense to you
    now。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我运行这个，那么我们可以看到现在数据框中的所有值都是小写。如果你的数据框中有数值数据，那么你会在这里遇到错误，因为你无法对数字运行字符串方法，所以你需要传入一个处理得当的更复杂的函数。现在我们已经了解了
    apply 和 apply map，希望这些对你更有意义。
- en: Now let's look at the map method。 Now， the map method only works on a series。
    So map is used for substituting each value and a series with another value。 So
    for example。 let's say that we wanted to substitute a couple of our first names。
    So to do this。 I could say Df and access that first name column which is also
    a series and then I can use the map method on this。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看映射方法。映射方法仅适用于系列。因此，映射用于将每个值和系列替换为另一个值。例如，假设我们想替换几个名字。我可以说 Df 并访问那个名字列，它也是一个系列，然后我可以在此上使用映射方法。
- en: And now I'm going to pass in a dictionary of the values that we want to substitute。
    So let's say instead of Cory， I want to pass in Chris， and instead of Jane。 I
    wanted to pass in a value of Mary。 So if I run this。 then we can see that that
    returns a series where those first names were substituted out。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将传入我们想要替换的值的字典。假设我想将 Cory 替换为 Chris，而将 Jane 替换为 Mary。如果我运行这个，那么我们可以看到它返回了一个系列，其中这些名字被替换掉了。
- en: So Cory was the first value here。 Now it's Chris Jane is now Mary。 Now one thing
    that I do want to point out here。 is that the values that we did。Substitute were
    converted to N N values， not a number of values。 Now that may or may not be what
    we want。 And I'll show an example of this when we look at some real world stack
    overflow examples。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所以科里是这里的第一个值。现在是克里斯，简现在是玛丽。现在我想指出的一点是，我们所替换的值被转换为N N值，而不是数字值。现在这可能是我们想要的，也可能不是。我会在查看一些真实的Stack
    Overflow示例时展示这个。
- en: Now in this example， we likely wouldn't want to get rid of these other names。
    So you might be thinking， okay， well， what if I wanted to keep John。 but just
    substitute these other names。 So if that's the case， then instead of using map。
    we can instead use the replace method。 So instead of doing what we did here。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可能不想去掉这些其他名字。所以你可能在想，好吧，如果我想保留约翰，但只是替换这些其他名字怎么办？如果是这样的话，那么我们可以使用替换方法，而不是使用映射。
- en: Ill just copy this paste this in here， instead of using map， I can use replace。
    And if I run this。 then now we can see that it's basically the exact same result
    here。 except now we actually have it didn't replace John with an N A N value。
    And again。 everything that we've done here doesn't actually change the data frame。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把这个复制粘贴到这里，而不是使用映射，我可以使用替换。如果我运行这个，那么我们现在可以看到结果基本上是完全相同的，除了现在我们没有将约翰替换为N A
    N值。再说一遍，我们在这里所做的所有操作并没有实际改变数据框。
- en: if we wanted to set this to the actual column。 then we would have to do some。Thing
    like this。 We could say that that Df first column is equal to that replaced version
    of the data frame。 So if I run this， and then I look at our entire data frame。
    then now we can see that those values were substituted。 Okay。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将其设置为实际的列，那么我们需要做一些这样的事情。我们可以说Df的第一列等于数据框的替换版本。所以如果我运行这个，然后查看我们的整个数据框，那么现在我们可以看到这些值被替换了。好的。
- en: so now that we've looked at a lot of different ways of updating information
    in our rows and columns。 Now let's go over to our larger data set and look at
    some realw worldld examples of how we can apply what we've learned here。 So let
    me go over to my stack overflow survey data here。 So we have our stack overflow
    survey notebook open here。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看了很多更新行和列中信息的不同方法。接下来，让我们转到更大的数据集，看看如何在实际案例中应用我们在这里学到的东西。让我看看我的Stack Overflow调查数据。因此，我们在这里打开了我们的Stack
    Overflow调查笔记本。
- en: that we've been using throughout this series。 And again。 if you'd like to download
    these notebooks or the stack overflow data in order to follow along then the links
    for all this are in the description section below。 Okay， so let's apply some of
    what we learned here to this data。 So in the last video where we covered filtering。
    We looked at filtering salaries over a certain amount。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列中我们一直在使用的。而且，如果你想下载这些笔记本或Stack Overflow数据以便跟随，那么所有这些链接都在下面的描述部分。好的，那么我们来将我们在这里学到的一些内容应用到这些数据上。在上一个视频中，我们讨论了过滤。我们查看了过滤超过某个金额的薪资。
- en: and the column name for salary。 it is over here somewhere。It is this one here。
    Con comp。 Now。 I'm assuming that short for converted compensation。 and that is
    converted to United States dollars。 So let's say that we wanted to rename that
    column to where it was a bit more clear。 So instead。 I'm going to rename this
    column to salary USD instead of converted comp。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 工资的列名在这里某处。这是这个。Con comp。现在，我假设这是“转换补偿”的缩写，并且它是转换为美元的。所以假设我们想把这个列重命名为更清晰的名称。那么，我将把这个列重命名为salary
    USD，而不是converted comp。
- en: So if we remember from earlier in the video。 we can do this with the rename
    method。 So if I come down here， then I can say Df dot rename。 and then we can
    just pass in the columns that we want to rename。 So I'll pass in a dictionary
    here。 but this is only going have one value。 So we want to change converted comp。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还记得视频早些时候的内容，我们可以使用重命名方法。所以如果我下移到这里，我可以说Df.dot rename，然后我们只需传入我们想要重命名的列。所以我会在这里传入一个字典，但这只会有一个值。所以我们想要更改converted
    comp。
- en: and we want to set that to I'll call this salary USD。 So if I run this。 then
    let me go over here and see if this looks good。 Okay， so that looks good。 that
    changed。 Now after you make sure that it made the change that you wanted at the
    May。And that it's not a mistake。 then we can actually apply that to our data frame
    by setting in place is equal to true。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想将其设置为，我称之为`salary USD`。所以如果我运行这个。让我去看看这是否看起来不错。好的，这看起来不错。那已经改变了。现在在你确保它进行了你想要的更改之后，并且这不是一个错误。然后我们可以通过将`in
    place`设置为`true`来实际应用到我们的数据框中。
- en: Now that's why in place equal to true is actually a good idea because sometimes
    you know when you're working in pandas we're always doing these different types
    of renames and filters and things like that and sometimes we're going to do things
    wrong So it's always better to check and make sure that it made the change that
    you meant to make first and then apply that change to your data frame to actually
    make the solidify those changes So now let's see if we have access to that salary
    USD column And if I look at that。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在`in place`等于`true`时实际上是个好主意，因为有时你知道，当你在使用pandas时，我们总是在做不同类型的重命名和过滤，有时我们会做错事。因此，检查并确保你所做的更改是你想要的总是更好，然后再将更改应用到数据框中，以便真正巩固这些更改。现在让我们看看我们是否可以访问`salary
    USD`列。如果我查看它。
- en: then we can see that we do have a salary USD column in this data frame so that
    change did work okay so what is something else that we can do here to see what
    we have already learned okay so here's an example here。We've looked at this hobbyist
    column a few times in this series。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到这个数据框中确实有一个`salary USD`列，所以那个更改是有效的。那么我们还可以做些什么来查看我们已经学到的内容呢？这里有一个例子。在这一系列中我们已经查看过这个hobbyist列几次。
- en: This is a column where people answered on the survey。 whether they code as a
    hobby in their free time。 And let's look at this column real quick。 We can kind
    of see it here。 It has a bunch of yes， yes， no values。 Let me actually print this
    out down here。 So I will access that hobbyist column。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个人们在调查中回答的列，询问他们是否在空闲时间将编码作为爱好。让我们快速看看这一列。我们在这里可以看到一些是、是、否的值。让我实际在这里打印出来。因此，我将访问那个hobbyist列。
- en: And we can see that this is a bunch of yes， no values here。 So let's say that
    we wanted to convert these values and map all of the yes responses to a true Boolean
    value and the no to false。 So how would we do this。 Well， one way that we could
    do this is with the map method that we just learned about。 So what we could do
    is we could say。😊，D F hobbyist dot map。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这里有一堆是和否的值。所以假设我们想要转换这些值，将所有的是响应映射为一个真正的布尔值，而否映射为假。那我们该怎么做呢？一种方法是使用我们刚学到的map方法。我们可以这样说。😊，D
    F hobbyist dot map。
- en: and then pass in a dictionary here of of the substitutions that we want to make。
    So for the yes values， I will convert this to a boolean of true。 And for the no
    values。 I will convert this to a boolean of false。 So if I run this， then if we
    compare。The results that we got up here and the results that we're getting down
    here。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在这里传入一个我们想要进行替换的字典。因此，对于是的值，我将其转换为布尔值`true`。对于否的值，我将其转换为布尔值`false`。所以如果我运行这个，然后如果我们比较一下。我们在这里得到的结果和我们在这里得到的结果。
- en: we can see that all the yeses are mapped to true and all the nos are mapped
    to false。 Now。 I don't believe there' is actually an in place argument for map。
    So what we can do here is we can just set that series。And set that equal to the
    mapped version of that series。 So now。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到所有的“是”都映射为`true`，所有的“否”都映射为`false`。现在，我不认为实际上有一个`in place`参数用于map。因此，我们可以做的是将那个序列设置为映射后的版本。现在。
- en: if I run this and look at our data frame， now we can see that that entire column
    is now true false values instead of yes。 no values。 Now， remember， when we use
    map， then anything that isn't in our dictionary here。 So anything outside of a
    yes or no answer would be converted to an in a in value。 I think there are other
    columns in this survey where there are yes。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行这个并查看我们的数据框，现在我们可以看到整列现在是布尔值，而不是是、否的值。现在，记住，当我们使用map时，任何不在我们字典中的内容。所以任何不属于是或否的回答都会被转换为`NaN`值。我认为在这项调查中还有其他列包含是。
- en: no and not sure answers or something like that。 So if we only wanted to replace
    the yes or no values and leave the others untouched。 then instead， we could use
    the replace method instead， But map works for this example。 because I know that
    this column only has yes and no。 Okay。 so that is a quick review of some of what
    we learned in this video。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 没有和不确定的回答或者类似的东西。所以如果我们只想替换“是”或“否”的值，而保留其他值不变。那么我们可以使用替换方法。不过在这个例子中，使用映射也是可以的，因为我知道这一列只有“是”和“否”。好的，这是对我们在这个视频中所学内容的快速回顾。
- en: I'm not going to go over everything again since this video is already getting
    a little。Long。 but I did want to show you some examples of how updating values
    works when and how this can be applied to real worldl data like this survey so
    before we end here I would like to mention that we do have a sponsor for this
    video and that sponsor is brilliant org。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算再详细讲解一次，因为这个视频已经有点长了。但我确实想给你展示一些如何更新值的例子，以及这些如何应用于像这样的实际数据，比如这个调查。所以在我们结束之前，我想提到我们为这个视频找到了一个赞助商，而这个赞助商就是brilliant.org。
- en: So in this series we've been learning about pandas and how to analyze data in
    Python and brilliant would be an excellent way to supplement what you learn here
    with their handson courses they have some excellent courses and lessons that do
    a deep dive on how to think about and analyze data correctly for data analysis
    fundamentals。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列中，我们一直在学习pandas以及如何在Python中分析数据，而Brilliant将是补充你在这里所学的内容的绝佳方式，他们提供一些出色的动手课程，有一些出色的课程和教训，深入探讨如何正确思考和分析数据的基础知识。
- en: I would really recommend checking out their statistics course which shows you
    how to analyze graphs and determine significance in the data and I would also
    recommend their machine learning course which takes data analysis to a new level
    where you about the techniques being used that allow machines to make decisions
    where there's just too many variables for a human to consider so to support my
    channel and learn more about brilliant you can go to brilliant org cs to sign
    up for。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的推荐查看他们的统计课程，教你如何分析图表并确定数据的显著性。我也推荐他们的机器学习课程，它将数据分析提升到一个新水平，讲述了允许机器做出决策的技术，当变量过多时人类无法考虑。因此，为了支持我的频道并了解更多关于Brilliant的信息，你可以访问brilliant.org/cs进行注册。
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_1.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_1.png)'
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_2.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_2.png)'
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_3.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_3.png)'
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_4.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_4.png)'
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_5.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_5.png)'
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_6.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_6.png)'
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_7.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_7.png)'
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_8.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_8.png)'
- en: And also， the first 200 people that go to that link will get 20% off the annual
    premium subscription。 and you can find that link in the description section below。
    Again， that's brilliant。 org for/ cS。Okay， so I think that's going to do it for
    this pandas video。 I hope you feel like youve got a good idea for how we can update
    the information within our rows and columns。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，前200位访问该链接的人将获得年费高级订阅的20%折扣。你可以在下面的描述部分找到该链接。再次强调，访问brilliant.org/cs。好的，我想这就是本次pandas视频的全部内容。我希望你能对如何更新行和列中的信息有一个好的了解。
- en: We started off a bit simple making changes in specific spots。 and then going
    a little more advanced when we learned about apply map and apply map。 Now。 I know
    that those can be confusing to some people。 But hopefully you feel like you got
    an understanding of how each of those work。 Now， originally。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一开始比较简单，只是在特定位置进行更改，然后在学习apply map和apply时变得更高级。现在，我知道这些对某些人来说可能会有点困惑。但希望你能理解它们的工作原理。现在，最初。
- en: I was also going to show how to add and remove rows and columns in this video。
    But this is getting a bit long。 So I'm just going to save that for our next video。
    So in the next video， we'll learn how to add and remove rows and columns from
    our data frame。 And that should be a much shorter video。 But if anyone has any
    questions about what we covered in this video。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我本来还打算在这个视频中展示如何添加和删除行和列。但这个视频有点长了。所以我会把这个内容留到下一个视频。在下一个视频中，我们将学习如何从数据框中添加和删除行和列。这应该会是一个更短的视频。不过，如果有人对我们在这个视频中讨论的内容有任何问题。
- en: then feel free to ask in the comment section below and I'll do my best to answer
    those。 And if you enjoy these tutorials and would like to support them。 then there
    are several ways you can do that。 the easiest ways to simply like the video and
    give a thumbs up。 And it's always a huge help to share these videos with anyone
    who you think would find them useful。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题，请随时在下方评论区提问，我会尽力回答。并且如果你喜欢这些教程并想要支持它们，最简单的方法就是给视频点赞并表示支持。将这些视频分享给任何你认为会觉得有用的人，也是非常有帮助的。
- en: if。😊，The means you can contribute through Patreon。 and there's a link to that
    page in the description section below。 be sure to subscribe for future videos。
    and thank you all for watching。![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_10.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果😊，你可以通过Patreon进行支持，相关页面的链接在下方的描述部分。请确保订阅以获取未来的视频。感谢大家的观看。![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_10.png)
