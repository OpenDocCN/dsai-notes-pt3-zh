- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P30：30）类介绍 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P30：30）类介绍 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/8f475afeed4834135683e6ace5e6dd24_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f475afeed4834135683e6ace5e6dd24_0.png)'
- en: Welcome back everyone， my name is Brian， we're going to continue our journey
    into Python3。 we've been saying for 30 some odd videos now that we're going to
    talk about classes and well。 today is the day we're going to start talking about
    classes。Before we dive too deep。 we've got some fundamental concepts we need to
    cover。 First and foremost。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，欢迎回来，我是布赖恩，我们将继续探索Python3的旅程。我们已经说了30多集，我们要讨论类，今天终于开始讨论类。在深入之前，我们需要覆盖一些基本概念。首先，最重要的是。
- en: you've heard of OOP or object oriented programming。 This is the cornerstone
    to that。 Basically a class is a blueprint or creating objects。 You'll hear people
    say classes and objects interchangeably and there two different things。 A class
    is a blueprint or a plan。On how an object should be created。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你听说过OOP或面向对象编程。这是其基础。基本上，类是一个蓝图，用于创建对象。你会听到人们交替使用类和对象，但它们是两个不同的概念。类是一个蓝图或计划，用于描述对象应该如何被创建。
- en: The object is when Python or another language actually creates the object or
    the instance of that class。From the blueprint that we're going to make。Classes
    are also a big， big topic。Way bigger than we can cover in the single video。 so
    we're going to split this up into multiple videos。 Let's dive in and take a look。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当Python或其他语言实际创建该类的对象或实例时，就是对象的生成。我们将要创建蓝图。类也是一个非常庞大的主题，远远超出我们在单个视频中能够覆盖的内容。因此，我们将把这个内容分成多个视频。让我们深入了解一下。
- en: '![](img/8f475afeed4834135683e6ace5e6dd24_2.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f475afeed4834135683e6ace5e6dd24_2.png)'
- en: All right， classes can get very， very complex， we're going to create a simple
    class。![](img/8f475afeed4834135683e6ace5e6dd24_4.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，类可以变得非常复杂，我们将创建一个简单的类。![](img/8f475afeed4834135683e6ace5e6dd24_4.png)
- en: So I'm going to just paste comment， create a class。We're going to do this in
    a separate file。 but you can do it in all in one file as you're going to see in
    future videos but I just want to show you kind of the real world approach to how
    people do this So I'm going to make a new file。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将直接粘贴评论，创建一个类。我们将在一个单独的文件中完成这个，但你也可以在一个文件中完成，正如你将在未来的视频中看到的，但我只想展示一下人们在实际工作中是如何做到的，所以我将创建一个新文件。
- en: We're going to call this file cat。 Py because we're going to make our own cat
    class here。I'm going to paste in some notes。The cat class。Self is the first parameter。
    I want to put that right there， because people often forget this。 If you're from
    another language。 it is equal to the this in another language。 And what are we
    talking about here。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个文件命名为`cat.py`，因为我们将在这里创建自己的猫类。我将粘贴一些笔记。猫类中的`self`是第一个参数。我想把它放在这里，因为人们常常忘记这一点。如果你来自其他语言，它相当于其他语言中的`this`。那么我们在这里讨论什么呢？
- en: This is why people get。Class an object Confuse。 The class is a blue print or
    how the object will be created。 Once the object is created， it becomes an instance。
    So I'm going to put that。If we're in an instance， because you can to have multiple
    instances。 as you're going to see in this video， we'll make multiple cats and
    you want to refer to the current instance you need to this or in Python self。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是人们感到困惑的原因。类和对象的概念很混淆。类是一个蓝图，描述对象将如何被创建。一旦对象被创建，它就成为一个实例。所以我将要提到这一点。如果我们处于一个实例中，因为你可以有多个实例。正如你在这个视频中将看到的，我们会创建多个猫对象，你需要引用当前实例，你需要使用`this`或者在Python中使用`self`。
- en: So， people often think that self。And class are the same thing， and they're not。
    They're two different things。Whenever hear class， it's the blueprint。 So let's
    make the blueprint。对。That's it。 It's really that simple。 Now we're going to have
    to add some attributes here。 So I must say name equals。Just blank。And it's go
    ahead and say age equals。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，人们常常认为`self`和类是同一回事，但它们不是。它们是两个不同的概念。每当听到类时，就是蓝图。那么我们来制作蓝图。对。就是这么简单。现在我们需要添加一些属性。所以我将说`name`等于。就留空。而且我们可以说`age`等于。
- en: And everybody kind of has their own way of doing this。 This is simply how I
    do it。 Feel free to adopt your own style or your own company standard。 whatever
    you're working with here。 But this is how I do it。 I want to know the variables。
    And whenever you see a class and you see this indentation， think scope。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都有自己处理这个问题的方式。这只是我的做法。随意采用你自己的风格或你所工作的公司的标准。但这就是我的做法。我想知道变量。而每当你看到一个类并且看到这个缩进时，想想作用域。
- en: So these exist inside of the cat scope。 In each instance of these will have
    independent variables that are not shared。 Although you can show them， we'll talk
    about that in another video。I know you're probably sick of hearing me say， we'll
    talk about that in another video。 but there's a lot to coding。 so can't cover
    it all in one。So now we're going to say de in knit。 Now。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些存在于猫的作用域内。每个实例将有独立的变量，不会共享。虽然你可以展示它们，我们将在另一个视频中讨论。我知道你可能已经厌倦了我说，我们将在另一个视频中讨论，但编码有很多内容，无法一次性覆盖。所以现在我们将说de
    in knit。现在。
- en: remember， the double underscore means it's something baked into Python。This
    is the constructor。And what I mean by constructor is。This is called when we make
    an instance of this class so we can execute code。 think of this like the main
    function for a class here。As soon as Python creates an instance of CA。 we will
    run this function automatically， you can feel free to。Omit this。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，双下划线意味着它是Python内置的东西。这就是构造函数。我的意思是，当我们创建这个类的实例时，就会调用它，以便执行代码。把这看作是类的主函数。当Python创建CA的实例时，我们将自动运行这个函数，你可以随意省略它。
- en: and that's called the default constructor where you just simply don't have one。Or
    you can actually define it yourself。 Now， remember， I said。Self is the first per。
    so we need to say self。It is the first parameter we need to have。 is it reference
    to the current object。Now I'm going to just paste in some notes here。Basically。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为默认构造函数，当你根本没有定义时。或者你可以自己定义它。现在，记住，我说过。Self是第一个参数，所以我们需要说self。它是我们需要的第一个参数，引用当前对象。现在我将粘贴一些笔记。基本上。
- en: just stating the obvious self is required， other parameters are optional。And
    let's go ahead and fill this out because we want to reference the current object
    or to say self dot。Name equals the name parameter。And then from here， it just
    simply becomes a lesson in copy and pace because we want to do the rest of these。So
    we're just simply initializing these variables。It's going to copy and paste these
    out。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见的是，self是必需的，其他参数是可选的。我们继续填写，因为我们想引用当前对象，或者说self.dot。Name等于name参数。从这里开始，这只是复制和粘贴的课程，因为我们想完成其余部分。所以我们只是简单地初始化这些变量。它将复制和粘贴出来。
- en: maybe there we go。So we're saying the self name， this guy is equal to the parameter
    or actually the argument name。Age， age， color， color becomes pretty self explanatory。Now
    I'm going to print out something just so we know it was constructed。And I'm just
    going to say the constructor for self name。And from here， it's actually fairly
    simple。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 也许可以这样。所以我们说self.name，这个变量等于参数，或者实际上是参数name。Age，age，color，color变得相当自明。现在我将打印出一些内容，以便我们知道它被构造了。我将说self.name的构造函数。从这里开始，其实相当简单。
- en: We can just define any real code or functions that we want， for example， we
    can say。Deaf Neow。And if you do this， you're going to get really confused when
    nothing works。 Remember。 you have to have self as the first parameter there。Otherwise。
    you're just simply going to have a bad time。 Nothing's going to work right。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义任何真实的代码或函数，比如，我们可以说。Deaf Neow。如果你这样做，你会在什么都不起作用时感到非常困惑。记住。你必须将self作为第一个参数。否则。你只会有糟糕的体验。什么都不会正常工作。
- en: Indentation may drive you crazy。 Remember， you just want to line up with your
    current scope。 So class scope， function scope， so on and so on。And then， I'm just
    going to say。Print F。Let's go ahead and say。Self name and meow。 And I'm going
    to speed this up just a little bit because we've covered functions before。 But
    the main takeaway here is you have a blueprint and you can define what this object
    once it's created。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进可能会让你抓狂。记住，你只需与当前作用域对齐。所以类作用域、函数作用域，依此类推。然后，我将说。Print F。让我们继续说。Self name和meow。我要稍微加快速度，因为我们之前已经讨论过函数。但这里的主要要点是你有一个蓝图，你可以定义这个对象创建后的样子。
- en: is done。 Now notice how I've just intermixed those。 We're defining a blueprint。
    but we're also defining the behavior of the object once it's created。This is why
    people get things so horribly confused。Go ahead。Make a sleep function。And let's
    just go a little crazy here。 Let's go ahead and say。Hungry， and。Get rid of this。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了。现在注意我如何将它们混合在一起。我们在定义蓝图，同时也在定义对象创建后的行为。这就是人们混淆的原因。继续。制作一个sleep函数。让我们在这里疯狂一点。继续说。Hungry，并且。去掉这个。
- en: Or X in range。 I don't want to do anything too drastic。 Just 5。 then we're going
    to say self dot miow。 So when we say self。 remember。 we're taking the current
    instance of this blueprint， whatever's running a memory。 And we're going to call
    this function。 So if you have two cats， we're taking one of them and say。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在范围内的X。我不想做任何太激烈的事情。就5。然后我们将说self.dot miow。所以当我们说self时。记住。我们在获取这个蓝图的当前实例，正在内存中运行的内容。我们将调用这个函数。所以如果你有两只猫，我们在获取其中一只并说。
- en: make that cat now Miow， and we're going to call this function over here。So it
    becomes very simple how you can work in your own class。Now， from here， I'm just
    going to say。Go ahead and。Add a couple more just to show that you can do some
    stuff here。And I want to add just one more。We're going to say description。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让这只猫叫“Miow”，我们将调用这个函数。所以在你自己的类中工作变得非常简单。现在，从这里开始，我只是想说。继续。再加几个，只是为了展示你可以在这里做一些事情。我想再加一个。我们将说描述。
- en: and here I want to print some stuff out， so。We're going to print out the color
    out because I want to know what color this cat is。Is a say is a opera English
    here？So we're saying the name is a color。At。妈妈，Who is。Years old。Pretty simple
    little function， but basically what we're trying to demonstrate here is you can
    do pretty much anything you want。 you can have functions call functions， you can
    do hardcore math。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我想打印一些东西，所以。我们将打印出颜色，因为我想知道这只猫是什么颜色。说是歌剧英语吗？所以我们说名字是颜色。是。妈妈，谁是。几岁。这个小函数很简单，但我们想展示的是你几乎可以做任何事情。你可以让函数调用函数，做复杂的数学运算。
- en: you can actually create instances of other classes， do pretty much anything
    you want。 but now we have fully defined a blueprint for a cat。And this cat will
    have a constructor where we're setting the variables and it will meow sleep。 be
    hungry and meow a lot of times because that's what cats do， and we can make it
    eat。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以创建其他类的实例，几乎可以做任何你想做的事情。但现在我们已经完全定义了一个猫的蓝图。这个猫将有一个构造函数，我们正在设置变量，它会叫、睡觉，饿的时候会叫很多次，因为猫就是这样做的，我们可以让它吃东西。
- en: and we can get a description of that cat。So far， our class doesn't do anything。
    It's because we haven't created an instance of this yet。 Remember the class is
    just a blueprint。 Now we've got to actually create an object that we can work
    with or an instance。 So let's flip back to our file here。 First thing we need
    to do is import it so we can actually work with it。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以获得那只猫的描述。到目前为止，我们的类并没有做任何事情。这是因为我们还没有创建一个实例。记住，类只是一个蓝图。现在我们必须实际创建一个可以工作的对象或实例。所以让我们回到文件中。我们需要做的第一件事是导入它，这样我们才能实际使用它。
- en: Now we have to import this because it's in another file if it was in the same
    file。 we wouldn't have to import， but let's go ahead and go。Import。At。And now
    we can just work with that directly， or if we really wanted to。 we could say something
    like this from。At。Import， and then we can import the cat class。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须导入这个，因为它在另一个文件中。如果它在同一个文件中，我们就不需要导入，但让我们继续。导入。At。现在我们可以直接使用它，或者如果我们真的想的话。我们可以说这样的内容，从。At。导入，然后我们可以导入猫类。
- en: So now what we can say is from the cat file， importm this block of code。 And
    when we go in here。 it is the cat class。 So if you had multiple classes in here，
    it would only import cat。 whereas import cat would import everything in that file。![](img/8f475afeed4834135683e6ace5e6dd24_6.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们可以说，从猫文件中，导入这段代码。当我们进入这里时，就是猫类。所以如果你在这里有多个类，它只会导入猫。而导入猫则会导入该文件中的所有内容。![](img/8f475afeed4834135683e6ace5e6dd24_6.png)
- en: So that's why you're going to see those two out in the wild there。![](img/8f475afeed4834135683e6ace5e6dd24_8.png)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是为什么你会看到这两个在外面出现。![](img/8f475afeed4834135683e6ace5e6dd24_8.png)
- en: Now the important part， let's go ahead and use the class。 Now， when I say use
    a class。 what we're really doing is we're going to create instances of that class。
    I want to make a function called test。Now you may be wondering why don't we have
    a self here。 you've been saying self over and over again because we're not in
    a class。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重要的部分，让我们继续使用这个类。现在，当我说使用一个类时，我们实际上是在创建这个类的实例。我想做一个名为test的函数。现在你可能会想，为什么这里没有self。你一直在说self，因为我们不在一个类里。
- en: we don't have a current object。So there's no current object or no current instance。
    We're running right on the global scope。 We simply don't need it。 And if we try
    to use it。 really all we're doing is creating a parameter that we'll have to give
    some object to that doesn't exist。 so would make no sense。So if that sounded confusing。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有当前对象。因此没有当前对象或实例。我们在全局范围内运行。我们根本不需要它。如果我们尝试使用它，实际上我们只是创建一个需要传入不存在的对象的参数。所以这没有意义。如果听起来让人困惑。
- en: it's because it makes no sense to put self there。So we're going to say B equals
    cat。 Now。 you notice from other languages， you would have to put like new。 You
    don't have to do that with Python。 It does it automatically。 You do need the brackets，
    so。Now we need to give it a name。An age。And give a color。If you're wondering how
    I got those。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在这里放self没有意义。所以我们将说B等于cat。现在。你会注意到从其他语言来看，你需要像new那样的关键字。在Python中不需要这样。它自动处理。你确实需要括号，所以。现在我们需要给它一个名字、一个年龄和一个颜色。如果你在想我如何得到这些。
- en: it's because we define this in our file in our constructor， it needs a name。Age
    and color。 Not we did not call self because Python does this automatically。 What
    is' happening under the hood is it saying， make an instance of the cat class and
    then invisibly。It's putting self right there。Or X， that instance of that class。
    We don't have to do it。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们在构造函数中定义了它，它需要一个名称。年龄和颜色。我们没有调用self，因为Python会自动处理。实际上发生的是，它在说，创建一个猫类的实例，然后在背后隐形地把self放在那里。或者说X，就是那个类的实例。我们不需要自己去做。
- en: Python does it for us。 That's one of the hidden little gotchas。 You may look
    at the sink of。 where is self coming from， Python does it for you。All right。 so
    we've got this cat。Let's make another cat here。And let's call this。Beello， this
    was one of my cats。 He was a really great cat。 I miss him so much。And he was a
    black cat。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python为我们做了这一切。这是一个隐藏的小陷阱。你可能在想self来自哪里，Python会为你处理。好了，我们有了这个猫。让我们再创建一只猫。我们叫它Beello，这曾是我的一只猫。它是一只非常棒的猫。我非常想念它。它是一只黑猫。
- en: A lot of people don't like black cats。 They think they're bad luck。 But this
    is like the best cat I've ever， ever had in my life。 So we've got two instances
    B and C。 and they are two different things。Let's go ahead and print out。Description
    for B。And the description for C。And we could take this out just a little bit further
    if we wanted to。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人不喜欢黑猫。他们认为黑猫带来厄运。但这是我一生中拥有过的最好的猫。所以我们有了两个实例B和C，它们是两个不同的东西。让我们打印出B的描述和C的描述。如果我们想的话，我们可以进一步展开。
- en: we can say see Miow。And if you're wondering， yes， you could give it a more complex
    variable name。 you could actually call it kit cat or Deer or whatever you wanted。Let's
    go ahead and call the sleep。C is going to be hungry。As the cat was always hungry。And
    then we're going to say， you know what。 bees， not hungry bees going to eat。And
    if。Name。EqualsAnd we've done this before in another tutorial。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说C是Miow。如果你在想，是的，你可以给它一个更复杂的变量名。你实际上可以叫它kit cat或Deer或你想要的任何名字。让我们继续调用sleep。C会感到饥饿。因为猫总是很饿。然后我们将说，你知道吗。B不饿，B要吃。如果。名称。等于，我们之前在另一个教程中做过这个。
- en: but just in case。We're checking to see if Python is running this。Directly， and
    if it is。 we want to run some code。 Now， I've said this is the main function。
    We don't actually have to have a function called main。 What we can do is， well，
    anything we want。 And this is kind of the beautiful thing about Python。 I'm going
    to say X。At。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但以防万一。我们在检查Python是否直接运行这个。如果是的话，我们想运行一些代码。现在，我说这是主函数。我们实际上不需要一个叫main的函数。我们可以做任何我们想做的事情。这就是Python的美妙之处。我将说X。
- en: And we're going to give it a name of test， notice how age and color already
    have a default value。 and so we don't have to have them， but we do have to have
    a name。We covered all that in our functions video。I going to go ahead and print
    out。X。I'm not going to call this test function just yet， I want to show you something
    O。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将给这个命名为测试，注意年龄和颜色已经有了默认值。因此我们不需要它们，但必须有一个名称。我们在函数视频中涵盖了所有内容。我接下来将打印出X。我还不打算调用这个测试函数，我想先给你展示一些东西。
- en: Name E White is not fine。 What did we screw up here。Let's go in here。 We are
    on Cat do Py line 7。Well。Interesting。Name white is not defined。Aim white is not
    defined。What do you think is going on here， So we have line 12。color white， that's
    what we're missing here。I was handing at some type of object that didn't exist。So
    if you ever run into that is not defined。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Name E White是不对的。我们在这里搞错了什么。让我们进入这里。我们在Cat do Py的第7行。好吧。有趣。Name white没有定义。Aim
    white没有定义。你觉得这里发生了什么，我们有第12行。color white，这就是我们缺失的。我本来是在处理某种不存在的对象。所以如果你遇到没有定义的情况。
- en: kind of a little bit of explanation on the fly， that's why we simply， instead
    of a string。We were trying to hand it an object simple enough fix。 But for a moment。
    just kind of threw me for the loop。All right， now let's clear this out and run
    this again。There we go。 So you're going to see this and you're going to think
    you have an error。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有点即兴解释，这就是为什么我们简单地，而不是一个字符串。我们试图传递一个对象，这个修复非常简单。但有一瞬间。这确实让我感到困惑。好了，现在让我们清理这个，再次运行。好了。所以你会看到这个，你会认为你有一个错误。
- en: But really what's going on here is it's telling us。Underscore cat name of the
    file。Dot。Hat so we can actually go in here， go in here and we can see exactly
    what it's doing and then object。 So now we have an object we're working with object
    oriented programming or an instance of that object。And it is located at this。
    Now， this looks really confusing at this。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上这里发生的事情是在告诉我们。下划线cat是文件名。点。帽子，所以我们可以实际进入这里，看到它到底在做什么，然后对象。所以现在我们有一个正在处理的对象，面向对象编程的一个实例。它位于这个位置。现在，这看起来确实很困惑。
- en: This is actually a memory location。 So if you're coming from a language like
    C or C++ something that actually where you play around with the memory directly。
    this is the memory location。That is really cool。 so now we can know what's going
    on here。Let's flip back here， and let's actually just。Brenent out。He and right。There
    we go。Let's clear this and let's call our test function as well。 And let's see
    this whole thing in action。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是一个内存位置。所以如果你来自像C或C++这样的语言，实际上可以直接操作内存。这就是内存位置。这真的很酷。所以现在我们可以知道这里发生了什么。让我们回到这里，实际上。Brenent出。好吧。让我们清理这个，同时调用我们的测试函数。让我们看看这个整个过程。
- en: So， now we know。Our horrible boofup in our code here is fixed。 We know that
    class works。 and we can start making more instances of it。So popquiz。 how many
    instances of this class are we creating？Soid three， you're correct。1。2 and3。Let's
    go ahead and run this， see it in action。All right， so scroll all the way up。 Actually。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了。我们代码中的严重错误已经修复。我们知道这个类可以正常工作。我们可以开始创建更多实例。那么，快问一下。我们正在创建多少个这个类的实例？三个，你是对的。1、2和3。让我们运行一下，看看它的实际效果。好的，向上滚动到底部。实际上。
- en: I'm just going to bring this whole thing up here。So we have。Cat， cat object
    at this location。And then you see the constructors firing off for kittca and Othello。
    So the constructor's called。 even though we don't call it， it's called automatically。
    Think of that like the main function for a class。And if you're confused about
    what that is。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我就要把这整个事情提出来。所以我们有。猫，猫对象在这个位置。然后你会看到构造函数为kittca和Othello触发。所以构造函数被调用。即使我们没有调用，它也是自动调用的。把这看作类的主函数。如果你对那是什么感到困惑。
- en: Wick recap， it's a deaf underscore in it。 That is our constructor。Plipping back
    to the output here。 you can see now we have a cat object at this location and
    a cat object at that location and you don't have to memorize these numbers。 but
    if you just kind of look at the last few characters here you can see they're in
    different locations that's how you know they're different objects。Because Python
    has created three different objects at three different memory locations。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次回顾一下，这是一个下划线构造函数。回到输出这里。你现在可以看到我们在这个位置有一个猫对象，在那个位置也有一个猫对象，你不需要记住这些数字。但是如果你看一下最后几个字符，你可以看到它们在不同的位置，这就是你知道它们是不同对象的方式。因为Python在三个不同的内存位置创建了三个不同的对象。
- en: And we can treat them independently。 Kit cat is a tabby cat whos1 years old
    or fellow is a black cat who is six years old。 This is the cornerstone of object
    oriented programming。 and then we can work with those objects directly and do
    pretty much anything we want。So。Major takeaways from this video。We are covering
    object oriented programming and we're talking about classes。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以独立地处理它们。Kit cat是一只1岁大的虎斑猫，而fellow是一只6岁大的黑猫。这是面向对象编程的基石。然后我们可以直接与这些对象进行操作，并几乎可以做任何我们想做的事情。所以，视频的主要要点是，我们正在讨论面向对象编程，并且我们在谈论类。
- en: which are the blueprints for objects。![](img/8f475afeed4834135683e6ace5e6dd24_10.png)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是对象的蓝图。![](img/8f475afeed4834135683e6ace5e6dd24_10.png)
- en: '![](img/8f475afeed4834135683e6ace5e6dd24_11.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f475afeed4834135683e6ace5e6dd24_11.png)'
