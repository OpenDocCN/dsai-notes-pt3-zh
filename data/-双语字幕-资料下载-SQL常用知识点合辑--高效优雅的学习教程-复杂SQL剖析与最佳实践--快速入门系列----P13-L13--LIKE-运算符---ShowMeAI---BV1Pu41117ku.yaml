- en: 【双语字幕+资料下载】SQL常用知识点合辑——高效优雅的学习教程，复杂SQL剖析与最佳实践！＜快速入门系列＞ - P13：L13- LIKE 运算符 -
    ShowMeAI - BV1Pu41117ku
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】SQL常用知识点合辑——高效优雅的学习教程，复杂SQL剖析与最佳实践！＜快速入门系列＞ - P13：L13- LIKE 运算符 -
    ShowMeAI - BV1Pu41117ku
- en: '![](img/987f1c63e9084fb804d511337ab2db5a_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/987f1c63e9084fb804d511337ab2db5a_0.png)'
- en: In this tutorial I'm going to show you how to retrieve rows that match a specific
    string pattern。 For example， let's say we only want to get the customers whose
    last name start with B。 So here in the word clause。😊，We type out where last name。This
    is where we use the like operator。 and right after that we add a string pattern。
    So we want to get the customers whose last name start with B and we have any number
    of characters after B。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我将向你展示如何检索与特定字符串模式匹配的行。例如，假设我们只想获取姓氏以“B”开头的客户。因此在WHERE子句中。😊，我们输入“where
    last name”。这就是我们使用like运算符的地方，紧接着我们添加一个字符串模式。因此，我们想获取姓氏以“B”开头的客户，并且“B”后可以有任意数量的字符。
- en: So we use the percent sign to indicate any number of characters。 you might have
    one character after B or no characters or 10 characters with this pattern we get
    all the customers whose last name start with B。 And also it doesn't matter if
    it's an uppercase or a lowercase B So let's execute this query there you go。 So
    we only have three customers whose last name start with B。😊，As another example。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们使用百分号来表示任意数量的字符。在“B”后可能有一个字符、没有字符或十个字符。使用这个模式，我们可以得到所有姓氏以“B”开头的客户。而且无论是大写“B”还是小写“b”都没关系。让我们执行这个查询，结果出来了。我们只有三位姓氏以“B”开头的客户。😊，作为另一个例子。
- en: let's say we only want to get the customers whose last name start with brush。
    so we change our pattern to brush percent。 Now let's execute the query。 we only
    get this one customer here。Now， this percent sign doesn't have to be at the end
    of the pattern。 It cant be anywhere。 For example， let's say we want to search
    for customers who have a B in their last name。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想获取姓氏以“brush”开头的客户。因此，我们将模式改为“brush percent”。现在执行查询，我们只得到这位客户。现在，这个百分号不必位于模式的末尾，可以在任何位置。例如，假设我们想搜索姓氏中含有字母“B”的客户。
- en: whether it's at the beginning in the middle or at the end。 So we change our
    pattern to percent B percent。 This pattern means we can have any number of characters
    before or after B。 Let's execute the query。These are the customers who have a
    be somewhere and their last name。 it doesn't matter if B is at the beginning or
    in the middle or at the end。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是在开头、中间还是结尾。因此，我们将模式改为“percent B percent”。这个模式意味着在“B”之前或之后可以有任意数量的字符。让我们执行查询。这些客户的姓氏中有“B”，而且不管“B”是在开头、中间还是结尾。
- en: Let's look at another example。I want to get all the customers whose last name
    and with why。😊。So here's the pattern we use， let's execute this query and we have
    five customers whose last name ands with a why。So this is how we use the percent
    sign。 Now we also have an underscore and that matches a single character。 So with
    this pattern we get customers whose last name is exactly two characters long。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子。我想获取所有姓氏以“y”结尾的客户。😊。所以这是我们使用的模式，执行这个查询，我们有五位姓氏以“y”结尾的客户。这就是我们使用百分号的方法。现在，我们还有一个下划线，它匹配一个单一字符。因此，使用这个模式，我们得到的客户姓氏恰好有两个字符。
- en: we don't care what the first character is， but the second character should be
    y let's execute the query。 obviously we don't have any customers whose last name
    matches this pattern。 but if you change this pattern to five underscores， So one，2，3，4，5。😊，Followed
    by a why。We should get these customers， so their last name is exactly six characters。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不关心第一个字符是什么，但第二个字符应该是“y”。让我们执行这个查询。显然，我们没有任何姓氏与这个模式匹配的客户，但如果将模式更改为五个下划线，即“1，2，3，4，5”。😊，再加上一个“y”。我们应该能获取这些客户，因此他们的姓氏恰好有六个字符。
- en: We don't care about the first five characters， but all of them end with a why。Now。
    as another example， we can replace the first underscore with B。 and that means
    we want to get the customers whose last name start with B and after B we have
    exactly four characters followed by a Y let's execute this query。 so we only have
    one customer that matches this pattern。😊，So this is how we use the like operator。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不关心前五个字符，但它们都以“y”结尾。现在，作为另一个例子，我们可以用“B”替换第一个下划线。这意味着我们想获取姓氏以“B”开头的客户，且在“B”后面恰好有四个字符，最后以“Y”结尾。让我们执行这个查询，因此我们只有一位客户符合这个模式。😊，这就是我们使用like运算符的方法。
- en: We use the percent sign to represent any number of characters。And。😊。An underscore
    to represent a single character。Now this like operator in MyQl is an older operator。
    but we also have a newer one that is more powerful and it allows us to search
    for any string patterns。 and that's what I'm going to show you next。😊。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用百分号来表示任意数量的字符。并且。😊 一个下划线来表示单个字符。现在这个like运算符在MySQL中是一个较旧的运算符。但我们还有一个更新的运算符，它更强大，可以让我们搜索任何字符串模式。这就是我接下来要向你展示的内容。😊
- en: '![](img/987f1c63e9084fb804d511337ab2db5a_2.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/987f1c63e9084fb804d511337ab2db5a_2.png)'
- en: '![](img/987f1c63e9084fb804d511337ab2db5a_3.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/987f1c63e9084fb804d511337ab2db5a_3.png)'
- en: Al right here I'm going to give you two exercises for the like operator first。
    I want you to get the customers whose addresses contain trail or avenue。 and next
    I want you to get the customers whose phone numbers and with9。😊。![](img/987f1c63e9084fb804d511337ab2db5a_5.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里我将给你两个关于like运算符的练习。首先，我想让你找到地址包含“trail”或“avenue”的客户。接下来，我想让你找到电话号码以9结尾的客户。😊
    ![](img/987f1c63e9084fb804d511337ab2db5a_5.png)
- en: '![](img/987f1c63e9084fb804d511337ab2db5a_6.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/987f1c63e9084fb804d511337ab2db5a_6.png)'
- en: Al right， let's get started with the first exercise。 so select star from customers
    where address like like here we want to use a search pattern like this。😊，We want
    to have trail， but trail can be anywhere in the address。 so we put a percent before
    and after Tra。Next， we should use the or operator to search for another pattern。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始第一个练习。所以从customers表中选择所有记录，条件是地址像这样搜索。😊 我们想要“trail”，但“trail”可以出现在地址的任何地方。因此我们在“trail”前后都放一个百分号。接下来，我们应该使用or运算符来搜索另一个模式。
- en: Or address， like， let me put this on a new line that is better address like
    once again。 percent Avenue percent。That's it。So let's execute this query。😊。Here
    is the result you should get the customers with IDs 2， 9 and 10 if you look at
    their addresses。 all of them have either Trail or avenue in their address。Now
    let's work on the second exercise。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 或者地址像，让我把这放到新的一行，这样更好。地址像，再次使用百分号“avenue”百分号。就这样。所以让我们执行这个查询。😊 这里是你应该得到的结果，ID为2、9和10的客户，如果你查看他们的地址，他们的地址中都有“trail”或“avenue”。现在让我们开始第二个练习。
- en: We want to get the customers whose phone numbers and with night。 that is pretty
    easy so let me change our work clause。😊，Where phone， once again。 we use the likeU
    operator at a percent followed by a nine， that's all you had to do。😊。Let's execute
    the query， So here's the result， customers with IDs 3 and 7。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想找电话号码以9结尾的客户。这非常简单，所以让我修改我们的工作条件。😊，在电话号码那一栏，我们再次使用like运算符，后面跟一个百分号和9，这就是你需要做的。😊
    让我们执行这个查询。结果是，ID为3和7的客户。
- en: their phone numbers and with 9。So this is how we use the like operator and by
    the way you can always use the not operator here。 let's say if you want to get
    the customers whose phone numbers don't end with9。 so we simply prefix like with
    not Now if we execute this query one more time we get all the other customers
    and the database。😊。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的电话号码以9结尾。所以这就是我们如何使用like运算符，顺便说一下，你可以在这里始终使用not运算符。假设你想找电话号码不以9结尾的客户。那么我们只需在like前加上not。现在如果我们再执行一次这个查询，我们会得到数据库中的所有其他客户。😊
- en: '![](img/987f1c63e9084fb804d511337ab2db5a_8.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/987f1c63e9084fb804d511337ab2db5a_8.png)'
- en: '![](img/987f1c63e9084fb804d511337ab2db5a_9.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/987f1c63e9084fb804d511337ab2db5a_9.png)'
- en: 哦。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 哦。
