- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P9：9）Python元组：快速且只读 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P9：9）Python元组：快速且只读 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_0.png)'
- en: Welcome back， everyone。 This is Brian。 Let's continue our journey into Python
    3 with the tuple kind of a funny name。 but this is really， really cool。 So a tuple
    is a fast list that cannot be modified。 It's read only。 Once you create it， you
    can make zero changes to it。😊。This thing exists solely to exchange data and it's
    typically used between classes， between objects。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，大家好。我是布莱恩。让我们继续探索 Python 3，谈谈元组这个有趣的名字，但这真的非常酷。元组是一个快速的列表，不能被修改。它是只读的。一旦你创建了它，你就不能对它进行任何更改。😊。这个东西存在的唯一目的是交换数据，通常用于类之间、对象之间。
- en: between frameworks and between devices。 For example。 let's say somebody made
    a package that was going to give you this CPU and Ram and hardware and all this
    cool information about your device。 They don't want you to be able to modify that。So
    it may seem kind of plain and boring on the surface。 but you can do some really
    cool tricks as we're about to see。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架之间和设备之间。例如，假设有人制作了一个包，提供关于你的 CPU、内存和硬件的所有酷炫信息。他们不希望你能够修改这些内容。所以在表面上看起来可能有点普通和无聊，但正如我们即将看到的，你可以做一些非常酷的技巧。
- en: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_2.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_2.png)'
- en: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_3.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_3.png)'
- en: First thing we're going to do is create a tuple。 go ahead and make a variable
    named T。And's give this an assignment。 notice how it's got these little curve
    brackets here。When you see these curveb brackets， think of it like a shield defending
    it because it's read only。 you cannot change this。We're just going to give it
    some information。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是创建一个元组。请创建一个名为 T 的变量，并给它赋值。注意它有这些小的圆括号。当你看到这些圆括号时，可以把它看作是一种防护，因为它是只读的。你无法更改它。我们只是给它一些信息。
- en: We don't really care what we put in there because we're just testing it out，
    say print。Anti。You guessed it it's got these curved brackets， and that is what
    denotes it's a tuple。The major takeaway here is the different style bracket denotes
    what it's going to be。 whether it's a tuple， a set or a list or a dictionary which
    we haven't covered yet。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不在乎放进去什么，因为我们只是测试一下，假设打印。你猜对了，它有这些圆括号，这就是标识它是元组的方式。这里的主要收获是不同风格的括号标识它将是什么，无论是元组、集合、列表还是字典，我们尚未覆盖字典。
- en: Now that we have a tuple， let's look at how to access the elements inside of
    that tu。 It's dead simple。 We've done this before。 Let's go ahead and say， print。F。
    and we're going to access via the index。Give it our index position。 remember this
    is a zero based index， so zero is actually the first position and then one two
    and so on and so on。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个元组，让我们看看如何访问这个元组中的元素。这非常简单。我们之前做过这个。让我们说，打印 F，并通过索引来访问。给出我们的索引位置。记住这是一个零基索引，所以零实际上是第一个位置，然后是
    1、2，以此类推。
- en: Run works exactly the way you would expect it to。Let's go ahead and do a slice
    because slicing is pretty easy and fun。And we're going to grab this and say， I
    want to go from two to the end of the couple there。Works as expected。Go ahead
    and clear this out，Let's look at a bull operation。What we want to do now is we
    want to look for something specific inside of that tuple I want to say is3 in
    T。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的结果正如你所预期的那样。让我们来做一个切片，因为切片非常简单有趣。我们将获取这个，并说，我想从两个开始，一直到元组的末尾。效果如预期。清空这个，让我们来看一下布尔操作。我们现在要做的是在元组中查找一些特定的内容，我想说的是
    T 中是否有 3。
- en: What this is going to do is tell Python hey， take this value and inside of this
    tuple。 and it could be a list or a set or a dictionary。 we haven't covered dictionaries
    yet。And it's going to search and see if it's actually in there。Let's a returnable
    saying yes or no。 in this case， true because three is right there。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的目的是告诉 Python，嘿，在这个元组中取这个值。它可以是列表、集合或字典。我们尚未覆盖字典。它将搜索并查看它是否确实在里面。让我们返回一个可以说是“是”或“否”的结果。在这种情况下，是的，因为
    3 就在那里。
- en: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_5.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_5.png)'
- en: This is extremely easy to work with， and it's blistering fast。![](img/1a6d1245cd7135a10f1445c03c8aba8f_7.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常容易使用，而且速度极快。![](img/1a6d1245cd7135a10f1445c03c8aba8f_7.png)
- en: Okay， bonus material， let's talk about assignment。When I say assignment。 what
    are you really talking about， I mean， tuples are kind of boring。 You create them
    and you can access elements other than that， you're done。Well。 you can do some
    really cool things， not just with tuples with lists and sets。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，额外内容，让我们谈谈赋值。当我说赋值时，你真正指的是什么，我的意思是，元组有点无聊。你创建它们，可以访问元素，除此之外，你就完成了。好吧，你可以做一些很酷的事情，不仅仅是与元组，还是与列表和集合。
- en: but tuples make it really simple to understand。So we're going to make it tuple。
    and we're going to put some variables。 These are not values。 These are variables。
    Remember of variables， something that'll change X， comma Y， comma Z。Now I'm going
    to make another topple， and we're going to give it values，1，2。3。What are we doing
    here。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是元组使得理解变得非常简单。所以我们要创建一个元组，放一些变量。这些不是值，而是变量。记住这些是变量，某些东西会改变 X，逗号 Y，逗号 Z。现在我要再创建一个元组，给它值，1，2，3。我们在这里做什么呢？
- en: what we're saying take these variables and give them these values and Python
    under the hood is going to figure out which one needs to be which。Then print X。Let's
    print Y。And let's go ahead and print Z。See this in action，1， two， three。Beautiful。Now
    let's talk about the range function， and this is something that a lot of people
    don't really talk about too much。You just see it and you expect that it'll just
    magically work， Let's grab this。There we go。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在说的是将这些变量和这些值配对，Python 在后台会弄清楚哪个需要是哪个。然后打印 X。让我们打印 Y。接下来打印 Z。看看这个效果，1，2，3。很美妙。现在让我们谈谈
    range 函数，这是一件很多人不太谈论的事情。你只是看到它，并期望它能神奇地工作，让我们来获取这个。好了。
- en: So we've got X Y Z， and we're going to get rid of this right here and we're
    going to say we want Python to do all that work we don't want to sit here and
    type out values all day long。 so I'll say range。And let's give it a one， see what
    happens here。You're expecting an error。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有了 X Y Z，我们要在这里删除这个，并且我们希望 Python 完成所有这些工作，我们不想坐在这里整天输入值。所以我会说 range。让我们给它一个，看看会发生什么。你可能期待会出现一个错误。
- en: you got an error。Not enough values to unpack expected three got one。Well。 let's
    just test thisthere and say we want 6。 We're going to give it more than it needs。
    And。 of course， another error too many values to unpack expected 3。 So it's telling
    you， I demand 3。 Where's it getting 3。From right here。Under the hood， Python is
    making。A tuple。Of variables。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到了一个错误。没有足够的值来解包，期望三个，得到了一个。好吧。让我们在那里测试一下，假设我们要 6。我们给它比需要的更多的值。当然，又是一个错误，解包的值太多，期望
    3。所以它在告诉你，我需要 3。它从哪里得到 3 呢？就从这里。实际上，Python 正在创建一个变量的元组。
- en: and we can assign to those variables using the range function。Now。 range itself
    is not returning a tuple。 We can test this out by just simply grabbing this。Then
    print this out。 We're going to actually print range 3。Notice how we got 0，1，2。
    So there is our range， but then we're printing range 3 and it's saying range 0
    to 3。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 range 函数将这些变量赋值。现在，range 本身并没有返回一个元组。我们可以通过简单地获取这个来测试一下。然后打印出来。我们实际上将打印
    range 3。注意我们得到了 0，1，2。所以这就是我们的范围，但我们打印 range 3，它显示为 range 0 到 3。
- en: So what we're really expanding upon here is that the range itself is telling
    Python。Go through a loop， something we're going to talk about in a future video。
    but you have a start and an end。 we haven't really given it a start name。 We just
    said， hey。 make three values。 It's going to start at 0。 go three times。What if
    we don't want to start at zero。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们真正要扩展的是 range 本身在告诉 Python，进行循环，这个我们将在未来的视频中讨论。但是你有一个开始和一个结束。我们还没有真正给它一个起始名称。我们只是说，嘿，生成三个值。它将从
    0 开始，执行三次。如果我们不想从零开始呢？
- en: we want to start at one。Well， we give it a。Start。And now we have to give it
    an in position here。Forward。Why4 because we need a starting position plus a length
    of how many we need to unpack。 which is four。1 plus 3 equals 4。hNow it just works
    exactly the way you think it would。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想从 1 开始。好吧，我们给它一个起始值。现在我们必须给它一个在这里的前进位置。为什么是 4？因为我们需要一个起始位置加上我们需要解包的数量，也就是
    4。1 加 3 等于 4。现在它完全按你想的方式工作了。
- en: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_9.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a6d1245cd7135a10f1445c03c8aba8f_9.png)'
