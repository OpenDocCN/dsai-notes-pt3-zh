- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P24：24）二进制文件操作 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P24：24）二进制文件操作 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/9d5ec0a5f39426c11f3410b240354eea_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d5ec0a5f39426c11f3410b240354eea_0.png)'
- en: Welcome back everyone。 My name is Brian， and we're going to continue our journey
    into Python 3 and we're going to talk about how to write a text file。 This is
    plain text， not binary。 We're going to talk about writing binary files in a future
    video。We're going to take what we've learned in the previous video and overly
    simplify it using functions。 The last video was kind of verbose。 I want to make
    life much， much simpler。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大家欢迎回来。我是布赖恩，我们将继续我们的Python 3之旅，我们要谈论如何写入文本文件。这是纯文本，而不是二进制。我们将在未来的视频中讨论如何写入二进制文件。我们将利用上一个视频学到的知识，使用函数进行过度简化。上一个视频有点冗长。我想让生活简单得多。
- en: Our first goal is to simplify mode usage。 Now， what are we talking about here。
    We're going to cover two different modes。 We're going to talk about right and
    a pen。 and they do two totally different things。But we can use the same code。
    So let's go ahead and make a function。 I'm going to say to file。And。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的首要目标是简化模式的使用。现在，我们在谈论什么。我们将覆盖两种不同的模式。我们要谈论写入和追加。它们做的事情完全不同。但我们可以使用相同的代码。那我们就来写一个函数。我将说到文件。还有。
- en: Let's go ahead and save file name。Moode。Data， I hear a lawn more behind me。
    I apologize that the microphone's picking that up。 It's just kind of。Covid-19。
    nothing you can do about it。 My neighbor likes to mow his lawn 100000 times a
    day。 So I'm going to say open。And we're going to open that file name。And we want
    the mode。 Now， remember。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存文件名。模式。数据，我听到我身后有割草机的声音。抱歉麦克风录到了。只是有点。Covid-19。对此你无能为力。我的邻居喜欢一天割草100000次。所以我会说打开。我们要打开那个文件名。我们需要模式。现在，记住。
- en: in the last video， we opened it with the read text or the R mode。We're going
    to work with W and A。 but they can work very， very similarly using the same code。As
    we're about to demonstrate。 I'm say4 I in range。And we're going to go ahead and
    say， ring， let's just pick a number 5。And let's go ahead and write this out。And
    I want to say the string representation of that number。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个视频中，我们用读取文本或R模式打开它。我们将使用W和A。但它们可以使用相同的代码非常相似地工作。正如我们将要演示的。我将说4我在范围内。我们就说，环，让我们选一个数字5。然后我们继续写出这个数字。我想说那个数字的字符串表示形式。
- en: You're going to get some sort of error message if you don't do that。Go ahead。A
    little colon in there。Along with the data。And let's go ahead and add in。A carriage
    return， line feed。/lash R/ and those are our escape characters we talked about
    that when we're in string La。 so really all we're going to do is we're going to
    write out the string representation of the number using STR to convert it from
    an integer to a string。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不这样做，你将会收到某种错误信息。继续吧。在那里加一个小冒号。连同数据。让我们继续添加一个换行符，行结束符。/lash R/，这些就是我们谈到的转义字符，当我们在字符串La中时。实际上，我们要做的就是使用STR将数字的字符串表示形式写出，将其从整数转换为字符串。
- en: and then we're going to add a colon， whatever data we're in and then RN data
    is going to come to our function。As an argument。Now。There exists this tendency
    to do something like this。 And you're going to see this blush。I'm going to comment
    this out。 What does flush do and why do people have it in their code。 When you
    write to a file。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将添加一个冒号，不论我们处于什么数据，然后RN数据将作为参数传递给我们的函数。现在。确实存在做类似事情的倾向。你会看到这个flush。我会将其注释掉。flush的作用是什么，为什么人们在他们的代码中使用它。当你写入文件时。
- en: you have an invisible buffer in the background。 I should say Python does。 and
    that buffer will fill up because you can add more to it faster than it can write
    down to the disk。 especially if you've got a slow， hard disk。 Think about like
    embedded systems。 how they get really slow。You don't really need to call flush。If
    you're going to。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 背景中有一个看不见的缓冲区。我应该说是Python有。那个缓冲区会填满，因为你添加的速度比它写入磁盘的速度快，特别是如果你的硬盘较慢。想想嵌入式系统，它们会变得非常缓慢。你实际上不需要调用flush。如果你要。
- en: Close the file when you're done with the file， you close it。 Ithon calls this
    automatically when it's closed。 However， if you're doing some sort of。Like sequential
    rights or something like that and you want to just write to the file in chunks。
    you're going to want to flush it periodically to make sure that data gets flushed
    down to the disc。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完成文件操作后请关闭文件，关闭时Ithon会自动调用此操作。然而，如果你在进行某种操作，比如顺序写入，想要分块写入文件，就需要定期刷新，以确保数据被写入磁盘。
- en: I wanted to put that there because I know somebody's going to ask why didn't
    you flush the contents。 you don't need to because close calls that automatically。And
    I hate that name， but at the same time。 it makes me chuckle cause you're going
    to flush it。 And I always think about looking down as disgusting as it is looking
    at a toilet。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我想把这个放在那里，因为我知道有人会问，为什么不刷新内容。你不需要这样做，因为关闭会自动调用这个操作。我讨厌这个名字，但同时，这让我感到好笑，因为你要刷新它。我总是想象着看着一个马桶，尽管这看起来令人作呕。
- en: And you're just going drop data into the toilet and then flush it down。 But
    that's literally what that does is it flushes all of that buffer down into the
    hard drive。![](img/9d5ec0a5f39426c11f3410b240354eea_2.png)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你就像是把数据扔进马桶然后冲掉。但这实际上是将所有缓冲区的数据冲到硬盘中。![](img/9d5ec0a5f39426c11f3410b240354eea_2.png)
- en: '![](img/9d5ec0a5f39426c11f3410b240354eea_3.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d5ec0a5f39426c11f3410b240354eea_3.png)'
- en: So we're going to cover two modes and the first one is right when you hear the
    word right。Wite will overwrite， meaning it's going to take the existing file completely
    erase it。And start from scratch。 And you need to be a little bit careful when
    you do that。 because if you have something sensitive or something you wanted to
    save。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论两种模式，第一个是写入。当你听到“写入”这个词时，写入将会覆盖，这意味着它将完全擦除现有文件，并从头开始。在执行此操作时，你需要小心，因为如果你有敏感信息或者希望保存的内容。
- en: it's just going to obliterate that data。 It's just gone。 It will not be in your
    recycle bin。 It will be gone forever。 So you need to be a little bit careful here。So
    we're going to write file。And let's go ahead and say。I need some special variable
    name like IL name， There we go。And we're going to call this two file function，
    we have a file name mode of data。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将彻底消除该数据，数据将不再存在，也不会在回收站中，永远消失。因此，在这里你需要小心。我们将要写入文件，假设我需要一个特殊的变量名，比如IL name，就这样。我们将调用这个文件功能，文件名的模式为数据。
- en: So let's just go ahead and grab this。And we're going to call our function here。So
    we're going to reuse the variable file name， the mode。 we're going to switch this
    to W for right and the data we're going to say。Hello。Remember。 right will overwrite，
    it will completely destroy that and start over。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们继续执行这个操作。我们将调用我们的函数。我们将重用变量文件名，模式将切换为W（写入），我们将输入的数据为“Hello”。记住，写入将会覆盖，完全摧毁原有内容并重新开始。
- en: The other mode we're going to talk about is app pen。 Now， append will add。So
    right we'll overwrite a pen will add Now what this does is it opens the file，
    Sees。 remember we talked about seeking moving through that file。 it's going to
    go to the very end of the file， and then it's going to start adding to it。Now。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要讨论的另一个模式是追加。现在，追加将会添加内容。因此，写入将会覆盖，而追加将会添加。这会打开文件，看到……记得我们谈过的寻址，移动文件中的位置，它会移动到文件的末尾，然后开始添加内容。
- en: this is what I mean by simplify mode usage。 we can literally take this。And just
    paste it。And then simply change this。To an A for a pent。And then let's change
    this to ao again。So what's going to happen here is we're going to call right。
    it's going to beliterate the file。 start over and then。Up to 5， it's going to
    say hellello world。 And then we're going to call a pan。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我所说的简化模式使用。我们可以直接将其复制，然后简单地将其更改为A以进行追加。接着我们再将其改回ao。因此，在这里将会调用写入，它会彻底消灭文件，重新开始，然后……最多到5，它将显示“hellello
    world”。接着我们将调用追加。
- en: and it's going to add to it。All right， the immediate goal of this was to write
    in aend。 but I want to read this file back。So I want to use and import。 and I'm
    going to put it all the way at the top of the file。Not mandatory。 but it's almost
    like an industry standard， if you will。To put your imports at the very top。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它将添加内容。好的，这里的直接目标是写入aend，但我想要重新读取这个文件。因此，我想使用并导入，将其放在文件的最顶部。这不是强制性的，但几乎可以说是行业标准，应该把导入放在最上面。
- en: rather than just adding it right here， which you actually could。 But let's put
    it all the way at the top that way。Anything that we've just kind of flubed through
    and we've used OS will'll get it as well。 and if we decide to go back and modify
    these functions and use we don't have to accidentally import it multiple times。
    so in short， always put your imports at the top of a file。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是直接在这里添加，实际上你可以。但让我们把它放在顶部，这样。我们刚刚处理的任何内容，使用OS时也会得到它。如果我们决定回去修改这些函数并使用，我们就不必意外地多次导入它。因此，总之，总是把你的导入放在文件的顶部。
- en: We're going to say de and let's go ahead and read file。And I need some special
    variable name。 something that really standss out like， I don't know。 file name。
    We could name it fuzzy button。 kitten or whatever we wanted。All right， so we're
    going to say if not， we want O S。And let's go ahead and say path。That exists。
    We're just going to make sure the file we're trying to read actually exists。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将说de，让我们继续读取文件。我需要一个特殊的变量名。某个真正突出的东西，比如，我不知道。文件名。我们可以把它命名为fuzzy button kitten或者我们想要的任何名称。好吧，我们要说如果没有，我们想要O
    S。让我们继续说路径。那存在。我们只会确保我们尝试读取的文件确实存在。
- en: Otherwise we're going to get some bad， bad errors。Now， instead of exiting。 I
    just want to return right out of this function， not kill the entire script。Now，
    I want to say。We're going to open this up， and this is how just ridiculously simple
    looking with files and Python can be。G it a mode。And because we've opened something，
    let's go ahead。 And before we do anything else。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 否则我们将遇到一些糟糕的错误。现在，我不想退出。我只是想直接返回这个函数，而不是终止整个脚本。现在，我想说。我们要打开这个文件，这就是使用Python处理文件时的简单程度。给它一个模式。因为我们打开了某个东西，让我们继续。在我们做其他任何事情之前。
- en: all'll close。 Now， in between open and close， we can do whatever we want to
    do。 For example。 I could say4。A line。In F dot。Readed lines。Thing like this。Or
    if we wanted to really， really。Really over simplifyimplify that。 We could just
    read the entire file in one line。And we're just going to call。Now， spoiler alert，
    if you do that on a very large file。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在关闭。在打开和关闭之间，我们可以做任何想做的事情。例如。我可以说4。A line。在F dot。Readed lines。像这样。或者如果我们真的想要过于简单化。我们可以一次读取整个文件。而我们只会调用。现在，剧透警告，如果你在一个非常大的文件上这样做。
- en: you're going to have a very bad time because you may run out of memory， your
    little app may crash。 for example， if you have。3 gigs of memory。 You try to read
    a 30 gig file。 It's just not going do it。 And it'll sit there for three hours
    before it crashes， but it'll eventually crash。 That's why we use things like or
    line in read lines because it reads it one line at a time。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 否则你会有非常糟糕的经历，因为你可能会耗尽内存，你的小应用可能会崩溃。例如，如果你有3GB的内存。你试图读取一个30GB的文件。它根本无法做到。它会在那里待三小时才崩溃，但最终会崩溃。这就是为什么我们使用像or
    line in read lines这样的东西，因为它一次读取一行。
- en: Not the entire thing。Okay， our warning about reading all of it in one function。
    If you had a massive file， notwithstanding。 We're going to leave it like this
    just for demonstration purposes。 because we're going to work with a very small
    file。 We're going to see this in action。 I'm going to say my file。 we could name
    is really anything we want。 Well let's name this。 Ho dot C。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不要全部都读。好的，我们警告一下关于在一个函数中阅读全部内容。如果你有一个巨大的文件，尽管如此。我们就这样留下它，纯粹是为了演示目的。因为我们将处理一个非常小的文件。我们将看到它的实际应用。我会说我的文件。我们可以把它命名为任何我们想要的。好吧，让我们命名为Ho
    dot C。
- en: X T。First things first， we're going to write this file。Just is going to call
    our function。 Now。 let's go ahead andend the file。And let's go ahead and read
    the file。There's a reason why we're breaking this up into functions and it's so
    we can reuse this code。 you're going to hear that term a lot in programming code
    reuse。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: X T。首先，我们要写这个文件。只是调用我们的函数。现在。让我们继续结束文件。然后让我们继续读取文件。我们将代码拆分成函数是有原因的，这样我们就可以重用这段代码。你在编程中会经常听到“代码重用”这个术语。
- en: Rather than hard coding the file name and then calling。 or I should say rewriting
    this function for every single file is just simply to use a variable and reuse
    the code。So let's go ahead and run this。And you see how it says。0 through 4， Hello
    world。 And then there are pen kicks in here。 Hello again。Now let's demonstrate
    this。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与其硬编码文件名，然后调用，或者说为每个文件重写这个函数，不如使用一个变量来重用代码。所以让我们继续执行这个。你看到它说。0到4，Hello world。然后这里有一些其他内容。Hello
    again。现在让我们来演示一下。
- en: So let's get rid of this append。And let's just do right。 notice how we already
    have a file out there and we can actually open it up。 and this is exactly what
    it looks like。Let's go ahead and get rid of that append and let's see what I mean
    by right file will overwrite。 This is why it's so dangerous。Hello worlds，0 through
    four。 And if we open our file back up。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们去掉这个附加。让我们只做对的事。注意我们已经有一个文件在那儿，我们实际上可以打开它。它看起来就是这样。让我们去掉那个附加，看看我所说的对的文件将会覆盖。这个就是为什么它如此危险。你好世界，从0到4。如果我们重新打开文件。
- en: you can see。Hello world， all of that hello again， is gone because it obliterated
    that file and rewrote it。Now we can do this。And it goes right back the way we
    want it。 Ho again and again。Major takeaway from this is writing will overwrite
    aend will seek to the end and add to it。 and we can make reading files ridiculously
    simple。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到。你好世界，所有的再次问候，已经消失，因为它抹去了那个文件并重新写入了它。现在我们可以这样做。它回到了我们想要的方式。再次和再次。主要的收获是写入将会覆盖，且将寻址到末尾并追加。我们可以让读取文件变得极其简单。
- en: '![](img/9d5ec0a5f39426c11f3410b240354eea_5.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d5ec0a5f39426c11f3410b240354eea_5.png)'
- en: '![](img/9d5ec0a5f39426c11f3410b240354eea_6.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d5ec0a5f39426c11f3410b240354eea_6.png)'
