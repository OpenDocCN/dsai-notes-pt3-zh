- en: 【双语字幕+资料下载】T81-558 ｜ 深度神经网络应用-全案例实操系列(2021最新·完整版) - P3：L1.2- 深度学习 Python 简介
    - ShowMeAI - BV15f4y1w7b8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】T81-558 ｜ 深度神经网络应用-全案例实操系列(2021最新·完整版) - P3：L1.2- 深度学习 Python 简介
    - ShowMeAI - BV15f4y1w7b8
- en: Hi， this is Jeff Heaton， welcome to applications of Deep neural Network with
    Washington University。In this video， we're going to look at an introduction to
    Python and see some of the preliminaries that will help you make use of the Python
    programming language as you work through this course this semester。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是杰夫·希顿，欢迎来到华盛顿大学的深度神经网络应用课程。在这段视频中，我们将介绍Python，并了解一些基础知识，这将帮助你在这个学期的课程中使用Python编程语言。
- en: For this course we use Python 3， TensorFlow and Kes for the latest on my AI
    course and projects。 click subscribe and the bell next to it to be notified of
    every new video in this part。 we will take a look at the Python programming language。
    This part starts at the very beginning with Python so we look at how to print
    out strings， numbers。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这门课程中，我们使用Python 3、TensorFlow和Kes，关于我的AI课程和项目的最新信息，请点击订阅及旁边的小铃铛，以便收到每个新视频的通知。本部分将从Python编程语言的最基本知识开始，因此我们将学习如何打印字符串和数字。
- en: looping and if statements。![](img/ac1951e4692bfdf0941f1d0ef6d36dd9_1.png)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 循环和条件语句。![](img/ac1951e4692bfdf0941f1d0ef6d36dd9_1.png)
- en: The next part will get into lists and maps and how to deal with those so if
    you're already very familiar with just the introduction to Python。 you may well
    want to skip this part and proceed with with the next one all of module1 deals
    with an introduction to the Python programming languages。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将讨论列表和字典，如何处理这些内容。如果你已经非常熟悉Python的基础介绍，你可能想跳过这一部分，直接进入下一部分，模块1的所有内容都是关于Python编程语言的介绍。
- en: but we do get into more advanced topics such as pandas and mapRuce in the later
    parts of moduleule1。We are using the Python3 programming language。So it's important
    that you're using that Python 2。While is still a very viable Python version， simply
    has differences in syntax that will give you issues with some of the programming
    code in this class。Like most programming language tutorials， I'm going to start
    with Hello World。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们在模块1的后面部分会深入探讨更高级的主题，如pandas和mapRuce。我们使用的是Python3编程语言。因此，重要的是你使用Python 2。虽然Python
    2仍然是一个有效的版本，但在语法上有些差异，会导致你在这门课的一些编程代码中遇到问题。像大多数编程语言教程一样，我将从“Hello World”开始。
- en: And in Python you have functions， so print open parenthesesis close parenthesesis
    and you pass a string to it Now in older versions of Python。 you didn't always
    have to put the parentheses around this， you could just do print space。 hello
    world and quotes that was deemed to be not consistent with function handling in
    Python and eventually went away。So you'll want to have the parentheses。If you
    ever deal with print where there's not parentheses。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你有函数，所以打印时要用开括号和闭括号，并传递一个字符串。现在在旧版本的Python中，你不一定要在这周围加括号，你可以直接打印空格“hello
    world”，但这被认为与Python中的函数处理不一致，因此最终被去掉了。因此，如果你遇到没有括号的打印，请确保加上括号。
- en: that's older Python 2 stuff。You can also have comments in Python comments are
    great because they let me know what you're doing。 they let you know what you were
    doing later on when you might have forgotten when you submit assignments to me。Comments
    will always help if your code is not working correctly。 but I see in the comment
    that you had a general idea of what was supposed to have been happening。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是较旧的Python 2内容。你还可以在Python中添加注释，注释很重要，因为它们可以告诉我你在做什么，并且在你提交作业时提醒你自己。如果你的代码没有正常工作，注释会一直帮助你，但我能在注释中看到你对发生的事情有一个大致的想法。
- en: that's a real encouragement for me to give you at least partial credit。So running
    this with the comment in there。It works just the same as the first one， but。The
    comments simply ignored。The triple quote， so three double quotes in a row is pretty
    cool in Python。 this will allow you to have a multiple line string。 So if you
    run this。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我来说是一个很好的鼓励，至少可以给你部分分数。因此，运行这个时带有注释的内容，效果和第一个一样，但注释会被简单忽略。三重引号，即三个双引号在Python中非常酷，这将允许你有多行字符串。所以如果你运行这个。
- en: It's like having three print statements and all the line breaking is handled
    for you。So you'll frequently see these in Python Now if you're putting in a large，
    large block of text。 you might really want to think about storing that text in
    a file rather than hard coding it right into your source code。But this is a good
    way if you are going to truly have carriage returns and line breaks in your code
    to encode it all into one string。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像有三个打印语句，所有换行都为你处理。因此，你在Python中经常会看到这些。现在如果你要放入一个很大的文本块，你可能真的要考虑把那个文本存储在文件中，而不是直接硬编码到源代码里。不过如果你确实需要在代码中有回车和换行，这是一种很好的方式，将所有内容编码为一个字符串。
- en: Now these are also sometimes used as comments because if you just have a string
    by itself。 so say I got rid of the print， open parenthesesis， got rid of the closed
    parenthesesis。 now that would be almost a multiline comment because you the string
    is not going to really do anything for you。Now in Python， like a lot of languages，
    you can have single quotes or apostropphes or straight line quotes。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些有时也用作注释，因为如果你单独有一个字符串，比如说我去掉了打印，去掉了开放和关闭的括号。现在这几乎算是一个多行注释，因为这个字符串对你没有实际意义。现在在Python中，像许多语言一样，你可以有单引号或撇号或直引号。
- en: whatever you want want to call those。They work exactly the same as the double
    quote。 so you can choose interchangeably between this， this is just going to print
    out hellello world just like the other one。As far as picking which to use， sometimes
    the single quote is suggested for more symbolic type of strings。Characters， but
    not text。 if it's truly human readable text。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你想如何称呼它们，它们的工作方式与双引号完全相同，所以你可以互换使用，这将像另一个那样打印出“hello world”。在选择使用哪种方式时，有时建议使用单引号来表示更符号化的字符串。字符，而不是文本。如果是人类可读的文本。
- en: then you probably want to use the double quote。 Now。 another technique that
    I will use that I find kind of useful is say I wanted to put a double quote right
    in the middle of this。 This would be perfectly valid， and I wouldn't have to do
    the normal escapes that you that you put around them。 Now， this is valid too。
    This would put the W in quotes。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你可能想使用双引号。现在，我会使用的另一个我觉得有用的技巧是，如果我想在中间放一个双引号。这是完全有效的，我不需要像往常一样使用转义字符。现在，这也是有效的。这将把W放在引号中。
- en: But since we have the string wrapped around single quotes， this also works。Numbers
    do not need quotes， and you can use variables。Variables in Python do not have
    types。 so it's simply a equals 10， b equals 10 in quotes。And Python figures out
    that the first one is an integer and the second one is a string。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是由于我们将字符串用单引号包裹，这也是有效的。数字不需要引号，你可以使用变量。Python中的变量没有类型，所以简单来说，a等于10，b等于10（带引号）。Python会判断第一个是整数，第二个是字符串。
- en: so you don't need to define those types ahead of time， it's a dynamic Now if
    you run this。 it prints out 10 and 10 so you can see that both of those two variable
    types are being accounted for。What's nice about variables is they can vary， so
    you can change the variable as you go here we started out with a is equal to 10。
    and then we added one to 10。Now in Python 2， you will sometimes see a plus equals
    one。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你不需要提前定义那些类型，它是动态的。现在如果你运行这个，它会输出10和10，所以你可以看到这两个变量类型都被计算在内。变量的好处在于它们可以变化，所以你可以在这里随意更改变量，我们一开始把a设为10，然后加了1到10。在Python
    2中，你有时会看到加等于1。
- en: this does exactly the same thing as that first one It's just a difference in。In
    syntax。You've probably seen things like this too that does not exist in Python。So
    if you haven't seen that。 don't worry， doesn't exist in Python Now when you want
    to print out a string and a variable together。 there's a variety of ways to do
    this in Python， but the recommended way for this course is to use something called
    an F string。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这与第一个完全相同，只是在语法上有区别。你可能也见过这样的东西，在Python中是不存在的。所以如果你没见过，没关系，在Python中不存在。当你想将字符串和变量一起打印时，Python中有多种方法可以做到这一点，但本课程推荐的方式是使用一种叫做F字符串的方式。
- en: An F string is just the letter F with either a single or double quote next。
    And then you start out just having a normal string。 but then you can put anything
    you want to between curly braces。 And whatever you put between curly braces are
    basically expressions that would be printed out。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: F字符串就是字母F，后面跟一个单引号或双引号。然后你开始有一个普通字符串，但你可以在花括号之间放任何你想放的东西。花括号之间的内容基本上是会被打印出的表达式。
- en: They can be single variables like this。 This will print out the value of a is
    10。You can also put expression type values in here， so a plus5 this will evaluate
    that expression。And put that put out that value for you。 Python has many ways
    to to print numbers。 These are all correct。 However， for this course we will。Use
    F strings。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以是这样的单个变量。这将打印出a的值是10。你也可以在这里放入表达式类型的值，比如a加5，这将计算该表达式，并为你输出该值。Python有许多方法来打印数字。这些都是正确的。然而，对于这门课程我们将使用F字符串。
- en: If you submit something to me in one of these other formats， that's perfectly
    fine。 Python has a lot of ways to print out numbers and strings together because
    Python's been around for a while。 So it's picked up quite a few different ways。
    If we run this。We're going to see that they all print out a is equal to5 so we've
    got the S strings。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以其他格式提交给我，这完全可以。Python有很多方法将数字和字符串一起打印出来，因为Python已经存在了一段时间，所以它积累了相当多的不同方法。如果我们运行这个。我们将看到它们都打印出a等于5，所以我们得到了S字符串。
- en: we' talked about that this is a method that I used a lot until I started using
    S strings。A is equal to。Open close， curly brace。 and then you pass in all the
    values for So if you had another curly brace in there。 you would do something
    like a kind of B。 You can also simply concatenate strings together。 This is the
    somewhat more primitive way of doing this。 It's okay。 This can get you into trouble。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈到过，这是我在开始使用S字符串之前常用的一种方法。A等于。打开闭合的花括号。然后传入所有的值。如果你在其中有另一个花括号，你会像这样做，某种B。你也可以简单地将字符串连接在一起。这是相对原始的做法。没关系。这可能会让你陷入麻烦。
- en: sometimes。You have to usually put the STR around A if a is not a string。 otherwise
    you'll get an error。If you've ever worked in the C programming language。 you've
    got used to a function called S printf or Printf。This does basically that。 that
    percent D means print out a decimbel number。And then you do a parent percent sign。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候。如果a不是字符串，你通常需要在a周围加上STR。否则你会得到一个错误。如果你曾经在C语言中工作过。你会习惯一个叫做S printf或Printf的函数。这基本上就是这个意思。那个百分号D表示打印出一个十进制数字。然后你加一个百分号。
- en: And you pass in as many values as you made use of。Here we just have one。 so
    we print that out if statements。Python has， if statements， these are。These are
    quite useful to you， this also brings up one of the most hated features of Python
    for some people。 I used to be one of the haters， but now I somewhat like it。This
    is the fact that in Python。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以传入尽可能多的值。在这里我们只有一个。所以我们打印出if语句。Python有if语句，这些对你非常有用。这也引出了Python被某些人最讨厌的特性之一。我曾经是一个讨厌者，但现在我有点喜欢它。这就是在Python中。
- en: whitespace is syntax， whitespace affects how the programs run。So blockss， this
    if statement here。 everything that is indented。After that colon is part of that
    if statement。 so we could put in a second print statement if we wanted to， so
    long as we indented it properly。 it would be part of that if statement， the else
    works the same way if the if is not true then the else is executed。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 空白字符是语法，空白字符会影响程序的运行。所以块状结构，这里的if语句。所有缩进的部分。在冒号之后的都是该if语句的一部分。因此如果我们想，可以添加第二个打印语句，只要我们正确缩进即可。它将成为该if语句的一部分，else的工作方式相同，如果if条件不成立，那么就执行else。
- en: And this program will run and since five is not greater than five。 it's going
    to print out the second one Now you can use tabs。 you can use spaces you can use
    any white space you want for these blocks but be careful if you're using tabs
    and spaces boths because that's a recipe for frustration for both you and Python
    Python won't really be frustrated it'll just give you an error It's going to make
    your code very hard to manage if you're if you're using both of those if you're
    using tabs。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序会运行，因为五不大于五。它将打印出第二个。现在你可以使用制表符。你可以使用空格，可以使用任何你想要的空白字符用于这些块，但要小心，如果你同时使用制表符和空格，那对你和Python来说都是一种挫折。Python不会真正感到沮丧，只会给你一个错误。如果你同时使用这两者，代码将非常难以管理，如果你使用制表符。
- en: use tabs， if you're use spaces， use a consistent amount。 pick maybe two spaces
    or four spaces to represent that tab I typically use tabs。It's another great programming
    debate as far as should use tabs or spaces。And not likely to be solved anytime
    soon。 Different programmers prefer different ones for this class。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用制表符，如果你使用空格，保持一致的数量。可以选择两个空格或四个空格来表示制表符，我通常使用制表符。这是一个关于应该使用制表符还是空格的伟大编程辩论，可能在短期内不会得到解决。不同的程序员偏好不同的方式，适合这门课程。
- en: I don't care。 Use spaces， use tabs， use whatever you want so long as your code
    works。 Now。 we can also get into multiple levels。If a equals 5， then it's going
    to execute that block。 but notice the elf Elsive。That basically means almost as
    if。You had that。 but it's shorter to type that。 so else if a equals 6。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我不在乎。使用空格、制表符，或者任何你想要的，只要你的代码能工作。现在，我们也可以深入多个层次。如果a等于5，那么它将执行那个代码块。但注意到else
    if。这基本上意味着几乎就像你有那个，但输入更短，所以else if a等于6。
- en: this is kind of like a case statement in Python。So if a equals five and notice
    two。 you have those double equals in Python the programming language。 the double
    equal basically means that it is。Equal to single equal means an assignment。So
    here we'll count to nine in Python looks like we're counting to 10。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这在Python中有点像一个case语句。所以如果a等于5，注意两个。你在Python编程语言中有这两个等号，双等号基本上意味着它是。等于，单等号意味着赋值。所以在这里我们将计数到9，在Python中看起来像是我们在计数到10。
- en: that's a common source of confusion， we're using something called range。 this
    essentially means that we're looping from one up to but not including 10。By the
    way。 if you ever see X range。That's old Python 2。Thing for efficiencies。 Don't，
    don't worry about that。 We are using range。 If you see code with X range， you're
    dealing with an earlier version of Python and this will just print out the loop。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个常见的混淆来源，我们使用一种叫做range的东西。这基本上意味着我们从1循环到但不包括10。顺便说一下，如果你看到X range，那是旧版Python
    2的东西，出于效率考虑。不要，别担心这个。我们使用的是range。如果你看到带有X range的代码，你正在处理早期版本的Python，这将只是打印出循环。
- en: we're looping from one。Up to nine， you can also print numbers and strings together
    in these loops。 so here I'm creating an accumulator starting it out as zero。And
    we're going to loop for x in range1 to 10。The accumulator plus equals x， so we're
    accumulating。 we're adding x to it each time， and then we print out what we're
    adding and what the sum is so far。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在从1循环到9，你也可以在这些循环中打印数字和字符串。所以在这里我创建一个累加器，初始值为零。我们将对x进行从1到10的循环。累加器加上x，所以我们在累积，每次都在将x加上，然后我们打印出我们在添加的内容以及当前的和。
- en: If you run this program， it'll say adding one， so of course the sum is one。
    then two gets added so it gets。To three and six，  one， 10， 15， and so the series
    continues。![](img/ac1951e4692bfdf0941f1d0ef6d36dd9_3.png)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个程序，它会说添加1，所以当然和是1。然后添加2，它变成3，6，1，10，15，所以系列继续。![](img/ac1951e4692bfdf0941f1d0ef6d36dd9_3.png)
- en: It finally stops at 45。 Thank you for watching this video on the introduction
    to the Python programming language In the next video we will take a closer look
    at how lists and other data structures in Python are used。 This content changes
    often so subscribe to the channel to stay up to date on this course and other
    topics in artificial intelligence。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它最终停在45。感谢你观看这个关于Python编程语言介绍的视频。在下一个视频中，我们将更详细地了解Python中的列表和其他数据结构如何使用。这些内容经常变化，所以请订阅频道，以便跟上这个课程和其他人工智能主题的最新动态。
