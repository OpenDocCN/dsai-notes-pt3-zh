- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P6：6）Python字符串操作 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P6：6）Python字符串操作 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/09ef0dc5bcb480ff88b22238827c1783_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09ef0dc5bcb480ff88b22238827c1783_0.png)'
- en: Welcome back everyone， this is Brian， we're going to continue our journey on
    Python 3 and we're going to continue with basic string operations now。When I said
    strings are complex data types， I was not joking and there's no way we can cover
    everything in these little two videos。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎大家回来，我是布赖恩，我们将继续我们的Python 3之旅，现在要继续基本的字符串操作。当我说字符串是复杂的数据类型时，我并不是在开玩笑，而我们不可能在这两段小视频中涵盖所有内容。
- en: Especially because we haven't even covered the fundamental logic of programming。
    So we have to stick with the basics for now。 Don't worry， later on in the series。
    we are going to revisit some of the more advanced things we can do。 But right
    now。 you have to learn to crawl before you can walk。 So let's start crawling。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是因为我们甚至还没有涵盖编程的基本逻辑。因此，我们现在必须坚持基础知识。别担心，在系列的后面部分，我们会重新审视一些更高级的内容。但现在，你必须学会爬行，然后才能走路。所以，让我们开始爬行吧。
- en: I'm going to say variable STR is going to be。Hello world， this is a string。Very。
    very simple and we're going to start off with here。What we're going to do in this
    video is we're going to do things like getting the length of the string。 repeating
    the string， replacing characters and things of that nature。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我将说变量STR将是：“Hello world，这是一串字符。”非常，非常简单，我们就从这里开始。我们在这个视频中要做的事情是获取字符串的长度，重复字符串，替换字符等操作。
- en: and even slicing them and getting the specific indexes or positions within the
    string。![](img/09ef0dc5bcb480ff88b22238827c1783_2.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以切片并获取字符串中的特定索引或位置。![](img/09ef0dc5bcb480ff88b22238827c1783_2.png)
- en: '![](img/09ef0dc5bcb480ff88b22238827c1783_3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09ef0dc5bcb480ff88b22238827c1783_3.png)'
- en: Let's dive into the basic operations。 So first things first。Let's say we want
    to get the length。 I'm going to say print。 We're going to call the lens function，
    which is not limited to just strings。 but it is super， super handy for strings。And
    we are going to against it。 just print out a comment here。Get the length。When
    we run this。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入基本操作。因此，第一件事。假设我们想要获取长度。我将说“print”。我们将调用len函数，这不仅限于字符串，但它对字符串来说超级有用。我们将再次调用它，简单地打印一个注释，获取长度。当我们运行这个。
- en: we can see this is 30 characters long。 Now， you might be inclined to say in
    a wait a minute of zero based in。 so it's actually 29。 No， it actually gets the
    length。 not the position that's fundamentally different as you're going to see
    later on。So now that we've got the length， we can do other things as well。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这有30个字符。现在，你可能会倾向于说“等一下，这是基于零的，所以实际上是29。”不，这实际上获取的是长度，而不是位置，这在后面你会看到是根本不同的。因此，现在我们得到了长度，我们还可以做其他事情。
- en: let's say we want to repeat a string。 and this is going to hurt your brain just
    a little bit here。We've talked about how you cannot do mathematical operations
    with a string。 Remember。 we were trying to add an integer and a string together。
    Well。 you can do what's called string a math。 And this is what I mean by it's
    going to hurt your brain。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要重复一个字符串，这会让你大脑稍微痛一下。我们谈过字符串不能进行数学运算。记住吗？我们试图将一个整数和一个字符串相加。好吧，你可以进行所谓的字符串数学。这就是我所说的，它会让你的大脑受点刺激。
- en: We're going to say SR times 3。Now， I know what you're thinking。You're thinking
    you're going to get some sort of weird thing because you're trying to multiply。
    but actually what you're telling Python to do is take this string。And you guessed
    it。 multiply it by3 and return a giant string。 Let's demonstrate。Hello world，
    Hello world， Ho world。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将说SR乘以3。现在，我知道你在想什么。你在想你会得到某种奇怪的东西，因为你在尝试相乘。但实际上你告诉Python做的是取这个字符串。没错，乘以3并返回一个巨大的字符串。让我们演示一下。“Hello
    world，Hello world，Hello world。”
- en: So it did exactly what we thought it would do here。Yes， the first time I did
    that。 I kind of SAT back in my chair and went， wait， what is that right。 But it
    is actually a thing with Python。 If you're coming from another language。 you're
    probably sitting there just staring at your screen going， what which craft is
    this？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它确实完全按照我们的预期工作。是的，第一次我这样做的时候，我坐在椅子上，想，等等，这到底是什么。但这确实是Python的一个特性。如果你来自其他语言，你可能会呆呆地盯着屏幕，心想，这是什么巫术？
- en: But it's actually super handy if you need to repeat a string。Now let's go ahead
    and let's look at replacing。And if you're coming from another language， well。
    this is exactly what you think it is。 It's just dead， simple。So in Python， strings
    are a de type。 but they're also a first class object， meaning they have functions
    built right into them。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你需要重复一个字符串，这实际上非常方便。现在让我们看看替换。如果你来自其他语言，嗯，这正是你想的那样。它简单得令人发指。所以在 Python 中，字符串是一种数据类型，但它们也是一等对象，这意味着它们内置了函数。
- en: We haven't really covered functions yet。 but just know you can say your variable
    name dot and then call some code。 and we're going to call the replace function。And
    what this is going to do。It's going to take the string and replace a section of
    it。 So let's say I want to replace hello。With。Hla， so if you're from Mexico or
    Spain or any Spanish speaking country。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有真正讨论函数，但只需知道，你可以在变量名后加一个点，然后调用一些代码。我们将调用替换函数。这将会做什么呢？它将取出字符串并替换其中的一部分。比如说，我想把
    hello 替换为 Hla，所以如果你来自墨西哥、西班牙或任何讲西班牙语的国家。
- en: that would be the correct way of saying hellla was Holla。I'Pro mispronouncing
    that。 but you get the point。 you can simply replace it， so。Oah world， this is
    a string。 makes it super simple to do that。 You don't have to figure out where
    things are。You can also do something like split a string。 So if you're coming
    again from another language。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是正确的说法，hellla 是 Holla。我在发音上有点失误，但你明白我的意思。你可以简单地替换它，所以 Oah world，这是一个字符串。这样做非常简单。你不必弄清楚事物的位置。你也可以做类似分割字符串的操作。所以如果你来自其他语言。
- en: you've done this before。And I'm going to say SDR， I want to split。And notice
    how it's looking for a separator here。 So let's go ahead and split this on that
    comma。If you're not coming from another language， you're like， wait， wait， wait，
    slow down。 what is splitting， So we're going to take this string。And turn it into
    two strings。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前做过这个。我想说 SDR，我想要分割。注意它在寻找一个分隔符。所以让我们在那个逗号上分割。如果你不是来自其他语言，你可能会想，等等，等等，慢点。什么是分割？所以我们将把这个字符串转换为两个字符串。
- en: and we're looking for a separator value。 in this case， this comma right here。
    So it's going to say hello world。 and then this is a string。 and it's going to
    give us two strings back。Here we go。Hello world。 and this is a string now you
    may be going， now wait a minute， this comma is here。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在寻找一个分隔符值。在这种情况下，就是这里的逗号。所以它将说 hello world。然后这是一个字符串。它将返回两个字符串。好了。Hello world。现在你可能会想，等一下，这个逗号在这里。
- en: Look at these little brackets。 You got this in bracket， this beginning bracket。
    What it's done is it's created a data type we haven't talked about yet。 but we
    will in the next few videos， And it's put two strings into that data type and
    then handed it to us。 Very convenient way of saying， hey， split those up。As you
    go on programming。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这些小括号。你有这个括号，这是开始括号。它创建了一种我们还没有讨论过的数据类型，但我们将在接下来的几个视频中讨论。它把两个字符串放入那个数据类型中，然后交给我们。这是一种非常方便的方式，告诉我们，嘿，分开它们。当你继续编程时。
- en: you're going to actually use that quite a bit。Now。 let's say we want to know
    if this starts with something。 so must say SR。And I want to say。 starts with。Does
    it start with a letter H。I'm almost embarrassed to type that commentt starts with
    because it's pretty self explanatory what it's doing。 but just in case it's going
    to return a bull and it's going to tell us hey， yes。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上会经常用到这一点。现在，假设我们想知道这是否以某个东西开头。所以我想说 SR。我想说，以……开头。是否以字母 H 开头？我几乎不好意思输入这个，因为它显而易见，但以防万一，它将返回一个布尔值，并告诉我们，嘿，是的。
- en: it does If we switch this to like J Does it start with the J。Alttz。Very simple。
    handy way of determining what's going on。We can through the magic copy and paste。
    switch this to ends width。And let's say we want to make sure this ends with an
    exclamation。True。 true。 There we go。And。Let's go ahead and look at uppercase，
    lowercase and capitalization。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把这个改成 J，是否以 J 开头？非常简单。方便判断发生了什么。我们可以通过神奇的复制和粘贴，把它改成以 ends width 结尾。假设我们想确保它以感叹号结尾。真。真。好了。现在让我们看看大写、小写和首字母大写。
- en: we're just going to say print。And we want upper。It's going to give us hello
    world。 This is a string all in uppercase。 You notice how it's got these brackets
    here。 And that's because it is a function。 If we omit those。 we're going to get
    a built in upper of string object。 And then this number。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将说print。我们想要upper。它将给我们hello world。这是一个全大写的字符串。你注意到它有这些括号吗？那是因为这是一个函数。如果我们省略这些括号，我们将获得一个内置的字符串对象的upper。然后这个数字。
- en: You ever see something like this。 Basically， what you're trying to do is call
    a function without。It's brackets and you need those， you're wondering what this
    number is， that's a location in memory。 so an object is simply something that
    exists in memory and that's its location。So admittedly。 this message is not super
    helpful for beginners， but I just wanted to explain what that was。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你见过这样的东西吗？基本上，你想要做的就是在没有括号的情况下调用一个函数。你需要那些括号，你可能会想这个数字是什么，那是内存中的一个位置。因此，一个对象实际上就是在内存中存在的某样东西，而这就是它的位置。老实说，这条信息对于初学者来说并不是特别有帮助，但我只是想解释一下这是什么。
- en: roundund this out， let's say。Lower， and I want to capitalize。So now we have
    all uppercase。 all lowercase， and capitalize the way it should be。Let's take a
    look at slicing and when I first heard this term。 I actually had like this vision
    of whipping out a lightssaber and slicing something in half。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了补充这个，我们说lower，我想要capitalize。所以现在我们有了全大写、全小写，并且以正确的方式首字母大写。让我们看看切片，当我第一次听到这个术语时，我实际上有一种拿出光剑切东西一半的幻想。
- en: and it's actually not far off from what we're talking about。 we're talking about
    getting a sub string。Now， when I say a substr， remember。 this string is just a
    series of characters and each one is at a position， so the zero would be here。And
    then one and so on and so on and so on and so on。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这与我们所讨论的内容并没有太大区别。我们在谈论获取一个子字符串。现在，当我说substr时，请记住，这个字符串只是字符的序列，每个字符都有一个位置，所以零的位置在这里。然后是1，以此类推。
- en: So what we want to do is get a substr or a slice。 Think of it like you have
    a pie in front of you and you're going to get a slice of pie。 you're not taking
    the whole thing just apart。 So for example。 I can say I want the word world or
    I want just T H out of the word this or this specific space。 Or I wanted to get
    everything in the end up to that point。 You can do things like that very。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们想要做的是获取一个子字符串或切片。想象一下你面前有一个派，你要切一片，而不是把整个东西都拿走。所以例如，我可以说我想要单词“world”，或者我只想要这个单词“this”中的“T
    H”，或者我想获取到某个特定位置的所有内容。你可以这样做，非常简单。
- en: very rapidly in Python。And this， if you're coming from another language， I'm
    going to tell you。 is extremely cool once you wrap your head around it。So I're
    going to say print。And we're going to take our variable。 now we're going to put
    those brackets there。 that indicates we're getting a slice。The format here is
    very simple。 We want the start。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，这个过程非常迅速。如果你来自其他语言，我要告诉你，一旦你理解了它，这个非常酷。所以我会说print。我们将使用我们的变量。现在我们将添加这些括号，这表明我们正在获取一个切片。这里的格式非常简单。我们想要开始的位置。
- en: A colon and an inposition。So the start position in this case。 we're going to
    say the0 or the starting position。 and we're going to end in 5。 And what this
    is going to do is it's going to get the first five。This is a zero based index。
    Let's print this out and see what happens here。One， two， three， four。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个冒号和一个结束位置。在这种情况下，起始位置我们将说是0，或者说是起始位置，我们将结束在5。这将获取前五个字符。这是一个零基索引。让我们打印出来看看会发生什么。一，二，三，四。
- en: five hellello is five letters there we go， so it did exactly what we're trying
    to do here。Like I said， it looks a little confusing at first， but once you start
    wrapping your head around it。 it's not super hard。Now I want to start。At the sixth
    position， and I'm going to omit the ending。And what we're doing here is， we're
    saying。We want to get from the sixth position all the way to the end。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 五，hello是五个字母，好的，所以它确实完成了我们想要做的事情。正如我所说的，最开始看起来有点混乱，但一旦你开始理解它，就不是特别困难。现在我想从第六个位置开始，而我将省略结束位置。我们在这里所做的就是，我们希望从第六个位置一直获取到末尾。
- en: so when you emit something， it automatically defaults to the beginning or the
    end。 depending on which one you o。So the sixth position would be， you guessed
    it。World。 all the way over here。T works as expected。Let's go ahead and grab this
    and。Let's try something a little bit different。We're going to start at negative
    7。Now， you may be going。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当你发出某个东西时，它会自动默认到开始或结束，具体取决于你选择的哪个位置。所以第六个位置是你猜的。“世界”。就在这里。T按预期工作。让我们抓住这个，试试不同的东西。我们将从负7开始。现在，你可能在想。
- en: wait， what negative， how can we have a negative7。Well， when you have a negative。
    you actually start from the end。So because we're starting with a negative。 it's
    going to start back here and count backwards。Actually pretty cool how that works。
    so let's run this。And the last seven is string exclamation Prety pretty cool。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，什么负数，我们怎么会有负7。好吧，当你有负数时，实际上是从结尾开始的。所以因为我们是从负数开始的，它将从这里开始并向后计数。实际上这个工作方式挺酷的。让我们运行这个。最后的七是字符串感叹号，真是挺酷的。
- en: try doing that with some other languages and some are going to be very cool。
    some are just going to completely infuriate you depending on the language。And
    now let's get a substr， we're going to say from6 to 11。And we want to get。6 to
    11。 just for our notes here。See what that looks like and it is the world world。Very
    cool， very simple。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试用其他语言做这个，有些会很酷，有些则会让你完全恼火，具体取决于语言。现在让我们获取一个子串，我们要说从6到11。我们想得到。6到11。只是为了记录，看看那是什么样的，它是“世界”。非常酷，非常简单。
- en: very easy。Now， if you're coming from another language you're probably still
    stuck on this right here。 don't worry， whenever you see that negative symbol。
    just think you're starting from the end and working backwards。Now， slicing is
    cool and all。 but it's not super helpful unless you can actually automate the
    way of getting the number because no one wants to sit here and count things。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单。现在，如果你来自其他语言，可能仍然困惑于这一点。别担心，每当你看到那个负号时，只需想象你是从结尾开始向后工作。切片很酷，但除非你能自动获取数字，否则并不太有帮助，因为没有人想在这里数东西。
- en: right？So let's look at how to get the index or the position of something。What
    I'm going to do is I'm going to say L equals。And we're going to look for the comma。
    Now if we look at our original string， we've got this comma right here。 but we
    don't know the position it's at so I'm going to hide that off the screen and we
    just want to know hey。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧？所以让我们看看如何获取某个东西的索引或位置。我将说L等于。我们要找逗号。现在如果我们看看原始字符串，这里有个逗号，但我们不知道它的位置，所以我将把它隐藏在屏幕外，我们只想知道嘿。
- en: we want to look for this。We're going to do it two different ways。 We're going
    to say。C equals SDR find This is what I love about Python。 It's very。 very intuitive
    Fine does exactly what you think it would it finds something。 It's going to tell
    us what we're looking for is the L and it's going to tell us where it's at。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想寻找这个。我们将用两种不同的方法来做。我们将说。C等于SDR查找。这就是我喜欢Python的地方。它非常直观。Fine确实做了你认为它会做的事，它找到了一些东西。它会告诉我们我们要找的是L，并且会告诉我们它的位置。
- en: Or if it doesn't find it， when say negative one， if not bound。Let's go ahead
    and say print。And I want to say。Fine return。C。Let's run this， see what it does。So
    whoops。 actually misspelled fine there。 Ey fix。 So find return C。 So it is at
    the 11th position。 We didn't have to sit here and go 1，2，3，4。 And we'd be here
    all day doing that。 Instead。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到它，比如说负一，如果不绑定。我们来打印一下。我想说。好的，返回。C。让我们运行这个，看看它做了什么。哦，实际上“fine”拼错了。修正一下。所以找返回C。它在第11个位置。我们不需要在这里数1，2，3，4。否则我们会在这里呆一天。相反。
- en: we want the computer to do the work for us。 So we know this at the 11th position。
    Now we change this。To just something。Let's just do a single T。You see fine return
    negative one。 So in this case， when you see negative one， you can say it's just
    simply not there。 It's not going to return to 0 because remember，0 is the starting
    position。So。Findd is really。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望电脑为我们做这些工作。所以我们知道这是在第11个位置。现在我们把这个改成别的。我们就用一个T。你会看到找返回负一。所以在这种情况下，当你看到负一时，可以说它根本不存在。它不会返回到0，因为记住，0是起始位置。所以，Findd确实是。
- en: really cool， but if you're coming from another language， you're probably looking
    for index of。 which is something totally different。So I'm going to say I equal
    SDR index。We're going to give it the same thing， the L。And now we want to this。And
    we're going to say find return。Ay， and let's see what this does。 Now， remember。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 非常酷，但如果你来自另一种语言，你可能在寻找`index of`，那是完全不同的东西。所以我将说`i = SDR.index`。我们将给它相同的内容，`L`。现在我们想要这个。我们会说`find`返回。好吧，让我们看看这会做什么。现在，记得。
- en: we have this tea in here。Where is T in here， It's Well， right there， But it's
    a lower case。 not an uppercase。 So it should return a negative one， or will it
    actually， no， it does not。 Instead。 it gives you what's called a value error substr
    not found。This is a convenient way of saying， hey。 that must exist or throw an
    error。 something we're going to cover in future videos。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有这个`t`。这里的`t`在哪里？它就在这里，但它是小写的，而不是大写的。所以它应该返回负一，或者实际上，它不返回。相反，它给你一个叫做值错误的提示，`substr
    not found`。这是一种方便的方式来表示，嘿，那个必须存在，否则就会抛出错误。这是我们将在未来的视频中讨论的内容。
- en: Just know that find will not return an error。 and index will return an error。
    So most of the time you're going to want find。 But if you're coming from another
    language。 you think you want index and you really want find。S confusing。 Sometimes
    will， row and air。Just want to make sure we put that in there just in case。And
    let's switch this back。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只需知道`find`不会返回错误，而`index`会返回错误。所以大多数时候你会想用`find`。但如果你来自其他语言，你可能认为你想用`index`，其实你真的想用`find`。这很令人困惑。有时候会有行和错误。我们只是想确保将这一点写在这里以防万一。现在我们切换回去。
- en: And you can see they both return 11。Because we're looking for that comma， remember。
    index will throw an error fineablell just simply return a negative  one。Wrapping
    this up。 let's go ahead and say we want to create a new string from the substring，
    how do we do that？
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到它们都返回11。因为我们在寻找那个逗号，记得吗？`index`会抛出一个错误，而`find`只会简单地返回负一。总结一下，我们想要从子字符串创建一个新字符串，我们该怎么做？
- en: So we want to say x equals SDR。 and we're going to slice that string。We're going
    to o the starting position because we want to go from the beginning。 and we only
    want to go to the position of this comma。If that seems super confusing。 let's
    slow way down so we have a string。And it says， hellello world， this is a string
    exclamation。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们想说x等于`SDR`。我们要对这个字符串进行切片。我们要从起始位置开始，因为我们想从头开始，并且只想到这个逗号的位置。如果这看起来非常困惑，我们放慢速度。我们有一个字符串，内容是，`hellello
    world，这是一条字符串的感叹句`。
- en: So we're looking for this guy right here， which we found at the 11th position。And
    we're saying。 okay， so from the very start。Eello world actually just going to
    copy this whole thing right down here。Copy this， put it right here as a comment。There
    we go。So we're going to say from the very beginning right here。All the way up
    to the position we find。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在寻找这个字符，发现它在第11个位置。我们在说，好吧，从最开始。`Eello world`实际上是要把整个内容复制到这里。复制这个，把它作为注释放在这里。好了。我们将从这里开始，一直到我们找到的位置。
- en: we want to create a string and call it X。 Now， we want to take that and just
    simply print it out。Hello world， super， super simple。So quick recap。Stringings
    are first class objects in Python。 they are Unicode by default there UTF 8， although
    you can specify some other way of doing it。 Googles your friend if you need to
    do that immediately。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要创建一个字符串，称之为X。现在，我们想要取出这个字符串并打印出来。你好，世界，超级简单。快速回顾一下。在Python中，字符串是第一类对象。它们默认是Unicode，编码为UTF-8，虽然你可以指定其他方式。如果你需要立即这样做，谷歌是你的朋友。
- en: And you can do some really cool things like get the length， repeat it， replace
    it， split it。 make sure it starts with ends with upper lower capitalization。 You
    can slice it， dice it。 do whatever you want to do。 and you can search for or find
    things within the string。 And if you need to throw an error if it doesn't exist，
    you can use index。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做一些很酷的事情，比如获取长度、重复、替换、拆分。确保它以某个字符串开头或结尾，或者转换为大写或小写。你可以切片、切割，做你想做的任何事情。你还可以在字符串中搜索或查找内容。如果需要在不存在时抛出错误，你可以使用`index`。
- en: which I do not recommend because it's not really a good idea to throw an error
    in your code most of the time。 and you can create your own strings from substrs
    very simply very easily。😊。![](img/09ef0dc5bcb480ff88b22238827c1783_5.png)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我不推荐这样做，因为在大多数情况下抛出错误并不是一个好主意。你可以很简单地从子字符串创建自己的字符串。😊。![](img/09ef0dc5bcb480ff88b22238827c1783_5.png)
