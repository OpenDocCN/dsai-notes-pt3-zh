- en: 【双语字幕+资料下载】PyTorch 极简实战教程！全程代码讲解，在实践中掌握深度学习&搭建全pipeline！＜实战教程系列＞ - P9：L9- 数据集和数据加载器
    - 批量训练 - ShowMeAI - BV12m4y1S7ix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】PyTorch 极简实战教程！全程代码讲解，在实践中掌握深度学习&搭建全pipeline！＜实战教程系列＞ - P9：L9- 数据集和数据加载器
    - 批量训练 - ShowMeAI - BV12m4y1S7ix
- en: Hi， everybody。 Welcome back to a new Pytorch tutorial Today。 I want to show
    you the Pytorch data and data loader classes。 So far。 our code looked something
    like this， so we had a data set that we loaded somehow。 For example。 from a CV
    file。 and then we had our training loop that looped over the number of epochs
    and then we optimized our model based on the whole data set。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，欢迎回到新的Pytorch教程。今天，我想向你展示Pytorch的数据和数据加载器类。到目前为止，我们的代码看起来是这样的，我们有一个以某种方式加载的数据集。例如，从一个CSV文件。然后我们有一个训练循环，循环遍历时代的数量，然后我们基于整个数据集优化我们的模型。
- en: So this might be very time consuming if we did gradient calculations on the
    whole training data。 So a better way for large data sets is to divide the samples
    into so-called smaller batches。 and then our training loop looks something like
    this。😊，So we loop over the epochs again。 and then we do another loop and loop
    over all the batches。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们在整个训练数据上进行梯度计算，这可能非常耗时。因此，对于大数据集，一个更好的方法是将样本划分为所谓的小批量。然后我们的训练循环看起来大致是这样的😊，我们再次循环遍历时代，然后再进行另一个循环，遍历所有批量。
- en: and then we get the x and y batch samples and do the optimization based only
    on those batches。So now if we use the build in data set and data loader classes
    from Pytorch。 then Pytorch can do the batch calculations and iterations for us。
    so it's very easy to use。And now I want to show you how we can use these classes。
    but before we jump to the code。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们获取x和y批量样本，并仅基于这些批量进行优化。所以现在如果我们使用Pytorch内置的数据集和数据加载器类，那么Pytorch可以为我们进行批量计算和迭代，因此使用起来非常简单。现在我想向你展示我们如何使用这些类，但在跳到代码之前。
- en: let's quickly talk about some terms when we talk about batch training。So first。
    one epoch means one complete forward and backward pass of all the training samples。And
    one。 the batch size is the number of training samples in one forward and one backward
    pass。And the number of iterations is the number of passes where each pass uses
    the batch size number of samples。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速谈谈一些批量训练时的术语。所以首先，一个时代意味着对所有训练样本进行一次完整的前向和反向传递。而一个批量大小是指在一次前向和一次反向传递中的训练样本数量。迭代次数是指每次使用批量大小样本的传递次数。
- en: So here we have an example。 If we have 100 samples and our batch size is 20。
    then we have5 iterations for one epoch， because 100 divided by 20 is 5。So yeah。
    that's what we should know。 And now let's jump to the code。 So first。 I already
    implemented some modules that we need。 So torch， of course， then also torch vision。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里我们有一个例子。如果我们有100个样本，而我们的批量大小是20。那么我们对于一个时代有5次迭代，因为100除以20等于5。所以是的，这就是我们应该知道的。现在让我们跳到代码。所以首先，我已经实现了一些我们需要的模块。所以torch，当然，还有torch
    vision。
- en: And then from torch dot u the data。 We import data set and data loader。 So the
    classes I just talked about。 Then let's also import Ny and math。 And now we can
    start implementing our own custom data set。 So let's call this wine data set。![](img/c1a2854fc440d590a0a01b0cce4cb953_1.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从torch dot u导入数据。我们导入数据集和数据加载器。所以我刚刚提到的类。然后让我们也导入Ny和math。现在我们可以开始实现我们自己的自定义数据集。我们称这个为酒数据集。![](img/c1a2854fc440d590a0a01b0cce4cb953_1.png)
- en: '![](img/c1a2854fc440d590a0a01b0cce4cb953_2.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1a2854fc440d590a0a01b0cce4cb953_2.png)'
- en: And this must inherit data set。 And then we have to implement three things。
    So we have to implement the in it。AndWith self。 So here we do some data loading，
    for example。And then we also must implement the double underscore get item method，
    which gets self and an index。 So this will allow for indexing later。 so we can
    call data set with an index0， for example。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这必须继承数据集。然后我们需要实现三件事情。我们需要实现初始化方法。并且使用self。在这里我们进行一些数据加载，例如。然后我们还必须实现双下划线get
    item方法，它接收self和一个索引。这将允许以后进行索引，因此我们可以用索引0调用数据集，例如。
- en: And then we also must implement the lengthng method， which only has self。And
    then this will allow that we can call length of our data set。So now let's start。
    So in our case。 we want to look at the wine data set。 So I have the Cs we file
    here。 and I also put this in my Github repository so you can check it out here。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们还必须实现长度方法，它只有self。这将允许我们调用数据集的长度。那么现在让我们开始。在我们的案例中，我们想查看酒数据集。所以我这里有CSV文件，我也把它放在我的Github仓库中，你可以在这里查看。
- en: '![](img/c1a2854fc440d590a0a01b0cce4cb953_4.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1a2854fc440d590a0a01b0cce4cb953_4.png)'
- en: And so the data set looks like this。 So the first row is the header。And here
    we want to calculate or to predict the wine categories。 So we have three different
    wine categories，1，2， and 3。And the class label is in the very first column。 And
    then all the other columns are the features。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集看起来是这样的。所以第一行是标题。在这里我们希望计算或预测葡萄酒类别。我们有三种不同的葡萄酒类别，1，2和3。类别标签在第一列。然后所有其他列都是特征。
- en: So let's load this and split our columns into X and Y。 So here we can say X，
    Y equals Ny dot load T。 X， T。![](img/c1a2854fc440d590a0a01b0cce4cb953_6.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们加载这个并将我们的列拆分为X和Y。因此在这里我们可以说X，Y等于Ny dot load T。X，T。![](img/c1a2854fc440d590a0a01b0cce4cb953_6.png)
- en: And here I must specify the file name。 So this is in the data folder， and then
    I have a wine folder。 And then it's called wine dot csv。 Then let's also give
    a de limititer equals a comma here because this is a comma separated file。 Then
    let's also give it a data type。 So let's say data type equals nuy dot float through
    the2。 And let's also say skip rows equals one。 So we want to skip the first row。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我必须指定文件名。所以这是在数据文件夹中，然后我有一个葡萄酒文件夹。然后它叫做wine dot csv。接下来让我们给定一个分隔符，等于逗号，因为这是一个逗号分隔文件。接下来让我们也给它一个数据类型。因此我们假设数据类型等于nuy
    dot float64。然后让我们说跳过行等于一。因此我们希望跳过第一行。
- en: because this is our header。And now let's split our whole data set into x and
    y。 So we say self dot x equals。 And here we can use slicing。 So X， Y。 And we want
    to have all the samples。 And then we don't want the very first column。 So we want
    to start at at the column number one， and then go all the way to the end。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是我们的头部。现在让我们将整个数据集拆分为x和y。所以我们说self dot x等于。在这里我们可以使用切片。所以X，Y。我们希望获取所有样本。然后我们不想要第一列。所以我们希望从列号一开始，一直到最后。
- en: So this will give us the X。 and then self dot y equals X， Y of。And here again。
    we want all the samples， but only the very first column。 And we put this in another
    array here so that we have the size number of samples by one。 So this will make
    it easier later for some calculations。嗯。So， yeah。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们X。然后self dot y等于X，Y的。在这里我们再次希望获取所有样本，但只获取第一列。我们将其放入另一个数组中，以便我们有样本数量乘以一。这将使后面的某些计算更容易。嗯。所以，是的。
- en: and that's also convert this to a tenzo。 So we can say torch dot from Numpy
    and then give this to our our to the function here。 So torch dot from Ny。So， we
    don't。We do not need this， but we can do it。 We can also convert it later， but
    we can do it right here。 So let's do this。 And let's also get the number of samples。
    So let's say self dot number of samples equals X。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 并且这也将其转换为一个十组。因此，我们可以说使用Numpy的torch dot，然后将其传递给我们这里的函数。所以torch dot来自Numpy。我们不需要这个，但我们可以做到。我们也可以稍后转换，但我们可以在这里直接做。那么我们来做这个吧。并且让我们也获取样本数量。所以我们假设self
    dot样本数量等于X。
- en: Y dot shape。And then 0。 So the first dimension is the number of samples。And
    then we can return this right here。 And this is our whole length function。 So
    return self dot number of samples。 And here we can also implement this in one
    line。 So we can say return self dot X of this index and then self dot Y of this
    index。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Y dot shape。然后是0。因此第一维是样本数量。然后我们可以在这里返回。这是我们的整个长度函数。所以返回self dot样本数量。在这里我们也可以将其实现为一行。因此我们可以说返回self
    dot X的这个索引，然后self dot Y的这个索引。
- en: So this will return a tuple。And yeah， now we are done。 So this is our data set
    that we just implemented。 And now let's create this data set。 So let's say data
    set equals wine data set。And now let's have a look at this data set。 So now we
    can say first data。Equals data set。 And now we can use indexing。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这将返回一个元组。是的，现在我们完成了。这是我们刚刚实现的数据集。现在让我们创建这个数据集。所以我们假设数据集等于wine数据集。现在让我们看看这个数据集。因此现在我们可以说first
    data等于数据集。现在我们可以使用索引。
- en: So let's have a look at the very first sample。 And now let's unpack this into
    features and labels like this。 So this is first data。 And now let's print the
    features and also print the labels。To see if this is working。 And yeah， so we
    have one feature column or only one row。 So this is one row vector。 and then the
    label。 So the label  one in this case。And yeah。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看第一个样本。现在让我们将其拆分为特征和标签。这个是第一数据。现在让我们打印特征并打印标签，以查看是否有效。是的，我们有一列特征或仅一行。因此这是一个行向量。然后是标签。因此在这种情况下标签是1。是的。
- en: so this is how we get the data sets。 And now let's see how we use a data loader
    so we can say data loader equals the build in data loader class and then we pass。
    we say data set equals this data set。 and then we can also give this a batch size。
    So batch size equals， let's say4 in this case。 Then let's say shuffle equals true。
    which is very useful for training。so this will shuffle the data。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们获取数据集的方式。现在让我们看看如何使用数据加载器，所以我们可以说`data loader`等于内置的数据加载器类，然后传递。我们说数据集等于这个数据集。然后我们也可以给定批次大小。所以批次大小等于，假设在这种情况下为4。然后假设`shuffle`等于`true`，这对训练非常有用。这将对数据进行洗牌。
- en: And then we also say nu workers equals 2。 So you don't need to do this， but
    this might。Make loading faster because it's using multiple sub processessses now。And。Yeah。
    so now let's see how we can use this data loader object。 So now we can convert
    this to a iterate iterator。 So let's say data iter equals。Iter data loader。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们还说`nu workers`等于2。所以你不需要这样做，但这可能会使加载更快，因为现在使用了多个子进程。好的。现在让我们看看如何使用这个数据加载器对象。现在我们可以将其转换为迭代器。所以假设`data
    iter`等于`Iter data loader`。
- en: And then we can call the next function so we can say data equals data iter。Dot
    next。And then we can all again， unpack this by saying features and labels equals
    data。 And now let's print the features and the labels。 if to see if this is working。And
    yeah。 so here we have it。 And here in this case， I specify specified the batch
    size to 4。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以调用`next`函数，所以我们可以说`data`等于`data iter`。`Dot next`。然后我们再次解包，称为`features`和`labels`等于`data`。现在让我们打印特征和标签，看看是否有效。好的。在这种情况下，我指定了批次大小为4。
- en: This is why we see four different feature vectors here。 And then also for each
    feature vector the class。 So four class labels in our labels vector or labels
    tenor。And now we also can iterate over the whole data loader。 So and not only
    get the next item。 So now let's do a dummy training loop。So let's specify some
    hyperparmeter。 So let's say， nu epochs。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们看到四个不同特征向量的原因。然后对于每个特征向量，类标签。所以在我们的标签向量或标签张量中有四个类标签。现在我们也可以遍历整个数据加载器，而不仅仅是获取下一个项目。现在让我们进行一个虚拟训练循环。假设一些超参数。假设`nu
    epochs`。
- en: Equal epoch equals 2。 And then let's get the total number of samples。 So total
    samples equals L。Of our data set。And now let's get the number of iterations in
    one epoch。 So this is。The total number of samples divided by the batch size， So
    divided by 4。 And then we also have to。 to seal this。 So math seal。嗯。This， and
    now let's print our total samples and the number of iterations。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`epoch`等于2。然后我们获取总样本数量。总样本等于我们的数据集的L。现在让我们获取一个`epoch`中的迭代次数。这是总样本数除以批次大小，除以4。然后我们还需要进行取整。所以用`math
    seal`。嗯。现在让我们打印总样本和迭代次数。
- en: And then we see we have 178 samples and 45 iterations。 So now let's do our loop。
    So let's say for epoch in range number of epochs。 And now we do the second loop
    and loop over the train loader。 So let's say for I。 And here we can already unpack
    this by saying inputs and labels in enumerate。 And here we only put an the how
    did we call it。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们看到有178个样本和45次迭代。所以现在让我们开始循环。假设对于`epoch`在范围内的epoch数量。现在我们进行第二个循环，遍历训练加载器。假设对于`I`。在这里我们可以通过说`inputs`和`labels`在`enumerate`中解包。
- en: '![](img/c1a2854fc440d590a0a01b0cce4cb953_8.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1a2854fc440d590a0a01b0cce4cb953_8.png)'
- en: Data loader。So this is all we have to do， and。Now， this enumerate function will
    give us the index and then also。The inputs and the labels here， which is already
    unpacked。And now。 what we should do typically in our training is to do our forward
    and then our backward pass and then update our weights。 So this is just a dummy
    example。 So in this case， I only want to print some information about our batch
    that we have here。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据加载器。这就是我们需要做的所有事情。现在，这个`enumerate`函数将给我们索引，然后是`inputs`和已经解包的`labels`。在训练中，我们通常应该进行前向和反向传播，然后更新权重。这只是一个虚拟示例。在这种情况下，我只想打印一些关于我们这里的批次的信息。
- en: So let's say if。I plus 1 modo 5 equals equals0。 So every fifth step。 we want
    to print some information。 So let's print epoch。 And here， let's print the current
    epoch。And then all epochs。 So here， let's say nu epochs。 And then let's also print
    the current step。 So step。And this is I plus 1。And then the total steps。 So this
    is。And iterations here。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设如果`I + 1`模5等于0。那么每第五步，我们想打印一些信息。打印`epoch`。在这里，让我们打印当前的`epoch`。然后所有的`epoch`，假设`nu
    epochs`。然后我们也打印当前步骤。步骤为`I + 1`。然后是总步骤，这就是迭代次数。
- en: And then let's also print some information about our input。 So inputs。 And let's
    say here we want to print input dot shape only。And yeah。 now let's run this to
    see if this is working。And yeah， so here we see our print statements。 So we see
    that we have two epochs and in every epoch， we have 45 steps and every fifth step。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们也打印一些关于输入的信息。所以输入。假设我们想只打印 `input.shape`。好的，现在让我们运行一下，看看它是否正常工作。是的，我们在这里看到了打印语句。我们看到我们有两个轮次，每个轮次有
    45 步，每第五步我们打印一些信息。
- en: we print some information。And we also see that our Tenzoar is 4 by 13。 So we
    have our batch size is 4 and then 30 different features in each batch。And yeah。
    so that's how we use the。Data set and the data loader classes。 And then we can
    very easily get a single patch。Single bes。嗯，这样。Of course。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到我们的 Tensor 是 4 x 13。所以我们的批量大小是 4，每个批次有 30 个不同的特征。好的，这就是我们如何使用数据集和数据加载器类。然后我们可以非常轻松地获取一个单独的批次。单个批次。嗯，这样。当然。
- en: Pytorch also has some already built in data sets。 So， for example。 from torch
    Viion dot data sets dot。Amist， we get the famous Amist data set。 and for example。
    we can also get the fashion Ams data set or the scipher。And a data set or the
    coco data set。 And yeah， so the M this data is one that we will use in one of
    the next tutorials。 And for now。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch 还内置了一些数据集。因此，例如，从 `torchvision.datasets.AMNIST`，我们可以获取著名的 MNIST 数据集。我们还可以获取
    Fashion MNIST 数据集或 CIFAR 数据集，甚至是 COCO 数据集。是的，这个数据集是我们在接下来的教程中会使用的。现在。
- en: this is what I wanted to show you about the data and data loader classes。 I
    hope you liked it。 and please subscribe to the channel and see you next time，
    bye。![](img/c1a2854fc440d590a0a01b0cce4cb953_10.png)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我想向你展示的数据和数据加载器类。我希望你喜欢它，请订阅频道，下次见，再见！![](img/c1a2854fc440d590a0a01b0cce4cb953_10.png)
