- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëHugging FaceÈÄüÊàêÊåáÂçóÔºÅ‰∏ÄÈÅçÊêûÂÆöNLP‰ªªÂä°‰∏≠ÊúÄÂ∏∏Áî®ÁöÑÂäüËÉΩÊùøÂùóÔºúÂÆûÊàòÊïôÁ®ãÁ≥ªÂàóÔºû - P2ÔºöL2- PipelineÁÆ°ÈÅì -
    ShowMeAI - BV1cF411v7kC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inst pytorch or Tensofflow first„ÄÇ And then in order to install the Transers
    library„ÄÇ you just have to say Pip install transformers„ÄÇ or there's also a Conda
    installation command that you can find on the installation page„ÄÇ So let's install
    it like this„ÄÇ So I already did this„ÄÇ And then we can start using this„ÄÇ So we can
    say from transformers„ÄÇ and then we import a pipeline as first thing and have a
    look at this„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then we also import some utilities that we need from the Pytorch library„ÄÇ
    So we import torch„ÄÇ and we import torch dot N and functional S F„ÄÇ So we are going
    to use this later„ÄÇ And now we can start using this pipeline„ÄÇ So let's say classifier
    equals„ÄÇ And then we create a pipeline„ÄÇ And we need to specify the„ÄÇTask that we
    want„ÄÇ So in this case„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: we want to do sentiment analysis„ÄÇ So we have to call it like this„ÄÇ and you will
    find the different available tasks on the website„ÄÇ So here we can seeÔºå for example„ÄÇ
    we have this sentiment analysisÔºå which is just an alias of text classification„ÄÇ
    but for example„ÄÇ we also have a question answering pipeline or a text generation
    or a conversational pipeline„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So yeahÔºå this is how we can define a pipeline„ÄÇ And what a pipeline does is that
    it gives you a great and easy way to use model for inference„ÄÇ And it abstracts
    a lot of the things for you„ÄÇ So you will see what I mean in a moment„ÄÇ So now we
    can just use this classifier and classify some text by saying rest for results
    equals„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2024fcd457ee0c9f1e1c4d9510eb3b1_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/d2024fcd457ee0c9f1e1c4d9510eb3b1_2.png)'
  prefs: []
  type: TYPE_IMG
- en: And then we call this classifier and we want to classify a example text„ÄÇ So
    let me copy and paste some example text for you„ÄÇ So we want to classify„ÄÇ we are
    very happy to show you the smileyface transformers library„ÄÇ And then let's print
    the result and see how this looks like„ÄÇ So let's run the code„ÄÇ Alright„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and as you can seeÔºå we get the label is positive and the score is 0„ÄÇ99„ÄÇ So it's
    very confident that this is a positive sentence„ÄÇ And as you can see it only takes
    two lines of code with this pipeline to create a sentiment analysis code„ÄÇ So yeahÔºå
    this is exactly what we need so we need to see the label of the text if it's negative
    or positive„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and we also get the score„ÄÇ So yeahÔºå this is really nice„ÄÇ And now let's have
    a look at some more things that we can do with this pipeline„ÄÇ So first of all„ÄÇüòä„ÄÇCan
    put in more texts at onceÔºå so we can not just use oneÔºå so we can give it a list„ÄÇ
    So let's„ÄÇ for exampleÔºå use a list„ÄÇ and then let's use another example text„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So let me copy and paste this one in here as well„ÄÇ So we also want to classify
    this We hope you don't hate it„ÄÇ And then we get multiple results back„ÄÇ So let's
    call this result„ÄÇ and then we can iterate over this„ÄÇ So we can say four result
    in results„ÄÇ and then we want to print the result And now let's run this code and
    have a look at how this looks like„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: AlrightÔºå and as you can see for the second text„ÄÇ we get another result back„ÄÇ
    So here the label is negative„ÄÇ and the score is maybe not that confident in this
    case„ÄÇ So this text might be a little bit confusing„ÄÇ We hope you don't hate it„ÄÇ
    But basically this is how you can pass in„ÄÇMultiple texts at once„ÄÇ And nowÔºå so
    right now„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: we only use the default pipeline with the default model„ÄÇ But now let's have
    a look at how we can use a concrete model„ÄÇ And then also how we can use a concrete
    tokenizer„ÄÇ So what we can do is we can specify the model name and say model name
    equals„ÄÇ And in this case„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: I use dist bird base uncased and then fine tuneund SST to English„ÄÇ So I will
    show you where I got this string or this name in a moment„ÄÇ But for nowÔºå yeah„ÄÇ
    this is basically just a dist bird modelÔºå which is a smaller and faster version
    of bird„ÄÇ But it was pretrained on the same corpus„ÄÇ And then you see that it also
    was fine tuneund and this is just the name of the data„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So in this caseÔºå it's an English data from the„ÄÇStandford sentiment 3 bank version
    2„ÄÇ And yeah„ÄÇ so now if we have the model nameÔºå we can give this to our pipeline
    with the model argument„ÄÇ so we can say model equals and then we use this model
    name„ÄÇ So now in this case„ÄÇ I can tell you that the default model for the sentiment
    analysis task is already this model name„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So this should do exactly the same„ÄÇ But later we will switch this and then have
    a look at how we can use different models„ÄÇ So first of allÔºå let's run this again
    and see that this is still the same„ÄÇ Alright„ÄÇ so we see this is still the same
    result„ÄÇ So this worked„ÄÇ So now we just use this string to define our model„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: But now let's have a different approach to define a model and then also a tokenizer„ÄÇ
    So this will give us a little bit more flexibility later„ÄÇ So in order to„ÄÇüòäÔºåDo
    this„ÄÇ we want to say from transformers„ÄÇ and then here I import a auto tokenizer
    class and auto model for sequence classification„ÄÇ and this is just a generic class
    for a tokenizer and this is also a generic class„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: but a little bit more specifics„ÄÇ in this caseÔºå I want to have it for sequence
    classification„ÄÇ And then it will give me a little bit more functionality specifically
    for this task„ÄÇ So don't worry about this right nowÔºå you can also find all the
    model classes available in the documentation„ÄÇ So if you're interested then have
    a look at this„ÄÇ And also if you use Tensorflow„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: then here you have to say Tf and then the name of this class„ÄÇ but the rest is
    actually the same„ÄÇ So yeahÔºå this is how you use Tensorflow„ÄÇ And now after importing„ÄÇüòä„ÄÇWe
    can create two instances of this so we can do we can say model equals and then
    we use this class„ÄÇ so auto model for sequence classification and then we use a
    function that is called so let's say dot from pretrained and then it also needs
    the model name and we do the same with the tokenizer„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So we say tokenizer equals the auto to tokenizer dot from pretrained and then
    it needs the model name So this dot from pretrained function is a very important
    function in Haging phase that you will see a lot so you will see this later a
    few more times So now that we created this we can also just give the actual model
    and not just the string to the classifier„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: or to the pipeline so we can say our model equals our model and our tokenizer
    equals our tokenizer„ÄÇ So now if we run thisÔºå we should still get the same results
    because these are the default versions and yeah„ÄÇ as we seeÔºå we still get the same
    results„ÄÇ But then later if you want to use a different model or tokenizer„ÄÇ then
    you know how you can switch this„ÄÇ So just by using a different model and tokenizer
    here for the pipeline„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So now instead of using this pipeline„ÄÇ![](img/d2024fcd457ee0c9f1e1c4d9510eb3b1_4.png)
  prefs: []
  type: TYPE_NORMAL
