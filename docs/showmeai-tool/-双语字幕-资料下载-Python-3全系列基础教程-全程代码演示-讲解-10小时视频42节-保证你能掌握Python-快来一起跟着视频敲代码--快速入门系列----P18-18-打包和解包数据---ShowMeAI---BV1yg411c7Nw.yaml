- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P18：18）打包和解包数据 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P18：18）打包和解包数据 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/240c632cd8b2d72f9a74459a74dca582_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/240c632cd8b2d72f9a74459a74dca582_0.png)'
- en: Welcome back everyone， this is Brian， we're going to talk about packing and
    unpacking data。 now what are we really talking about here？Well， we have a problem
    with Arg and keyword Arg is that we cannot easily use lists。 sets， tuples and
    dictionaries， instead we have to pack and unpack the data and that's what this
    video is really going to dive into let's take a look。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，欢迎回来，我是布莱恩，我们要谈论打包和解包数据。现在我们到底在谈论什么呢？好吧，我们在 Arg 和关键字 Arg 的问题是我们无法轻松使用列表、集合、元组和字典，相反，我们必须打包和解包数据，这就是这段视频要深入探讨的内容，让我们看看。
- en: '![](img/240c632cd8b2d72f9a74459a74dca582_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/240c632cd8b2d72f9a74459a74dca582_2.png)'
- en: '![](img/240c632cd8b2d72f9a74459a74dca582_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/240c632cd8b2d72f9a74459a74dca582_3.png)'
- en: So let's look at packing data。 And this sounds like it's going to be super complex。
    but actually。 in the spirit of Python， it's super， super easy。 So I'm just going
    to make a function called pack。And we're going to make a parameter here， called
    nuns。This is a star a right here。 which means one or more variables。And in here，
    we're going to say， go ahead and print this out。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看打包数据。这听起来好像会非常复杂。但实际上，按照 Python 的精神，这非常非常简单。所以我只是要创建一个名为 pack 的函数。我们将在这里创建一个参数，叫做
    nuns。这是一个星号，意味着一个或多个变量。在这里，我们要说，继续打印出来。
- en: Just so we can see what we're actually getting。Now， let's go ahead and call
    this pack。 and I want to pack  one，2， and3。Let's see what's actually going on
    here。Sure enough。 it has made a topple。From here， we can very easily say or X
    in nus。And then do something like this。Get those individual numbers out of there
    and see exactly what's going on inside the tuple。 Super。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就能看到我们实际得到了什么。现在，让我们调用这个 pack。我想打包 1，2 和 3。看看这里实际发生了什么。果然，它创建了一个元组。从这里，我们可以很容易地说或
    X 在 nus 中。然后做类似的事情。将这些单独的数字取出来，看看元组内部到底发生了什么。超级。
- en: super simple to wrap your head around。 This works as expected。 However， there
    are some issues here。 And let's go ahead and take a look at how we would unpack
    the data。![](img/240c632cd8b2d72f9a74459a74dca582_5.png)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单，易于理解。这如预期般工作。然而，这里有一些问题。让我们看看如何解包数据。![](img/240c632cd8b2d72f9a74459a74dca582_5.png)
- en: '![](img/240c632cd8b2d72f9a74459a74dca582_6.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/240c632cd8b2d72f9a74459a74dca582_6.png)'
- en: Okay， packing data is well， simple， and we've done this before。But what if we
    try to do the opposite and unpack the data， What are we really talking about here。
    unpacking， So let's go ahead and make an example I say F unpack。 and let's give
    it three variables。 A， B and C。From here， I'm just going to print out。Unpack that
    way we can see what's going on。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，打包数据很好，简单，而且我们以前做过。但是如果我们尝试做相反的事情，解包数据，我们到底在谈论什么呢？解包，所以让我们做一个例子，我说 F 解包。并给它三个变量。A，B
    和 C。从这里开始，我将打印出来。解包，这样我们就能看到发生了什么。
- en: Follow by rent。And we could just grab those directly。Super simple。 probably
    the simplest function we'll ever write。Say BC and of course， line those up。U B
    and C。Just looking at that function， it's pretty straightforward， pretty obvious
    what's going to happen。 but now let's introduce a problem， I'm going to say。Numb。结个。😊，And
    I want to make a list of numbers。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 按租金跟随。我们可以直接抓取这些。超级简单。可能是我们写过的最简单的函数。说 BC，当然，把它们排列好。U B 和 C。看着这个函数，它相当直接，很明显会发生什么。但现在让我们引入一个问题，我要说。Numb。结个。😊，我想创建一个数字列表。
- en: 1，ma 2， comma 3。If we say unpack。And just give it our variable。What do you think
    is going to happen Well in telesc is already telling us there's going to be a
    problem here。 no value for argument， and it says， oh。See。😊，Missing two required
    optional sorry positional arguments B and C。Wait what？But I gave it a list， there's
    three elements in this list。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 1，ma 2，逗号 3。如果我们说解包。并只给它我们的变量。你认为会发生什么呢？在 telesc 中已经告诉我们这里会有问题。没有参数值，它说，哦。看。😊，缺少两个必需的可选位置参数
    B 和 C。等等，什么？但是我给了它一个列表，这个列表中有三个元素。
- en: what's really going on what's happening is we have to tell Python specifically
    take this list and unpack it and we do that just by adding a star right here。Let's
    try that again。 I'm going to clear this out。And now it magically works。So what
    we're driving home here is when you see this asterisk this little star。No matter
    what contest whether you're using AGs or keyword args。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上发生了什么，我们必须具体告诉Python取这个列表并解包，我们只需在这里加一个星号。我们再试一次。我将清空这个。现在它神奇地工作了。所以我们要强调的是，当你看到这个星号，不管在什么上下文中，无论你使用AGs还是关键字参数。
- en: or you're using it up here as a parameter or you're using it as an argument。Think
    of this as telling Python you're going to be packing or unpacking data and Python。
    I want you to take care of all the messy details so I don't have to。![](img/240c632cd8b2d72f9a74459a74dca582_8.png)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你在这里用作参数，或者你用作参数。把这看作是告诉Python你将要打包或解包数据，而Python。我要你处理所有麻烦的细节，这样我就不用了。![](img/240c632cd8b2d72f9a74459a74dca582_8.png)
- en: '![](img/240c632cd8b2d72f9a74459a74dca582_9.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/240c632cd8b2d72f9a74459a74dca582_9.png)'
- en: As with everything programming related， it's not that simple。 Let's look at
    another issue。 The dictionary issue。 Let's go ahead and make a dictionary some
    and say。B equals dictionary and must say name equals Ryan。Age equals 46。And。That
    equals cat。Feel free to put in whatever values you want， you just need a dictionary
    with three elements。Now。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有编程相关的事物一样，这并不简单。让我们看看另一个问题。字典问题。让我们创建一个字典，并说。B等于字典，并且必须说名称等于瑞安。年龄等于46。还有。它等于猫。随意输入你想要的任何值，只需要一个包含三个元素的字典。现在。
- en: let's go ahead and say print。M a packing dictionary。And let's go ahead and try
    to pack this。 So we're going to call our pack function。And。We're smart enough
    to know now that we need to put that asterisk there because we're going to tell
    Python you deal with the details and we're going to put our dictionary there。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打印一下。打包字典。接下来我们试着打包这个。所以我们将调用我们的打包函数。我们现在足够聪明，知道需要在这里放一个星号，因为我们要告诉Python你处理细节，我们将把字典放在那里。
- en: Go ahead and clear out our results down here and see what happens。Oh oh， we've
    got a problem。 It's only getting the keys。 It did get the keys successfully， but
    it's only getting the keys。 And remember our dictionary is a key value pair， so。That
    is frustrating。 Let's try the opposite。 Let's try to unpack that。And let's go
    ahead and say。Unpacking。Andy little function name right there。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 继续清理我们这里的结果，看看会发生什么。哦哦，我们遇到了问题。它只获取了键。确实成功获取了键，但它只是获取了键。记住我们的字典是一个键值对，所以。这很让人沮丧。让我们尝试相反的。让我们尝试解包它。接下来我们说。解包。安迪，那里有个小函数名。
- en: And run again， unpack， and again， ABC， it's only getting the keys。So you're
    absolutely right。 we have to do it a special way for dictionaries， let's take
    a look。Looking at the dictionary issue how it's only getting the keys， we have
    to treat the special。 so we are going to look at an example of how to pack a dictionary。Now。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行，解包，再次，ABC，它只是获取了键。所以你完全正确。我们必须以特殊的方式处理字典，让我们看看。看看字典的问题，它只获取了键，我们必须以特殊的方式处理它。所以我们将查看一个如何打包字典的例子。现在。
- en: when you say pack a dictionary， I get this image of putting a dictionary in
    your backpack and going off to school。 And that's kind of what we're doing here。
    So we're going to say define。Pack a dictionary。And let's go ahead and say， we
    want to do asterisk asterisks。Numbs notice the double asterisk asterisk stands
    for wild card。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你说打包字典时，我脑海中浮现出将字典放进书包去上学的画面。这正是我们在做的事情。所以我们要说定义。打包一个字典。接下来我们说，我们要使用星号。请注意，双星号代表通配符。
- en: so we're telling it we're going to get two things。 and if this looks eerily
    familiar。 it's because we're talking about you guessed it keyword as。A dictionary
    is nothing more than a key value pair。 So this is exactly what we're talking about。
    keyword it are。 Let's go ahead and say print。And let's actually print this out。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们告诉它我们将得到两个东西。如果这看起来有些熟悉，那是因为我们在谈论，你猜对了，关键字as。字典无非就是键值对。这正是我们在谈论的内容。关键字it。让我们打印一下。实际上把它打印出来。
- en: I want to see what we're being fed here from Python land。Nuns equals。 And then
    let's just print this out。Now， let's go ahead and call this。 and I want to say。Let's
    go ahead and feed it some arbitrary data。 Just make up whatever you want。 as long
    as you got three values， it doesn't really care。 I'm just going to say name Brian。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我想看看我们从Python世界得到的是什么。Nuns等于。然后让我们打印出来。现在，我们来调用这个。我想说。让我们给它一些任意的数据。随便编造你想要的，只要有三个值，它根本不在乎。我只是说名字是Brian。
- en: 8 equals 46。APa equal。Ats。Run this and sure enough numbs。Is equal to see these
    little squiggly lines。 a dictionary object。 So it's automatically。Done this for
    us basically under the hood what it's done is it's called the diict function and
    converted all those keyword arguments into a dictionary forest From here。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 8等于46。APa等于。Ats。运行这个，果然numbs。等于看这些小波浪线。一个字典对象。所以它自动。为我们完成了这件事，基本上在后台，它调用了diict函数，并将所有这些关键字参数转换为字典森林。
- en: it is ridiculously simple to work with， which is going to say print。F。And let's
    go ahead and say。At。And we want actually， we're going to do a or a loop instead
    of pulling these out one at a time。Or k。And。Nuns。Last minute， change of plans
    here。So there is our keyword。And then we want to say equals。And give it our key，
    there we go。Say Ron， let's see what this looks like sure enough。Pt name。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 处理起来简单得离谱，这就是要打印的内容。接下来我们要说的是。我们实际上想要的是，进行一次循环，而不是一个一个地取出这些元素。或者k。然后。最后一分钟，计划有变。所以这是我们的关键字。然后我们想说等于。并给它我们的键，来吧。说Ron，让我们看看这看起来怎么样，果然如此。Pt名称。
- en: age and pet works as expected as long as you have that double asterisk in there。
    you now have access to the entire object as a dictionary。Just to wrap this whole
    thing up。 let's do the polar opposite， we are now going to unpack a dictionary。So
    let's go ahead and say D EF。Unpack it。And boy， that's a funny name。 I'm probably
    going to get some flack in the comments about that one。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 只要里面有双星号，年龄和宠物按预期工作。你现在可以将整个对象作为字典访问。为了总结这一切。我们要做相反的事情，我们现在要解包一个字典。所以我们接下来要说D
    EF。解包它。哎呀，这是个有趣的名字。我可能会在评论中受到一些批评。
- en: but the name， age and pet， we're just going to stick with that and a little
    paradigm there。And let's go ahead and say print。We're going to unpack a dictionary
    object here。Let's go ahead and say print。And you guessed it， it is just ridiculously
    simple to do this。Do the magic copy and paste， I'm going to speed this up just
    to spin。All right， now to call this。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是名称、年龄和宠物，我们就继续使用这个以及一个小范式。接下来我们要说打印。我们要在这里解包一个字典对象。接下来我们要说打印。你猜对了，这真的是太简单了。做魔术复制粘贴，我将加速这一过程。好吧，现在来调用这个。
- en: Well。嗯。How would we actually go about calling this， We have a dictionary object
    out there。 So let's go ahead and reuse that dictionary object in case you're wondering
    it's this guy right here and I'll actually just grab him。And bring it right here。Just
    recreate the wheel。 It's already set， and I'm going to set it again。 just so you
    can see it on screen。And we're going to unpack that dictionary object。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。我们实际上该如何调用这个呢？我们有一个字典对象在那儿。所以我们要重新使用那个字典对象，顺便说一下，就是这个家伙，我将把它抓过来。就这样重新创造轮子。它已经设置好了，我将再次设置，以便你能在屏幕上看到。我们要解包那个字典对象。
- en: Because we're using a dictionary， we need the double asterisk telling it， hey。
    we are working under the hood with keyword as。And watch this thing in action。
    So it's going to create a dictionary。And then we are going to tell Python unpack
    this into these。See， Ta unpacking a dictionary named Brian age 46 at Cats。So this
    video。Well， seemingly simple。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在使用字典，我们需要双星号告诉它，嘿。我们在后台使用关键字作为。看看这个东西的运行效果。所以它会创建一个字典。然后我们要告诉Python将其解包。看看，将一个名为Brian、年龄46的字典解包成猫。所以这个视频。看似简单。
- en: we're actually doing a lot of work under the hood， I should say Python's doing
    all the work for us。 we are packing and unpacking data， we've given examples on
    how to pack and unpack list sets and tuples and how to pack and unpack dictionary
    objects and some of the issues that arise。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上在后台做了很多工作，我应该说Python为我们做了所有的工作。我们在打包和解包数据，我们已经给出了如何打包和解包列表、集合和元组的示例，以及如何打包和解包字典对象及其出现的一些问题。
- en: '![](img/240c632cd8b2d72f9a74459a74dca582_11.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/240c632cd8b2d72f9a74459a74dca582_11.png)'
