- en: 【双语字幕+资料下载】OpenCV 基础教程，安装、原理、实战， 3小时带你搞定这个热门计算机视觉工具库！＜实战教程系列＞ - P12：第9章：人脸检测
    - ShowMeAI - BV1zL411377L
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】OpenCV 基础教程，安装、原理、实战，3小时带你搞定这个热门计算机视觉工具库！＜实战教程系列＞ - P12：第9章：人脸检测
    - ShowMeAI - BV1zL411377L
- en: '![](img/ee7624d5ac788edf9da2d4cad266c30a_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee7624d5ac788edf9da2d4cad266c30a_0.png)'
- en: 。To detect phases， we are going to use a method proposed by Viola and Jones。This
    was one of the earliest methods that allowed real time object detection。So if
    we were to detect faces， we could collect lots of positives。 which will be the
    images of faces and we will also collect lot of negatives。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测阶段，我们将使用 Viola 和 Jones 提出的一个方法。这是最早允许实时物体检测的方法之一。因此，如果我们要检测人脸，我们可以收集大量的正样本，这些将是人脸的图像，同时我们也会收集大量的负样本。
- en: which will be the images of anything but faces。Using these negatives and positives。
    we will train and create a casket file that will help us find faces。In our case。
    we are not going to train the model， but instead we will use a pret file for faces
    which is provided by OpenC Now OpenC has provided some default cascades that can
    detect different things such as number plates。 eyes， full body， etc。If you want
    to learn more about creating custom cascades。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将是任何非人脸的图像。使用这些负样本和正样本。我们将训练并创建一个级联文件，这将帮助我们找到人脸。在我们的案例中，我们不会训练模型，而是使用 OpenC
    提供的预训练文件。现在 OpenC 提供了一些默认级联，可以检测不同的物体，如车牌、眼睛、全身等。如果你想了解更多关于创建自定义级联的信息。
- en: I have a separate video for that， which will be available in the description。![](img/ee7624d5ac788edf9da2d4cad266c30a_2.png)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个单独的视频，这将在描述中提供。![](img/ee7624d5ac788edf9da2d4cad266c30a_2.png)
- en: So we are importing the Lina image from the sources folder and we are displaying
    it using the IM show function。 So the first thing we will do is we will add our
    cascade。So we will write face cascade， face。Gas。 Kate。Is equals to C2 dots。Caascade
    classifier。 And then we have to write the name。Celes。Soer says。好。Bres。Sources，
    slash。Then we will write ha。Gass。Skate。Undersco frontal。Face。Underscore default
    dot X。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从源文件夹中导入 Lina 图像，并使用 IM show 函数显示它。因此，我们要做的第一件事是添加我们的级联。因此，我们将写 face cascade，face.Gas.Kate。等于
    C2.dot。Caascade classifier。然后我们必须写下名称。Celes。Soer says。好。Bres。Sources，slash。接下来我们将写
    ha。Gass。Skate。Undersco frontal。Face。Underscore default dot X。
- en: M， L。So let me check the spellings again， how。Ca。Gaiade。😔，And frontal face default。X
    M L。 so that looks fine。So next we are going to convert our image into grayscale，
    so image。Gray is equals to C2 dot CT color， and then image。 and then we have C2
    dot color RGB2 gray。Then we are going to find the faces in this image using our
    face cascade。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: M，L。因此让我再检查一下拼写，如何。Ca。Gaiade。😔，而 frontal face default。X M L 看起来不错。接下来，我们将把图像转换为灰度图像，因此
    image.Gray 等于 C2.dot CT color，接着是 image。然后我们使用 C2.dot color RGB2 gray。然后我们将使用人脸级联在此图像中找到人脸。
- en: so we will say the faces is equals to face。Cascade， dot detect。We will use multi
    scale and we will write image gray， and then we have to define the scale factor。
    We will put it as 1。1， and then we have to define the minimum neighbors， which
    we can put it as4。 So these parameters you can change based on the results you
    are getting。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们将说 faces 等于 face.Cascade，dot detect。我们将使用 multi scale，并写 image gray，然后我们必须定义缩放因子。我们将其设为
    1.1，然后我们必须定义最小邻居，我们可以设为 4。这些参数可以根据你获得的结果进行更改。
- en: So next we are going to create a bounding box around the faces that we have
    detected。 so we have to loop through all the faces that we have detected and put
    rectangles around them so we will write four we will directly get the parameters
    of our x Y and width and height。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在人脸周围创建一个边界框。因此，我们必须遍历所有已检测到的人脸，并在它们周围放置矩形，我们将直接获取 x、y 以及宽度和高度的参数。
- en: so these are the four parameters that you require to actually create the bounding
    box。 so we will write X y and then width and height。And then we will say， in faces。And
    then we will just draw the rectangle。Let's write it on the original image。 and
    then we will give it the initial points， So which are x and y。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这四个参数是你实际创建边界框所需的。因此我们将写 x、y 然后是宽度和高度。接着我们将说，在 faces 中。然后我们就画出矩形。让我们在原始图像上写它，然后给出初始点，即
    x 和 y。
- en: And then we have to define the corner points， the diagonal points， which would
    be x plus width and。Y plus height。Then we need to define the color。 So let's put
    it as blue。2，5，5 and 0， and。0。And then we will define a thickness。 Let's put it
    as2。So yeah， that's pretty much it。 So let's run it and see。 And there we go。
    So now we have detected the face and we have created a bounding box around it。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要定义角点，斜点，即 x 加上宽度和 y 加上高度。接着我们需要定义颜色。我们就用蓝色，2，5，5 和 0，0。然后我们将定义厚度。我们设为
    2。所以，差不多就是这样。让我们运行看看。好了，现在我们已经检测到人脸，并且为它创建了一个边界框。
- en: So if you want to detect more objects， there's a lot of cascades available online
    that people have trained already or you can create your own custom cascade to
    detect cars to detect mobile phones。 TVs anything you can think of you can detect
    using these cascade method Now this cascade method is not the most accurate one
    but it is fast so a lot of the cameras they also use these hard cascade methods
    to find the faces still even though it's quite an old algorithm but still it works
    and it works well in certain circumstances。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检测更多对象，网上有很多人已经训练好的级联可用，或者你可以创建自己的自定义级联来检测汽车、手机、电视，任何你能想到的东西都可以使用这些级联方法进行检测。现在，这种级联方法并不是最准确的，但它很快，因此很多摄像头也使用这些硬级联方法来寻找人脸，尽管这是一种相对较旧的算法，但在某些情况下仍然有效且表现良好。
- en: '![](img/ee7624d5ac788edf9da2d4cad266c30a_4.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee7624d5ac788edf9da2d4cad266c30a_4.png)'
