- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëPytorch ËøõÈò∂Â≠¶‰π†ËÆ≤Â∫ßÔºÅ14‰ΩçFacebookÂ∑•Á®ãÂ∏àÂ∏¶‰Ω†Ëß£ÈîÅ PyTorch ÁöÑÁîü‰∫ßÂ∫îÁî®‰∏éÊäÄÊúØÁªÜËäÇ ÔºúÂÆòÊñπÊïôÁ®ãÁ≥ªÂàóÔºû - P8ÔºöL8-
    TorchVision - ShowMeAI - BV1ZZ4y1U7dg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: üéº„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: Hi everyone and welcome to the 2020 P Georgeor Developer Day„ÄÇI'm Francisco Massa
    and I'm a researcher at Facebook AI„ÄÇI work in the Ptorrch team and I'm the maintainer
    of Torch Vision„ÄÇToday„ÄÇ I'll be talking about what TorteViion isÔºå how it can enable
    you to get started in computer Visual with Byytorch„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and the latest additions that have been introduced to TorVision over the last
    year„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_3.png)
  prefs: []
  type: TYPE_NORMAL
- en: The first question you might ask yourself isÔºå what a storage visionÔºü
  prefs: []
  type: TYPE_NORMAL
- en: Torch Vision is a library that is built to facilitate research and experimentation
    and computer vision„ÄÇIt extends Pytorch with functionality which is very specific
    and useful to computer vision„ÄÇ so that keeps the Pytorch library lean and focused
    on core different abstractions„ÄÇBut what is actually is there in our visionÔºå let's
    have a closer look„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: T Divisionion facilitates research and experimentation in computer vision by
    providing a number of building blocks that allows you to quickly start a new project
    end to end„ÄÇIt provides data setsÔºå common data sets for a number of mainstream
    vision tasks such as classification and object detection„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: It also has modelsÔºå we provide reference per models for classificationÔºå detectionÔºå
    and more„ÄÇTtVision also has stored print operators specific to computer vision
    models„ÄÇAnd data transformation operators to simplify creating data augmentation
    pipelines„ÄÇAdditionally„ÄÇ it contains primitives for efficient image and video reading
    and finally reference training scripts„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: which illustrates with a few files how it can train yourself the model to vision„ÄÇüòä„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_5.png)
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the building blocks that we provide„ÄÇOver the last year„ÄÇ we have been
    improving through our vision in order to simplify the path from research to production„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_7.png)
  prefs: []
  type: TYPE_NORMAL
- en: The way Pytororch enables the research production path is via Trot script„ÄÇ an
    intermediate representation of your Pytororch program that it can be exportable
    to run on C++ environments via the T script runtime„ÄÇThe core part of every deep
    learning pipeline resides on its models„ÄÇBy closely working with the Torch script
    and Onx teams„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: we have enabled all Tortvis models to natively support Trch script and OnX export„ÄÇThanks
    to the preed models and for visionionÔºå you can quickly build C+ classifications„ÄÇ
    leveraging the power of deep learning„ÄÇBut models are only part of the story when
    it comes to embedding your Python code into a C++ run time„ÄÇVery often you need
    to prepare the input data into a format that is compatible with the model„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: DVi used to rely on pillow for most of the data transformations„ÄÇ so moving your
    application C++ required re implementingpleing the transformations in a way which
    is compatible with C++„ÄÇNowÔºå Torch Vi transforms can directly work on Torch dance
    and it can be exported to Torch script„ÄÇ so you only need to implement the transforms
    once in Python„ÄÇFinally„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: T Divisionion now provides native IO functions for image and video decoding„ÄÇ
    enabling the full raw data to model production pipeline to be converted from Python
    to C++„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_9.png)
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a closer look at each one of those points„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_11.png)
  prefs: []
  type: TYPE_NORMAL
- en: All charger Vi models have native Trar script and Onx support so that exporting
    them to C+ can be done with a couple of lines of code„ÄÇAdditionallyÔºå mixeding precision
    training and inference is available for all models enabling having faster run
    time with lower memory footprint„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: üòäÔºåTort vision transforms have been a to inherit from N module and accepts torch
    tensors as input with torch cry compatibility„ÄÇThis brings several benefits to
    the data augmentation pipelineÔºå such as off the shelf GPU support„ÄÇ video use case
    enablementÔºå via efficient batch transformations of frames„ÄÇ and the possibility
    to export the transforms together with your model in C++ environment„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: TorchVision now provides imageÔºå reading and writing operators for JPEG and PNG
    formats with native TorchQ support„ÄÇYou can directly read local image path into
    a torch densesr„ÄÇ or alternatively decompose the operators into raw file reading„ÄÇ
    where only the bites of the file are read and returned as the U8 densesor and
    the cutting of the raw data into an image densesr„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to native charge food supportÔºå image decocoding can be embedded together
    with your model for an N to end export experience„ÄÇFinallyÔºå TVision provides a
    frame based video written API with support for both audio and video and Tr script
    compibility„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: The video reader is an iterator and can be combined with it tools for advanced
    video reading patterns such as reading the next10 frames after a specified timestamp
    or skipping every other frame of the video or reading all frames between two timestamps„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: This new video reader API is currently released as better and its API can change
    following user feedback„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_13.png)
  prefs: []
  type: TYPE_NORMAL
- en: We have some additional examples of the new functionalities and our in the examples
    followed on GitHub„ÄÇ where you can find notebooks for the Vi Read API as well as
    the transforms„ÄÇIn Tro vision„ÄÇ we welcome any contributions„ÄÇIf you find a bugÔºå
    have a request for an improvement or a new feature inclusion„ÄÇ let us know if via
    the issue tracker on the ToVision Github page or contribute via pull request„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: üéºI'd like to thank you for watching and I hope that Torch Vision can help you
    build great new applications leveraging by Torch„ÄÇ![](img/7c9cde7419cd5ccaaa7e02943dd416e4_15.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c9cde7419cd5ccaaa7e02943dd416e4_16.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/7c9cde7419cd5ccaaa7e02943dd416e4_17.png)'
  prefs: []
  type: TYPE_IMG
