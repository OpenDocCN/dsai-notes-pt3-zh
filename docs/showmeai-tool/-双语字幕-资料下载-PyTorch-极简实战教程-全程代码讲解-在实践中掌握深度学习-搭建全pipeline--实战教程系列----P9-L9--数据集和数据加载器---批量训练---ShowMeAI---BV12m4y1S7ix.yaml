- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëPyTorch ÊûÅÁÆÄÂÆûÊàòÊïôÁ®ãÔºÅÂÖ®Á®ã‰ª£Á†ÅËÆ≤Ëß£ÔºåÂú®ÂÆûË∑µ‰∏≠ÊéåÊè°Ê∑±Â∫¶Â≠¶‰π†&Êê≠Âª∫ÂÖ®pipelineÔºÅÔºúÂÆûÊàòÊïôÁ®ãÁ≥ªÂàóÔºû - P9ÔºöL9- Êï∞ÊçÆÈõÜÂíåÊï∞ÊçÆÂä†ËΩΩÂô®
    - ÊâπÈáèËÆ≠ÁªÉ - ShowMeAI - BV12m4y1S7ix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HiÔºå everybody„ÄÇ Welcome back to a new Pytorch tutorial Today„ÄÇ I want to show
    you the Pytorch data and data loader classes„ÄÇ So far„ÄÇ our code looked something
    like thisÔºå so we had a data set that we loaded somehow„ÄÇ For example„ÄÇ from a CV
    file„ÄÇ and then we had our training loop that looped over the number of epochs
    and then we optimized our model based on the whole data set„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So this might be very time consuming if we did gradient calculations on the
    whole training data„ÄÇ So a better way for large data sets is to divide the samples
    into so-called smaller batches„ÄÇ and then our training loop looks something like
    this„ÄÇüòäÔºåSo we loop over the epochs again„ÄÇ and then we do another loop and loop
    over all the batches„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and then we get the x and y batch samples and do the optimization based only
    on those batches„ÄÇSo now if we use the build in data set and data loader classes
    from Pytorch„ÄÇ then Pytorch can do the batch calculations and iterations for us„ÄÇ
    so it's very easy to use„ÄÇAnd now I want to show you how we can use these classes„ÄÇ
    but before we jump to the code„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: let's quickly talk about some terms when we talk about batch training„ÄÇSo first„ÄÇ
    one epoch means one complete forward and backward pass of all the training samples„ÄÇAnd
    one„ÄÇ the batch size is the number of training samples in one forward and one backward
    pass„ÄÇAnd the number of iterations is the number of passes where each pass uses
    the batch size number of samples„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So here we have an example„ÄÇ If we have 100 samples and our batch size is 20„ÄÇ
    then we have5 iterations for one epochÔºå because 100 divided by 20 is 5„ÄÇSo yeah„ÄÇ
    that's what we should know„ÄÇ And now let's jump to the code„ÄÇ So first„ÄÇ I already
    implemented some modules that we need„ÄÇ So torchÔºå of courseÔºå then also torch vision„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then from torch dot u the data„ÄÇ We import data set and data loader„ÄÇ So the
    classes I just talked about„ÄÇ Then let's also import Ny and math„ÄÇ And now we can
    start implementing our own custom data set„ÄÇ So let's call this wine data set„ÄÇ![](img/c1a2854fc440d590a0a01b0cce4cb953_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1a2854fc440d590a0a01b0cce4cb953_2.png)'
  prefs: []
  type: TYPE_IMG
- en: And this must inherit data set„ÄÇ And then we have to implement three things„ÄÇ
    So we have to implement the in it„ÄÇAndWith self„ÄÇ So here we do some data loadingÔºå
    for example„ÄÇAnd then we also must implement the double underscore get item methodÔºå
    which gets self and an index„ÄÇ So this will allow for indexing later„ÄÇ so we can
    call data set with an index0Ôºå for example„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then we also must implement the lengthng methodÔºå which only has self„ÄÇAnd
    then this will allow that we can call length of our data set„ÄÇSo now let's start„ÄÇ
    So in our case„ÄÇ we want to look at the wine data set„ÄÇ So I have the Cs we file
    here„ÄÇ and I also put this in my Github repository so you can check it out here„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1a2854fc440d590a0a01b0cce4cb953_4.png)'
  prefs: []
  type: TYPE_IMG
- en: And so the data set looks like this„ÄÇ So the first row is the header„ÄÇAnd here
    we want to calculate or to predict the wine categories„ÄÇ So we have three different
    wine categoriesÔºå1Ôºå2Ôºå and 3„ÄÇAnd the class label is in the very first column„ÄÇ And
    then all the other columns are the features„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So let's load this and split our columns into X and Y„ÄÇ So here we can say XÔºå
    Y equals Ny dot load T„ÄÇ XÔºå T„ÄÇ![](img/c1a2854fc440d590a0a01b0cce4cb953_6.png)
  prefs: []
  type: TYPE_NORMAL
- en: And here I must specify the file name„ÄÇ So this is in the data folderÔºå and then
    I have a wine folder„ÄÇ And then it's called wine dot csv„ÄÇ Then let's also give
    a de limititer equals a comma here because this is a comma separated file„ÄÇ Then
    let's also give it a data type„ÄÇ So let's say data type equals nuy dot float through
    the2„ÄÇ And let's also say skip rows equals one„ÄÇ So we want to skip the first row„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: because this is our header„ÄÇAnd now let's split our whole data set into x and
    y„ÄÇ So we say self dot x equals„ÄÇ And here we can use slicing„ÄÇ So XÔºå Y„ÄÇ And we want
    to have all the samples„ÄÇ And then we don't want the very first column„ÄÇ So we want
    to start at at the column number oneÔºå and then go all the way to the end„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So this will give us the X„ÄÇ and then self dot y equals XÔºå Y of„ÄÇAnd here again„ÄÇ
    we want all the samplesÔºå but only the very first column„ÄÇ And we put this in another
    array here so that we have the size number of samples by one„ÄÇ So this will make
    it easier later for some calculations„ÄÇÂóØ„ÄÇSoÔºå yeah„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and that's also convert this to a tenzo„ÄÇ So we can say torch dot from Numpy
    and then give this to our our to the function here„ÄÇ So torch dot from Ny„ÄÇSoÔºå we
    don't„ÄÇWe do not need thisÔºå but we can do it„ÄÇ We can also convert it laterÔºå but
    we can do it right here„ÄÇ So let's do this„ÄÇ And let's also get the number of samples„ÄÇ
    So let's say self dot number of samples equals X„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Y dot shape„ÄÇAnd then 0„ÄÇ So the first dimension is the number of samples„ÄÇAnd
    then we can return this right here„ÄÇ And this is our whole length function„ÄÇ So
    return self dot number of samples„ÄÇ And here we can also implement this in one
    line„ÄÇ So we can say return self dot X of this index and then self dot Y of this
    index„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So this will return a tuple„ÄÇAnd yeahÔºå now we are done„ÄÇ So this is our data set
    that we just implemented„ÄÇ And now let's create this data set„ÄÇ So let's say data
    set equals wine data set„ÄÇAnd now let's have a look at this data set„ÄÇ So now we
    can say first data„ÄÇEquals data set„ÄÇ And now we can use indexing„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So let's have a look at the very first sample„ÄÇ And now let's unpack this into
    features and labels like this„ÄÇ So this is first data„ÄÇ And now let's print the
    features and also print the labels„ÄÇTo see if this is working„ÄÇ And yeahÔºå so we
    have one feature column or only one row„ÄÇ So this is one row vector„ÄÇ and then the
    label„ÄÇ So the label  one in this case„ÄÇAnd yeah„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: so this is how we get the data sets„ÄÇ And now let's see how we use a data loader
    so we can say data loader equals the build in data loader class and then we pass„ÄÇ
    we say data set equals this data set„ÄÇ and then we can also give this a batch size„ÄÇ
    So batch size equalsÔºå let's say4 in this case„ÄÇ Then let's say shuffle equals true„ÄÇ
    which is very useful for training„ÄÇso this will shuffle the data„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then we also say nu workers equals 2„ÄÇ So you don't need to do thisÔºå but
    this might„ÄÇMake loading faster because it's using multiple sub processessses now„ÄÇAnd„ÄÇYeah„ÄÇ
    so now let's see how we can use this data loader object„ÄÇ So now we can convert
    this to a iterate iterator„ÄÇ So let's say data iter equals„ÄÇIter data loader„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then we can call the next function so we can say data equals data iter„ÄÇDot
    next„ÄÇAnd then we can all againÔºå unpack this by saying features and labels equals
    data„ÄÇ And now let's print the features and the labels„ÄÇ if to see if this is working„ÄÇAnd
    yeah„ÄÇ so here we have it„ÄÇ And here in this caseÔºå I specify specified the batch
    size to 4„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: This is why we see four different feature vectors here„ÄÇ And then also for each
    feature vector the class„ÄÇ So four class labels in our labels vector or labels
    tenor„ÄÇAnd now we also can iterate over the whole data loader„ÄÇ So and not only
    get the next item„ÄÇ So now let's do a dummy training loop„ÄÇSo let's specify some
    hyperparmeter„ÄÇ So let's sayÔºå nu epochs„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Equal epoch equals 2„ÄÇ And then let's get the total number of samples„ÄÇ So total
    samples equals L„ÄÇOf our data set„ÄÇAnd now let's get the number of iterations in
    one epoch„ÄÇ So this is„ÄÇThe total number of samples divided by the batch sizeÔºå So
    divided by 4„ÄÇ And then we also have to„ÄÇ to seal this„ÄÇ So math seal„ÄÇÂóØ„ÄÇThisÔºå and
    now let's print our total samples and the number of iterations„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then we see we have 178 samples and 45 iterations„ÄÇ So now let's do our loop„ÄÇ
    So let's say for epoch in range number of epochs„ÄÇ And now we do the second loop
    and loop over the train loader„ÄÇ So let's say for I„ÄÇ And here we can already unpack
    this by saying inputs and labels in enumerate„ÄÇ And here we only put an the how
    did we call it„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1a2854fc440d590a0a01b0cce4cb953_8.png)'
  prefs: []
  type: TYPE_IMG
- en: Data loader„ÄÇSo this is all we have to doÔºå and„ÄÇNowÔºå this enumerate function will
    give us the index and then also„ÄÇThe inputs and the labels hereÔºå which is already
    unpacked„ÄÇAnd now„ÄÇ what we should do typically in our training is to do our forward
    and then our backward pass and then update our weights„ÄÇ So this is just a dummy
    example„ÄÇ So in this caseÔºå I only want to print some information about our batch
    that we have here„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So let's say if„ÄÇI plus 1 modo 5 equals equals0„ÄÇ So every fifth step„ÄÇ we want
    to print some information„ÄÇ So let's print epoch„ÄÇ And hereÔºå let's print the current
    epoch„ÄÇAnd then all epochs„ÄÇ So hereÔºå let's say nu epochs„ÄÇ And then let's also print
    the current step„ÄÇ So step„ÄÇAnd this is I plus 1„ÄÇAnd then the total steps„ÄÇ So this
    is„ÄÇAnd iterations here„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then let's also print some information about our input„ÄÇ So inputs„ÄÇ And let's
    say here we want to print input dot shape only„ÄÇAnd yeah„ÄÇ now let's run this to
    see if this is working„ÄÇAnd yeahÔºå so here we see our print statements„ÄÇ So we see
    that we have two epochs and in every epochÔºå we have 45 steps and every fifth step„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: we print some information„ÄÇAnd we also see that our Tenzoar is 4 by 13„ÄÇ So we
    have our batch size is 4 and then 30 different features in each batch„ÄÇAnd yeah„ÄÇ
    so that's how we use the„ÄÇData set and the data loader classes„ÄÇ And then we can
    very easily get a single patch„ÄÇSingle bes„ÄÇÂóØÔºåËøôÊ†∑„ÄÇOf course„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Pytorch also has some already built in data sets„ÄÇ SoÔºå for example„ÄÇ from torch
    Viion dot data sets dot„ÄÇAmistÔºå we get the famous Amist data set„ÄÇ and for example„ÄÇ
    we can also get the fashion Ams data set or the scipher„ÄÇAnd a data set or the
    coco data set„ÄÇ And yeahÔºå so the M this data is one that we will use in one of
    the next tutorials„ÄÇ And for now„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: this is what I wanted to show you about the data and data loader classes„ÄÇ I
    hope you liked it„ÄÇ and please subscribe to the channel and see you next timeÔºå
    bye„ÄÇ![](img/c1a2854fc440d590a0a01b0cce4cb953_10.png)
  prefs: []
  type: TYPE_NORMAL
