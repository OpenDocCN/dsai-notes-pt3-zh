- en: 【双语字幕+资料下载】SQL常用知识点合辑——高效优雅的学习教程，复杂SQL剖析与最佳实践！＜快速入门系列＞ - P9：L9- WHERE 用法 - ShowMeAI
    - BV1Pu41117ku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/ff2e7e12377dd7f5a0561f67e97f91d5_0.png)'
  prefs: []
  type: TYPE_IMG
- en: 哦。In this tutorial we're going to look at the where clauses in SQL so earlier
    I told you that we use the where clauses to filter data。 for example， let's say
    we only want to get the customers with points greater than 3000。 so here in the
    word clause we can type out a condition like this。😊，Points greater than 3000。
    When we execute this query， the query execution engine in my skill is going to
    iterate over all the customers in the customer's table。
  prefs: []
  type: TYPE_NORMAL
- en: for each customer， is's going to evaluate this condition。 If this condition
    is true。 it will return that customer in the result set。 So let's go ahead and
    execute this。😊。And here is the result， as you can see， we have only two customers
    with points greater than 3000。 So this is what we call the greater than operator，
    which is one of the comparison operators in SQL。
  prefs: []
  type: TYPE_NORMAL
- en: Let me show you the complete list of comparison operators so。😊。We have greater
    than greater than or equal to， we have less than less than or equal to。 here's
    the equality operator and。For not equality。 we can use an exclamation followed
    by an equal sign or something like this。
  prefs: []
  type: TYPE_NORMAL
- en: So both these are not equal operators。 Let me show you a few examples of these
    operators So I'm going to delete all this and bring back the previous query。 Let's
    say we want to get only the customers in the state of Virginia。 So we can change
    our condition to something like this where state equals。Virginia note that I've
    put Virginia in quotes because this is what we call a string。
  prefs: []
  type: TYPE_NORMAL
- en: a string is a sequence of characters， so whenever you're dealing with a sequence
    of characters or basically textual data。 you need to enclose your values with
    either single or double quotes but quite often by convention we use single quotes。So
    let's execute this query。😊，And here's the result。 you can see we only have these
    two customers with ID1 and 2 who are located in Virginia。
  prefs: []
  type: TYPE_NORMAL
- en: And it doesn't matter if we use uppercase or lowercase characters。 so if we
    type out VA in lowercase and execute the query， we get the exact same result。Now。
    what if we want to get all the customers outside of the state of Virginia。 we
    can use the not equal operator so we can either prefix this with an exclamation。😊，Or
    use。
  prefs: []
  type: TYPE_NORMAL
- en: This utter notation。Either way， we get the same result。So these are the customers
    that are not located in Virginia。Now we can use these comparison operators with
    date values as well。 For example。 let's say we want to get only the customers
    born after January 11990。
  prefs: []
  type: TYPE_NORMAL
- en: so we change our condition2 birth date greater than once again we use quotes
    for representing date values。 even though dates are actually not strings， but
    in the SQL language we should enclose dates with quote So here we type out 1990
    dash01 for January dash01 for day。
  prefs: []
  type: TYPE_NORMAL
- en: So this is the standard or the default format for representing dates in MyqL4
    digits for the year。2 digits for the month and two digits for the day。So let's
    go ahead and execute this query。 I actually made a mistake here。 so we don't see
    the result Instead we see the action output or the output window。 If you scroll
    to the bottom， you can see the details of the error。
  prefs: []
  type: TYPE_NORMAL
- en: So here I use the wrong name for the column。😊，We should separate these two words
    with an underscored。 That is the name of our column。 So let's execute the query
    one more time。 So we only have three customers born after January 11990。 So these
    were examples of comparison operators in SQL in the next tutorial I'm going to
    show you how to combine multiple conditions when filtering data。
  prefs: []
  type: TYPE_NORMAL
- en: All right， here's your exercise， I want you to write a query to get the orders
    that are placed this year。 so look at the orders table， see what columns do we
    have there and based on that write to query with a where clause。😊，So here's the
    orders table in this table we have this column order date。 we can use this column
    to see the orders that are placed this year， so here's our query。
  prefs: []
  type: TYPE_NORMAL
- en: select star from orders where order unalign date is greater than or equal to
    January 1t。 2019 assuming this is the current year， so 201901，01。😊，Now， since
    currently we are in the year 2019。 this query will return all the orders placed
    this year。 but next year this query is not going to give us the right result。
  prefs: []
  type: TYPE_NORMAL
- en: but don't worry about it later in the course， I will show you how to write a
    query to get the orders placed in the current year。 So for the purpose of this
    exercise， this is a valid solution。 Now let's execute this query and see what
    we get。😊，So we have only one order。 order ID one that is placed in the current
    year。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff2e7e12377dd7f5a0561f67e97f91d5_2.png)'
  prefs: []
  type: TYPE_IMG
- en: Oh。![](img/ff2e7e12377dd7f5a0561f67e97f91d5_4.png)
  prefs: []
  type: TYPE_NORMAL
- en: 哦。
  prefs: []
  type: TYPE_NORMAL
