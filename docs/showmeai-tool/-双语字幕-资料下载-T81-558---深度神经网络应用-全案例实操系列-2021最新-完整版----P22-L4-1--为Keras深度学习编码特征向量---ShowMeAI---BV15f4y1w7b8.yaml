- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëT81-558 ÔΩú Ê∑±Â∫¶Á•ûÁªèÁΩëÁªúÂ∫îÁî®-ÂÖ®Ê°à‰æãÂÆûÊìçÁ≥ªÂàó(2021ÊúÄÊñ∞¬∑ÂÆåÊï¥Áâà) - P22ÔºöL4.1- ‰∏∫KerasÊ∑±Â∫¶Â≠¶‰π†ÁºñÁ†ÅÁâπÂæÅÂêëÈáè
    - ShowMeAI - BV15f4y1w7b8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HiÔºå this is Jeff HeatonÔºå welcomecome to applications of Deep neural Network
    with Washington University„ÄÇIn this videoÔºå we're going to begin looking at tabular
    data„ÄÇThis is data that is not a computer image or audio or any really complicated
    data input that deep neural networks are particularly known for„ÄÇ rather this is
    data that looks like something coming from Microsoft Excel where you've got columns
    and rows and you're going to try to predict one of those columns based on the
    others„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: To put data like that into a deep neural networkÔºå usually each row is one input
    or one set of inputs to the input neurons of that neural network„ÄÇThe set of all
    of those numbers coming into the neural networkÔºå one row is called a feature vector„ÄÇAll
    data that comes into the neural network needs to be a numeric form„ÄÇ In this video„ÄÇ
    we're going to see how to build that feature vector for the latest on my AI course
    and projects„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: click subscribe and the bell next to it to be notified of every new video„ÄÇ For
    this example„ÄÇ we're going to see how to encode a feature vector„ÄÇ We're going to
    use the simple data set that we've seen before„ÄÇüòä„ÄÇ![](img/04abe3c48902ea74356b7dd00d915cc9_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: I'll run thatÔºå and it shows you basically„ÄÇThis the makeup of this of this data
    set„ÄÇ we've already talked about this one beforeÔºå but just quickly„ÄÇ it has some
    categoricals like job and area„ÄÇ So those need to go into dummy variables and the
    value that you're trying to predict is for each of these individuals„ÄÇ what product
    did they buyÔºå ABC or D„ÄÇThink it goes up to D„ÄÇNow„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: with this data set to make it for a neural networkÔºå there's some things you
    need to consider„ÄÇ So the column that you seekÔºå at least if you're doing classificationÔºå
    is the product„ÄÇ there's an ID column which we have here„ÄÇ That's not useful to
    you„ÄÇ so you're going to get rid of that one„ÄÇAnd then many of these fields are
    numeric and may not need further processing„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: But we'll see that's not entirely trueÔºå a neural network„ÄÇ2 things you can do
    to numeric values that will really help the neural network„ÄÇ One is put them in
    consistent ranges„ÄÇ The fact that income that is in a much bigger range„ÄÇ tens of
    thousands„ÄÇVersus ageÔºå which is under 100 that hurts the predictive power of the
    neural network„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: so getting those into consistent ranges will definitely help„ÄÇI'll show you an
    example of that in a later video where we adjust just that and the predictiveor
    power goes up considerably„ÄÇThe other thing you can do is center these about zero„ÄÇNow„ÄÇ
    centering them about zero doesn't help as much as the rangeÔºå but it is useful
    to the neural network„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: There you want to have some negative values and some positive values preferably
    about the same number of negative values as you do positive„ÄÇ so it's centered
    about 0„ÄÇA quick way to do both of these is to use a Z score and encode those to
    the Z score because the z score is plus or minus the standard deviations from
    the mean„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So we'll go ahead and calculate the dummy variables for say job„ÄÇWhen we run
    this„ÄÇ we can see that we get all the dummies coming out here„ÄÇ each each row is
    one„ÄÇSet of dummy variables„ÄÇ so you have 2000 rowsÔºå a 2000 rows in that original
    data set and 33 dummies because each of those„ÄÇThe job had 33 different job types„ÄÇThe
    next thing you're going to want to do is merge that into the dataset set so that
    you have a data set with those dummy variables in there„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: we're also going to drop the job column„ÄÇ Aes one in both of these pieces were
    dealing with columns„ÄÇAnd there you can see the dummy variables added to this„ÄÇ
    see where it's nice that we had job under bar in front of it is that prefix specified
    specified right here„ÄÇWithout thatÔºå we would have just PQÔºå PE just merged right
    into the data set„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and it would be very hard to keep track that those actually came from the job„ÄÇWe
    put area in by similar means now we have both job and area„ÄÇ so this is great that
    we have that prefix area and job„ÄÇOtherwise„ÄÇ those two would kind of blend together
    a bit„ÄÇIncomeÔºå we do have some missing values for income„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: so we're going to extract the median from income and put that in to the missing
    values„ÄÇSo now we have complete values for income„ÄÇ NowÔºå ideally you would probably
    not„ÄÇ you'd probably want to get a little fancier with this and have multiple medians„ÄÇ
    maybe you would break the age this income probably correlates to age„ÄÇAnd you would„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Break the age into multiple bands„ÄÇ You would calculate the median for each of
    those bands„ÄÇ and then put„ÄÇIntelligently choose a medium value to fill in the missing
    values„ÄÇWhere you were using that band to pick it„ÄÇThat gives you a more meaningful„ÄÇMissing
    value„ÄÇWe can see that we have all of the columns in the data frame„ÄÇAnd we can
    now get our X columns„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: We do that by getting the same columns that we had up here„ÄÇ But we're going
    to drop product because productsÔºå what we're trying to predict„ÄÇ Two problems with
    including product„ÄÇ One isÔºå if that's truly what you're trying to predictÔºå then„ÄÇThat
    would be target leakÔºå and it would be trivial for your neural network to predict
    it„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: You'd probably get a perfect score on your neural networkÔºå perfect score from
    the neural network„ÄÇ not a perfect score for me because you would be producing
    a useless neural network„ÄÇIf you're trying to predict which product the person
    bought and you also tell the neural network which product the person bought„ÄÇ that's
    targetrget leak and„ÄÇThe neural network can do that perfectly because you've told
    it the answer already„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And you want to drop ID because ID is just numerically increasing valueÔºå and
    it's not that useful„ÄÇSo here's the final set„ÄÇOf the names of the individual values
    that go into the feature vector for x„ÄÇNow we need to convert it into a lumpumpy
    array because neural networks like numeric values to come in„ÄÇWe just put in that
    same„ÄÇX columns calculation that we do there„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: We get the actual lumpy matrix for x so that we have a number of rows equal
    to the size of the data set and a number of columns equal to size of the feature
    vector„ÄÇWe're going to convert the product into dummiesÔºå and that's going to become
    the Y„ÄÇWe keep a list of the actual textual values of the productsÔºå product ABC„ÄÇ
    since there's only one categoricalÔºå one set of dummies„ÄÇ We don't put a prefix
    on this„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So we don't do products AÔºå products B and so on„ÄÇ Then we get the matrix that
    is the y values„ÄÇ So that is going to be a number of rows equal to the size of
    the data set and number of columns equal to the products that we're classifying„ÄÇWe
    run this„ÄÇAnd we run this so that we can see X and Y„ÄÇX is very numeric„ÄÇ that's
    just what the neural network likesÔºå and Y you can see is definitely dummy variables„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And that is how you calculate the x and Y for a classification neural network„ÄÇ
    make sure that for the classification neural networkÔºå you're using categorical
    cross entropy„ÄÇAnd a softm function„ÄÇ NowÔºå there's only two categories„ÄÇ that's kind
    of a special case„ÄÇ and we'll see that„ÄÇIn a later video for this module„ÄÇThat you'd
    use a binary„ÄÇType loss function„ÄÇNow„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: if„ÄÇYou are dealing with a regression„ÄÇX and Y„ÄÇ then you would make Y be the income
    values„ÄÇ and you would make X be„ÄÇJust like it was previously„ÄÇ So you'd make sure
    that you were calculating„ÄÇThe actual values for income and not making that dummy
    variables„ÄÇ So it's not really a matrix„ÄÇ It'd be kind of a„ÄÇA large column matrix
    where you have one column and one row for every single value in the data set„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: NowÔºå also with incomeÔºå if that were the targetÔºå be careful because some of the
    income values are missing„ÄÇ usually if the column is your target and you have missing
    values in your target„ÄÇ often you drop those rows for training because you don't
    necessarily want to be training on these in on these median incomes that you„ÄÇThat
    you estimated for it„ÄÇ Thank you for watching this video on feature vector creation„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a feature vector„ÄÇ The next part is going to show you how to
    actually form a neural network around that„ÄÇ train it and produce a prediction„ÄÇ
    This content changes often„ÄÇ So subscribe to the channel to stay up to date on
    this course and other topics and artificial intelligence„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04abe3c48902ea74356b7dd00d915cc9_3.png)'
  prefs: []
  type: TYPE_IMG
