- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P10：10）Python字典：键值对与索引 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P10：10）Python字典：键值对与索引 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/50bb6b5301b650cc2149f5090f089eae_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50bb6b5301b650cc2149f5090f089eae_0.png)'
- en: Hello again， everyone。 This is Brian。 And in this video。 we're going to cover
    the dictionary in Python 3。 So what is a dictionary。 It's a key value pair More
    appropriately， it is a list that's indexed by keys。 If you want to be really specific。
    you notice the brackets。 This is actually a set indexed by keys。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，我是布赖恩。在这个视频中，我们将讨论 Python 3 中的字典。那么什么是字典呢？它是一个键值对，更确切地说，它是一个由键索引的列表。如果你想更具体一点。你注意到括号了吗？这实际上是一个由键索引的集合。
- en: 😊，Which can be any immutable type， what does that mean any immutable type means
    unchangeable？
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 😊，这可以是任何不可变类型，这意味着任何不可变类型意味着不可更改？
- en: So let's take a look and let's see what it takes to create and work with a dictionary。Let's
    take a look and see what it really takes to create a dictionary。 We're going to
    do this two different ways。 We're going to do it the hard way and the easy way。
    First， let's do it the hard way。 I must say D equals。 We've got our brackets。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们来看看，创建和使用字典需要什么。让我们看看实际创建字典需要什么。我们将用两种不同的方法来完成这个。我们将用困难的方法和简单的方法。首先，我们先用困难的方法。我必须说
    D 等于。我们有了我们的括号。
- en: We need a key value pair。 So let's create the key。He is going to be the string
    pet。Polen。 and now we need a value。 Let's say， dog。That's it。 That's really all
    there is to it。 Now。 if we want to make another one， we just separate it by a
    comma。Now we need a key。 and let's call this age。B is going to be five。Let's go
    ahead and make another one。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个键值对。所以让我们创建这个键。它将是字符串 pet。Polen。现在我们需要一个值。我们说，狗。就这样。这就是所有内容。现在，如果我们想再创建一个，我们只需用逗号分开。现在我们需要一个键。我们称这个为
    age。B 将是五。让我们再创建一个。
- en: let's call it name。And its value is going to be spot。 I'm always bad at picking
    pet names。Then print out the dictionary in all of its glory。There it is。Pet dog，
    age 5， name spot。Now。 let's do it the easy way。 I'm going to say D equals， and
    we're going to call the diic function。Bunny names。 sayy that real loud in class
    and watch everybody just kind of look at you。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称它为 name。它的值将是 spot。我总是很难为宠物取名。然后将字典完整打印出来。看，这就是它。宠物狗，年龄 5，名字 spot。现在，让我们用简单的方法来做。我将说
    D 等于，我们将调用 diic 函数。兔子名字。在课堂上大声说出来，看看大家的反应。
- en: But we're gonna say pet equals。Dog。Age equals。5ve。And name spot。 So what's really
    going on here is it's doing all this formatting for you。 That's why I call it
    the easy way。The end result。However， is exactly the same。They are exactly the
    same， doesn't matter which way you create it。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们将说 pet 等于。狗。年龄等于。5，名字 spot。所以这里真正发生的事情是它为你做了所有这些格式化。这就是我称之为简单的方法。最终结果。然而，完全相同。它们是完全相同的，无论你以哪种方式创建它。
- en: Just under the hood know that you have to have a key value pair， for example，
    pet dog H5 name spot。Let's take a look at the keys and values and how we get at
    them。 There's a third type really。 and it's called items。 We're going to work
    with that one first。 so we're going to say print。And we go F。Items。And we're going
    to call the dictionary It function。Save run。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 只要知道，你必须有一个键值对，例如，pet dog H5 name spot。让我们看看键和值，以及我们如何获取它们。实际上还有第三种类型，它叫 items。我们将首先处理这个。所以我们将说
    print。然后我们调用 F。Items。我们将调用字典的 It 函数。保存并运行。
- en: And this is going to return a di underscore items， which you guessed it。 Look
    at this thing。 This is insane。 So we have a tuple containing a list containing
    tuples。But what it's really done is it's packaged it into individual items so
    you can very distinctly see the key value pairs。Not abundantly useful for us，
    what we really worry about are well， the keys and the items。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个 di underscore items，正如你所猜的那样。看看这个东西。这太疯狂了。所以我们有一个包含元组的列表。但它真正做的是将其打包成单独的项目，以便你可以非常清楚地看到键值对。对我们来说并不是非常有用，我们真正关心的是，嗯，键和项目。
- en: so let's go ahead and look at those real quick。Im to just say keys。And values，
    I say items earlier。 I did。 All right， so we want to look at the keys and the
    values。Save and run and voila so we're returning three different things， di underscore
    items， di。 underscore keys， di， underscore values。But what we've got is all of
    the information in this dictionary right here in these three functions。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们来快速查看一下。我只想说keys和values，我之前提到过items。好吧，我们想查看键和值。保存并运行，瞧，我们返回三种不同的东西，di_underscore_items，di_underscore_keys，di_underscore_values。但我们得到的是这个字典中所有的信息，正好在这三个函数中。
- en: see items returns pretty much everything nice in packaged， the keys。 it's going
    to tell us what keys are available because remember everything's a key value pair。So
    when we go to look something up， we can't do it by index， we have to do it by
    key。 which is why these keys exist。You could easily make these keys， integers
    or numbers of some kind。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下项目返回的内容几乎是所有打包好的信息，关键是。这将告诉我们可用的键，因为要记住，所有内容都是键值对。所以当我们查找某个内容时，我们不能按索引查找，而是必须通过键查找。这就是这些键存在的原因。你可以轻易将这些键设为整数或其他类型的数字。
- en: but we've done it as a string。We can also get the values dogg5 and spot。 which
    are abundantly unusful without the keys。So in the next section here。 we're going
    to take a look at how you would actually get those。![](img/50bb6b5301b650cc2149f5090f089eae_2.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们已经将其作为字符串处理。我们还可以获得值dogg5和spot。没有键的话，这些值几乎没有用。所以在接下来的部分中。我们将看看如何实际获取这些值。![](img/50bb6b5301b650cc2149f5090f089eae_2.png)
- en: '![](img/50bb6b5301b650cc2149f5090f089eae_3.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50bb6b5301b650cc2149f5090f089eae_3.png)'
- en: Let's go ahead and take a look at how we would get a value from a key because
    these are key value pairs。 It's called the key because it unlocks the door to
    the value and let's take a look at what I mean here。So I want to format this，
    and I'm going to say。Name， let's capitalize that。And we're going to say D and
    you inclined to do something like this， D0。Let's run this in key error。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何从一个键获取一个值，因为这些是键值对。之所以称之为键，是因为它解锁了值的大门，让我们看看我的意思。因此我想格式化这个，我要说。Name，让我们将其大写。然后我们要说D，你倾向于这样做，D0。让我们在键错误中运行这个。
- en: What does that mean， key error， It means the key was simply not found。 We don't
    have a key named 0。 We do， however， have a key。Name name， we also have one called
    PE and age。So you have to use the key to get the value。 Let's demonstrate that。
    See， the name is spot。Now。 you notice how I have different quotes， I have single
    quote and double quote。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么意思，键错误，它意味着未找到该键。我们没有名为0的键。然而，我们有一个名为name的键，还有一个名为PE和age的键。所以你必须使用键来获取值。让我们演示一下。看，名字是spot。现在，你会注意到我有不同的引号，我有单引号和双引号。
- en: There is a very interesting little issue here， where if we do a single quote
    within a single quote。Bad things happen very quickly， we get an invalid syntax。And
    you're looking at this going， now。 wait a minute。It should treat everything in
    these brackets as a separate entity。 but it really doesn't， so you do have。A quote
    issue that we've talked about in a previous video。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个非常有趣的问题，如果我们在单引号内再使用单引号。坏事很快就会发生，我们会得到一个无效的语法错误。你会想，现在等一下。应该将这些括号中的内容视为一个独立的实体，但实际上并不是，因此你确实有。我们在之前的视频中讨论过的引号问题。
- en: All right， so now that we've wrapped our head around that。Let's take a look
    at the key error in depth。And let's call this test。And let's just say blah is
    some key we know doesn't exist。Really what's going on here is it's going out and
    it's trying to find any key of that value。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，现在我们对这一点有了初步了解。让我们深入研究一下键错误。我们称之为测试。假设blah是一个我们知道不存在的键。实际上，这里的情况是它正在查找任何该值的键。
- en: if it doesn't find it。 It throws a key error。At the very end of this。 we're
    going to show you a little trick using some simple logic which we haven't covered
    yet to get around that to determine if the key even exists in the first place。
    But just right now， know that you have to have the key。 otherwise it will throw
    an error。So just put a quick note there， we'll throw an error if the key is not
    found。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到它，会抛出键错误。在这一切的最后，我们将向你展示一个使用一些简单逻辑的小技巧，我们还没有讨论过，以解决这个问题，确定键是否存在。但现在，请知道你必须拥有该键，否则它会抛出错误。所以请记下这一点，如果未找到键，我们会抛出一个错误。
- en: '![](img/50bb6b5301b650cc2149f5090f089eae_5.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50bb6b5301b650cc2149f5090f089eae_5.png)'
- en: '![](img/50bb6b5301b650cc2149f5090f089eae_6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50bb6b5301b650cc2149f5090f089eae_6.png)'
- en: Let's go ahead and take a look at how hard is it to add an item to a dictionary。
    Well， it's not。 It's ridiculously simple。 You just simply do something like this。There
    you go， It's that simple。 you just simply say dictionary and then some key that's
    not in use equals a value and it will add it automatically。 it's very cool how
    it does that。Now， you should note， and we're just going to copy and paste this。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看将项目添加到字典中有多难。其实并不难。这简单得可笑。你只需这样做。就这么简单。你只需说字典，然后一个未使用的键等于一个值，它会自动添加。这真的很酷。现在，你应该注意，我们只是复制并粘贴这个。
- en: What happens if the key already exists？So here we're adding。And here， what's
    going to happen。 Let's run and find out。It's just simply changed it。 This is what
    I mean by the key is immutable。 We cannot change this key。 We could delete it
    and re add it。 But once that key is in there。 all we can do is update the value
    or delete it。The key itself cannot change。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果键已经存在会发生什么？所以我们在这里添加。那么，接下来会发生什么呢？让我们运行一下看看。它只是简单地改变了。这就是我所说的键是不可变的。我们不能改变这个键。我们可以删除它然后重新添加。但一旦这个键在这里，我们能做的只是更新值或删除它。键本身无法改变。
- en: And let's take a look at what it takes to remove an item。Our good old buddy，
    the delete statement。 so we're going to delete。You guessed it the trick。Now this
    is what I mean by this is a key value pair when we run this。And we delete a key。The
    value associated with that key is also removed。 you see right here。Trick roll
    over。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看移除项目需要什么。我们老朋友，删除语句。所以我们要删除。你猜对了，那个技巧。现在这就是我所说的键值对，当我们运行它时。如果我们删除一个键，那个键关联的值也会被移除。你在这里看到。技巧滚动。
- en: We've deleted it， and now it's just simply gone。 It's not in there。Very simple
    to do that。 But just understand that once you delete the key， the value is gone。
    However。 if you were to try to delete the value， the key will be there， but you'll
    have a null value。And that could lead to some issues down the road that's a more
    complex topic we're going to cover in a future video I just want you to be aware
    of that。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经删除了它，现在它就简单地消失了。它不在里面。这很简单。但要理解的是，一旦你删除了键，值就消失了。然而，如果你试图删除值，键会存在，但你会得到一个空值。这可能会导致一些问题，这是一个更复杂的话题，我们将在未来的视频中讨论，我只是希望你注意到这一点。
- en: I've been getting a lot of really good feedback about this video series。 and
    some people have said。 hey， dude， you're going a little too slow。 I realize these's
    if for beginners， but I want more now。 so we're going to give you a little preview
    of what to come。 So we're going to test for existence and we're going to do something
    called a loopt。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我收到了很多关于这个视频系列的好评，有人说，嘿，伙计，你的速度有点慢。我意识到这些是给初学者的，但我现在想要更多。所以我们将给你一个即将到来的小预览。我们将测试存在性，并做一些叫做循环的事情。
- en: And both of these may be a little challenging， especially for newbie programmers。
    but if you're an experienced programmer and you just want to learn it now。 let's
    just go over it and get it out of the way。 So we're going to say if， and this
    is basic logic。I say， name。In。李可文。And hit enter。 What we've done here is an if
    statement， this is a logic。If。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者可能对新手程序员来说有点挑战，但如果你是经验丰富的程序员，现在只想学习一下。让我们过一下，先搞定它。所以我们说，如果，这就是基本逻辑。我说，名称。在。李可文。然后按回车。我们在这里做的是一个if语句，这是一种逻辑。如果。
- en: This key is in the dictionary do something。Now， Python has this little guy right
    here this colon at the end saying。 hey， it's not the end of the statement。 expect
    more。 And then you have to have。 It's either spaces or a tab。 It doesn't really
    matter， but it has to be the same amount。 If you're from another language， you're
    expecting something like this。And you may be going。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个键在字典中做某事。现在，Python有这个小家伙，在最后有一个冒号，表示嘿，这不是语句的结束。还要期待更多。然后你必须有。它可以是空格或制表符。其实没关系，但必须是相同的数量。如果你来自其他语言，你可能会期待这样的东西。你可能会想。
- en: why do you need tabs， Well， if you think about it， your code。Is he。And if you
    get rid of the tabs。It looks like this， so it just makes sense。But a lot of people
    in their first starting Python can't wrap their head around the tabs or the white
    spaces and it just infuiates them。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么需要制表符？嗯，如果你考虑一下，你的代码。是的。如果你去掉制表符，效果就是这样，所以这很合理。但很多初学Python的人无法理解制表符或空白，这让他们很沮丧。
- en: So。This is what I was saying earlier about we're going to test to see if that
    key exists before we try to access it。Now if the key was not in the dictionary，
    it would throw a key error， but we're saying if。 so only if this exists in the
    dictionary are we going to run this code。 we're going to go over all of this in
    more detail in a future video but I've had a lot of people saying hey。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以。这就是我之前说的，我们要测试这个键是否存在，然后再尝试访问它。如果这个键不在字典中，就会抛出一个键错误，但我们是说如果。所以，只有当这个键在字典中存在时，我们才会运行这段代码。我们会在未来的视频中更详细地讨论这些内容，但我已经听到很多人说嘿。
- en: they want more now so there's one now let's go over loops。This is the other
    thing that really trips people up， especially in Newbyland， is because they're
    new。 They don't understand this stuff。 Nobody's explained it to them。What is a
    loop well。Have you ever gotten in trouble as a child and like your mom or dad
    says。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 他们现在想要更多，所以有一个，现在让我们来讨论循环。这是另一个让人感到困惑的事情，尤其是在新手阶段，因为他们是新手。他们不理解这些东西。没有人向他们解释过。什么是循环呢。你小时候有没有遇到麻烦，你的妈妈或爸爸说。
- en: you know go do this until I tell you to stop， that's basically what you're telling
    the computer to do。You're going to say four。K。In the these。 And this may look
    really confusing if you're complete movie。Again， got to have that white space。We're
    going to go ahead and print。And let's go ahead and format this。And I am going
    to explain this。 But at the moment。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，继续这样做，直到我告诉你停止，这基本上就是你在告诉计算机做的事情。你会说四。K。在这些。这可能会让完全新手感到困惑。再次强调，你必须有那个空白。我们接下来打印。让我们格式化一下。接下来我会解释这个。但此刻。
- en: you take a huge leap of faith with me here。So we got our key。And then we're
    going to say dictionary and then the specific key。This looks ugly if you're a
    newbie。 but let's run it， it works。So it's saying。Heet dog， H 5 name spot。That's
    what we're doing right there。So what's going on here is we're saying for every
    key in。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你要在这里和我一起大胆尝试。所以我们得到了我们的键。然后我们会说字典，然后是具体的键。如果你是新手，这看起来很糟糕。但让我们运行它，确实有效。所以它在说。狗狗，H
    5名字spot。这就是我们正在做的事情。那么这里发生了什么呢？我们在说对于每个键。
- en: there's that in keyword again， the dictionary keys， remember we talked about
    this way up here。For every key in the dictionary keys， go ahead and print out
    the key and the dictionary value that correlates with that key。Again， you have
    to have that tab there。We're going to cover looping also in a future video but
    this is just because people have been saying we want more and we want more now。
    so if you're having trouble wrapping your head around these two right here。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那个“in”关键字又出现了，字典的键，记得我们在这里提到过。对于字典中的每个键，打印出该键及其相关的字典值。再次提醒，你必须有那个制表符。我们将在未来的视频中涵盖循环，但这是因为人们一直在说我们想要更多，现在就想要更多。所以，如果你对这两个内容感到困惑。
- en: don't worry I'm going to make a future video that's going to cover those in
    depth and we're going to talk about them and I do mean in depth。But if you are
    a season programmer， that's very simply how you do it。 If you are having trouble
    wrapping your head around these tabs。Just think of it like this。You have some
    code。And then， normally。You would do something like this。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心，我会制作一个未来的视频来深入探讨这些内容，我们会讨论它们，我确实是说深入探讨。但如果你是一个有经验的程序员，这样做非常简单。如果你在理解这些制表符时遇到困难，只需想象成这样。你有一些代码。然后，通常你会做这样的事情。
- en: And Python's trying to help me out here， but you would have something like that
    stripped us out to replace it with that。And of course， you have something here。Sad
    code， I know。 let's say sad code here。 but then you strip these out， and it becomes
    that。 And that's why Python is so much smaller than other languages compared to
    something like Java。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Python在这里试图帮助我，但你会有类似的代码，把它替换成那个。当然，你这里会有一些。糟糕的代码，我知道。假设这里是糟糕的代码。但然后你将这些去掉，它就变成了那样。这就是为什么Python比其他语言更简洁，相较于像Java这样的语言。
- en: Javascript， because it takes all those special characters out of there。![](img/50bb6b5301b650cc2149f5090f089eae_8.png)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Javascript，因为它将所有特殊字符移除了。![](img/50bb6b5301b650cc2149f5090f089eae_8.png)
