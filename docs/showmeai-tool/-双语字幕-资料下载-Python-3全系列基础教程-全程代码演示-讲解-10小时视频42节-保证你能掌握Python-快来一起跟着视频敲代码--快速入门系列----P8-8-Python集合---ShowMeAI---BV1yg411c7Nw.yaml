- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P8：8）Python集合 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P8：8）Python集合 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/17b31360c3cfc805f2289862eab3ce95_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17b31360c3cfc805f2289862eab3ce95_0.png)'
- en: Welcome back， everyone。 My name is Brian。 And in this video， we're going to
    talk about the set。 Now。 the set is a little bit different than the list。 We spent
    30 plus minutes in the last video。 deep diving into the list。 If you haven't watched
    that video。 I highly encourage you to go back and watch it because we really do
    dive into the list。😊，Set。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，大家好。我叫布莱恩。在这个视频中，我们要讨论集合。现在，集合与列表有些不同。我们在上一个视频中花了30多分钟深入探讨列表。如果你还没看那个视频，我强烈建议你回去看，因为我们真的深入讨论了列表。😊，集合。
- en: however， is slightly different。 That difference， though。 means it is profoundly
    different under the hood。Let's take a look at this。 so a set contains unordered，
    unique and immutable data types in a hash table。Let's break that down。 What does
    that really mean？Unordered， meaning we cannot control the order， like in a list。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，它稍有不同。这个区别意味着在底层有着深远的不同。我们来看看。集合包含无序、唯一和不可变的数据类型在一个哈希表中。让我们分解一下。这究竟意味着什么？无序，意味着我们无法控制顺序，就像在列表中。
- en: you could add or insert， meaning we could now control the order。 Can't do that
    with a set。 The set determines the order unique， meaning you cannot have multiple。
    So if you try to add two cats or two dogs， it's just not going to do it。And immutable
    data types。 what does that mean？ItMean that once we add them， we cannot change
    them。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加或插入，这意味着我们现在可以控制顺序。集合无法做到这一点。集合确定唯一的顺序，这意味着你不能有多个相同的项。如果你试图添加两个猫或两个狗，它就是不行的。不可变数据类型。这意味着什么？意味着一旦添加，我们无法更改它们。
- en: we can only remove them or add them， we cannot change individual items， and
    it's in a hash table。Hash table that gets a little bit complex into the computer
    theory。 but really when you hear the term hash table， think blistering fast， read
    access。 the set determines the order so that it knows exactly where things are
    in memory and it makes it very fast so if you want very。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能删除或添加它们，不能更改单个项目，而且它是在哈希表中。哈希表在计算机理论中有点复杂。但当你听到哈希表这个术语时，想想超快的读取访问。集合确定顺序，以便它确切知道内存中的位置，使其速度非常快，所以如果你想要非常。
- en: very quick lookups， a set is what you need。![](img/17b31360c3cfc805f2289862eab3ce95_2.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要快速查找，集合就是你需要的。![](img/17b31360c3cfc805f2289862eab3ce95_2.png)
- en: '![](img/17b31360c3cfc805f2289862eab3ce95_3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17b31360c3cfc805f2289862eab3ce95_3.png)'
- en: Now that we understand what a set is， let's go ahead and let's create one。 So
    first things first。We'll say S equals， and then we want。These little curly brackets。
    remember if you do the square brackets， that's a list， completely different data
    type。You want the curly brackets。And in here， I'm going to just say one but one。Two，
    come two， come two。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们明白了什么是集合，让我们创建一个。首先，我们说S等于，然后我们想要这些小的花括号。记住，如果你使用方括号，那是列表，完全不同的数据类型。你需要花括号。在这里，我只会说一，但还有两个。
- en: come three， four， and five。You may be going now wait a minute。 I thought it
    had to be unique。 Well。 this is one thing I absolutely love about Python。 It automatically
    strips all that out for you。 so you don't have to worry about it， see。One， two，3，4，5。
    even though we tried adding multiple twos in here。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 三，四，五。你可能会想，等一下。我以为它必须是唯一的。嗯。这是我非常喜欢Python的一点。它会自动为你剔除所有重复项，所以你不必担心。看到没。一，二，三，四，五。即使我们尝试在这里添加多个二。
- en: It's smart enough to realize it already exists and says， nope， can't do it。
    and it doesn't raise an air or anything like that。 So we don't have to worry about
    it exploding on us here。We can also， Hasha wondering。Invert a list into a set。
    And let's show how to do that， Mesay。Here's our list。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它聪明到足以意识到它已经存在，并说，不，不能这样做。并且不会引发错误或其他问题。所以我们不必担心它会在这里崩溃。我们还可以将列表反转为集合。让我们展示如何做到这一点，梅赛。这里是我们的列表。
- en: A's gonna to have my name and my age。And now we're going to say S equals。 and
    we're going to use the set function。And what this does is take any sort of aorable。Data
    type like the list， which we've talked about and convert that。Does it automatically。
    we don't even have to think about it。I'm going to grab this。Now， notice the order。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: A的名字和年龄即将出现。现在我们要说S等于，并使用集合函数。它的作用是将任何类型的数据，例如我们之前讨论过的列表，进行转换。它会自动处理，我们甚至不需要思考。我会抓取这个。现在，请注意顺序。
- en: I did Brian Karen's 46， and in a list， it's going to be exactly the way we put
    it。 However。 in the set， it's actually 46 Brian Karens。 So the set is now determining
    the position。That's one thing you mean to really， really drive into your brain
    about a set is the set。Is unordered， unique， and as we're going to see later on，
    immutable data types。Okay。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我做了 Brian Karen 的 46，在列表中，它将完全按照我们放置的方式。然而，在集合中，它实际上是 46 Brian Karens。所以集合现在正在确定位置。这是关于集合你真的需要牢记的一件事：集合是无序的、唯一的，正如我们稍后将看到的，不可变数据类型。好的。
- en: let's see how we would add items to a set。 It's actually very， very simple。
    So must say S dot add。And you can add pretty much any element type you want。 I'm
    just going to add the word hello。There is another way， though， and it's called
    update。And it looks a little bit challenging when we look at this， it says star
    S colon iderable。T none。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何向集合中添加项目。实际上，这非常非常简单。所以必须说 S.dot add。你几乎可以添加任何类型的元素。我只是想添加单词 hello。不过还有另一种方法，叫做
    update。当我们查看这个时，它看起来有点挑战，写着 star S colon iderable。T none。
- en: what does all this mean？But when you see this term right here。Basically。 we're
    talking about something like a list。 I shouldn't say a list， but like a list。
    something that you can go through or navigate through like a list or a set or
    a tuple。 which we haven't talked about yet。You just need some sort of data container
    that contains multiple items that you can iterate through。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这都意味着什么？但当你看到这里的术语时。基本上，我们在谈论类似列表的东西。我不应该说列表，而是像列表那样的东西。某种你可以像列表、集合或元组那样遍历或导航的东西，而我们还没有讨论过。你只需要某种包含多个项目的数据容器，你可以对其进行迭代。
- en: So in this case， we're going to say。We want to do this in a list。Say 1，2，3。
    And I'm going to go ahead and add in hello。 Notice I've got Ho twice。 but we're
    working with a set which is unique items。 So what's going to happen under the
    hood。If you're going to guess that the set is going to automatically strip out
    that second hello。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将说。我们想在一个列表中做这件事。说 1，2，3。我将继续添加 hello。注意我有 Ho 两次。但我们正在处理一个只有唯一项目的集合。那么，在后台会发生什么？如果你猜测集合会自动去掉第二个
    hello。
- en: you'd be absolutely correct。 let's see it in action。对。😊，1，2，3，46， Karen's Hello
    Bryan， again。 unordered and unique items only。Now that we've added items。 let's
    look at how we would go ahead and remove items。 and it's just as simple S discard。And
    discard does well exactly what you think it would。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你绝对是对的。让我们看看它的实际效果。对。😊，1，2，3，46，Karen 的 hello Bryan，再次。只有无序和唯一的项目。现在我们已经添加了项目。让我们看看如何去掉项目。这同样简单，S
    discard。discard 正好会执行你想的那样。
- en: It just takes it and throws it right in the trash。However。 there's a subtle
    difference between discard and。Remove。Top quiz does anybody know what the difference
    really is here？Well。 one will throw an error and one will not so。Discard。Will
    not。Trow and air。Where removed。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是把它放进去，直接扔进垃圾箱。然而，discard 和 remove 之间有一个微妙的区别。小测验，有谁知道这里的区别是什么吗？嗯，一个会抛出错误，而另一个不会。因此，discard
    不会抛出错误，而 remove 会。
- en: will throw an he。And what do we mean by that？If we run it in its current form。
    everything is well just going to work。Let's go ahead and modify this a little
    bit。 and demonstrate this error。So in our set， we have 1，2，3， Karens 46， Brian，
    and hello。 let's go ahead and say some number that we know is not in there， 78。Run
    this and a O。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将会抛出一个错误。我们所说的是什么？如果我们以当前的形式运行它，一切都会正常工作。让我们稍微修改一下这个并演示这个错误。因此，在我们的集合中，我们有 1，2，3，Karen
    的 46，Brian 和 hello。让我们假设一个我们知道不在里面的数字，78。运行这个，结果是 O。
- en: We have a key Air 78， which means。It knows 78 is not in there。In future videos。
    we're going to talk about how to get around that。 you're going to use the keyword
    in to determine whether or not it's actually in there。 but just for our beginner's
    perspective， discard will not throw an error and remove will。Be very mindful of
    that， as you're moving forward。Another thing we can really do here。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个关键字 78，这意味着它知道 78 不在里面。在接下来的视频中，我们将讨论如何解决这个问题。你将使用关键字 in 来确定它是否实际上在里面。但就我们初学者的角度而言，discard
    不会抛出错误，而 remove 会。请对此保持警惕，随着你继续前进。我们在这里真的可以做的另一件事。
- en: Is we can pop now。Oop for a set really isn't abundantly used。 I'm just going
    to say it。You may be inclined to say， hey， I want to get like the first item or
    the second item or the last that you can't do that。 It's just going to return
    an arbitrary item。 You don't control what item it gives you。 It's just going to
    give you an item。That gets a little frustrating。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以弹出。集合的弹出功能并不是很常用。我只想说，你可能会倾向于说，我想获取第一个项目、第二个项目或最后一个项目，但你不能这样做。它只会返回一个任意项目。你无法控制它给你哪个项目，这让人有点沮丧。
- en: but if you're just using the set as a container and you want to just get each
    item and remove it。 pop is actually pretty useful， but this is going to be pretty
    random as far as you're concerned and you're going to have zero control over it。Now
    that you've popped it， you could do whatever you want it with B because it still
    exists in memory。 however。It's no longer in our set。One question I'm often asked，
    especially if by Nabies， is。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你只是将集合用作容器，想要获取每个项目并将其移除，那么弹出其实很有用，但对于你来说这将是随机的，你对此将没有控制权。现在你已经弹出了它，你可以对B做任何你想做的事情，因为它仍然存在于内存中。然而，它不再在我们的集合中。我常被问到一个问题，尤其是初学者。
- en: well I have a set and I want to modify it， well unfortunately you can't。Not
    only can you not modify it， you can't access items based on their index because
    the set has no concept of this。Let's go ahead and demonstrate。 I'm going to say
    S and 0。And we're going to change this a。Go ahead and run this see what happens
    and object does not support item assignment Oh。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个集合，我想修改它，但不幸的是你不能。不仅无法修改它，你也不能根据索引访问项目，因为集合没有这种概念。我们来演示一下。我将说S和0。然后我们要将其改为A。去运行一下，看看会发生什么，对象不支持项目赋值，哦。
- en: that is super frustrating。This is actually by design。 Once you put it in the
    set。 it will not change because under the hood， it's a hash table。 It's making
    a mathematical computation to determine where and memory it needs to go so it
    can do a fast look up。Okay。Not a huge super deal， but I just want to print one
    item out。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这真让人感到非常沮丧。这实际上是设计使然。一旦你将其放入集合，它就不会改变，因为在底层，它是一个哈希表。它在进行数学计算，以确定需要存储的位置，以便进行快速查找。好的，这并不是什么大事，但我只想打印出一个项目。
- en: Let's just try to print that first item out and see what happens here。Set object
    does not support indexing。Oh my goodness。 That is so frustrating。 You may be thinking。
    well， this is stupid。 Why even use this。 Let's just use a list and get it over
    with。Well， you can。 however， a set is designed for a specific reason。 that is
    fast look up。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先尝试打印出第一个项目，看看会发生什么。集合对象不支持索引。哦，我的天，这太让人沮丧了。你可能在想，这真傻。为什么要用这个？我们就用列表算了。不过，你可以这样做，但集合是为了特定的原因而设计的，那就是快速查找。
- en: Think of a set like you would have set， like， for example， all of your computer
    settings。 there's probably thousands and thousands of computer settings。 If you
    put that in a list。 it's going to be hard to really navigate。So you would use
    something like a loop or use the keyword in things that we haven't covered yet
    and we will cover in future videos。But what we're going to talk about is some
    down and dirty ways you can modify a set， So for example。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 把集合想象成你电脑设置的集合，例如，所有的电脑设置，可能有成千上万的电脑设置。如果你把这些放在列表里，会很难真正导航。因此你会使用类似循环的东西，或使用一些我们尚未涵盖的关键字，这些将在未来的视频中讨论。但我们要谈的是一些简单粗暴的方式来修改集合，比如说。
- en: Let's say。嗯。Let's run our our code here and see what we got， so we've got346
    Karens and Brian。 let's go ahead and say。3 and S。Let's go ahead and print this
    out just to see。This is in there。True。 so we know that3 is in S。 Let's go ahead
    and。Say S that remove move。And we want to remove that three。Now， we want to go
    ahead and turn on and add。Well。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来运行我们的代码，看看结果，我们有346个Karen和Brian。我们来试试3和S。我们先打印出来，看看这个在里面吗。是真的，因此我们知道3在S中。接下来，S去移除，我们想移除那个3。现在，我们要打开并添加。好吧。
- en: so basically what we're doing。Is we're saying， take this set。Remove this three
    and change it to a 12。 Unfortunately。 we cannot control where it's going to put
    it in the set。Let's go ahead and print that out。 probably a little more。Aful，
    there we go。hSo now it's 12，46 Karen's a Brian。Honestly。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们在做的事情是，取这个集合，移除这个3并将其改为12。不幸的是，我们无法控制它在集合中放置的位置。让我们打印一下。可能会更多一点。好了，现在是12，46个Karen和Brian。老实说。
- en: dumb luck that it's in the same position don't count on that because the set
    is unordered。Now。 we can do some crazy things here， and this is going to really
    hurt your brain。 So let's go。X equals。 and we're going to make a set。And let's
    say A， BC， D。And I'm quite literally just resttyling this。 so expect me to make
    some typing errors here。And we're going to say C。E， E， FG。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 纯粹是运气好，它在同一位置，不要指望这个，因为集合是无序的。现在。我们可以在这里做一些疯狂的事情，这真的会让你头疼。所以让我们来。X 等于。我们将创建一个集合。假设
    A，B，C，D。我实际上只是重新格式化这个，所以请期待我在输入时犯一些错误。我们将说 C，E，E，F，G。
- en: So we've got two sets。Now we want to do some mathematical computations on these。
    and this is kind of the standard way of doing any sort of set modification。We're
    going to do what's called a union。 So I'm going to say S equals， and we want x，
    not union。Why。And what this is going to do is it's going to， and I'm going to
    see if I got some notes off the screen here。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有两个集合。现在我们想对这些进行一些数学计算，而这就是进行任何集合修改的标准方法。我们将进行所谓的并集。因此我要说 S 等于，我们想要 x，而不是并集。为什么呢？这将会……我看看我是否有一些屏幕外的笔记。
- en: All the elements that are in either set。And I'm going to。The little print statement
    here。So our union is now。All the elements that are in either set。Very rapid modification
    of that set you don't have to go in remove and add。 remove and add and check and
    see if it's in there。And it just grab this whole thing。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在任一集合中的元素。我将添加一个小的打印语句。因此我们的并集现在是。所有在任一集合中的元素。对集合进行快速修改，你不必去移除再添加、移除再添加并检查是否在其中。它会直接抓取整个集合。
- en: And let's go ahead and do an intersection。Now an intersection is a little bit
    different。It's going to get all the elements are in both sets。But demonstrate
    that。And what's in both is D and C。诶。Pretty simple， pretty easy to wrap your head
    around。Now let's get a little bit crazy here。 So we're going to grab this。And
    we want the difference。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行交集操作。交集有点不同。它将获取两个集合中的所有元素。但展示一下。两个集合中都有的是 D 和 C。嘿。相当简单，很容易理解。现在我们来点疯狂的。所以我们将抓取这个。我们想要差异。
- en: You ever have somebody say that to you， let's know split the difference。So the
    difference are all the elements that are in x， but not in y。Which in this case
    is B and A。And one more that we're going to cover here。And this is the。Maybe if
    I get my mouse to work。The symmetric difference。Now， this is going to be a little
    bit different than what you're thinking。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有听过有人对你说，我们来分一分差异吧。差异是所有在 x 中但不在 y 中的元素。在这种情况下是 B 和 A。还有一个我们将在这里讨论的元素。也许我能让我的鼠标工作。对称差异。现在，这将与你想的有所不同。
- en: So this is all the elements there are in。One of the sets。What does that mean
    exactly？Save and run。All of the elements that are in one of the sets， so it's
    going to take both of them and basically make a third set in memory and say。 okay。Make
    sure what we're giving back is a unique。Order of items that exist in at least
    one of the sets that we've given it。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是其中一个集合中的所有元素。这究竟意味着什么呢？保存并运行。所有在其中一个集合中的元素，所以它将获取两个集合，基本上在内存中生成一个第三个集合，并说好的。确保我们返回的是至少存在于我们给定的集合中的唯一项目顺序。
- en: And it gets way more complex than that， but that's basically what's going on
    under the hood。 you can see we have F， B A G。So the main takeaway from here is
    all the way up at the top。 sets contain unordered， unique immutable data types
    in a blistering fast hash table。What is the fundamental difference between a set
    and a list， Well。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这比这要复杂得多，但基本上就是后台发生的事情。你可以看到我们有 F，B，A，G。所以这里的主要结论在顶部。集合包含无序、唯一且不可变的数据类型，存储在极快的哈希表中。集合和列表之间的根本区别是什么呢？
- en: the set is well a little bit more challenging to work with。 and you cannot modify
    it as easily as you can with a list， but it is much， much faster。 which you're
    really not going to understand how fast that is until you get into more advanced
    programming right now。 we're learning the fundamental data types， and we just
    cover the set in depth。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个集合的使用会稍微有点挑战性，你不能像操作列表那样轻松修改它，但它快得多，快得多。你真的不会理解它有多快，直到你进入更高级的编程。现在，我们正在学习基本数据类型，我们将深入探讨集合。
- en: '![](img/17b31360c3cfc805f2289862eab3ce95_5.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17b31360c3cfc805f2289862eab3ce95_5.png)'
