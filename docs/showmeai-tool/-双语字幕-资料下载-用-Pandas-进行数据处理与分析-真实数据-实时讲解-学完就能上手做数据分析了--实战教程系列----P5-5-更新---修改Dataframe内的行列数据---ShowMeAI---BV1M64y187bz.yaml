- en: 【双语字幕+资料下载】用 Pandas 进行数据处理与分析！真实数据&实时讲解，学完就能上手做数据分析了！＜实战教程系列＞ - P5：5）更新 - 修改Dataframe内的行列数据
    - ShowMeAI - BV1M64y187bz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hey there。 How's it going， everybody。 In this video。 we're gonna be learning
    how to alter existing rows and columns in our data frames。 So in the last video，
    we learned how to filter out specific information。 and we can use those techniques
    here to also modify our data。
  prefs: []
  type: TYPE_NORMAL
- en: So we'll learn how to update the data for our rows and our columns。 And then
    in the next video。 we'll also learn how to add and remove rows and columns from
    our data frames。 Now。 I'd like to mention that we do have a sponsor for this series
    of videos。 And that is brilliant org。 So I really want to thank brilliant for
    sponsoring this series。
  prefs: []
  type: TYPE_NORMAL
- en: And it would be great if you all can check them out using the link in the description
    section below and support the sponsors。 And I'll talk more about their services
    in just a bit。 So with that said。 let's go ahead and get started。 Okay， so let's
    look at how to update data within our rows and columns。 The last couple of videos。
    we've already seen how we can filter specific data。
  prefs: []
  type: TYPE_NORMAL
- en: But now let's take a look at those same concepts and use them to make changes
    to our data。 So let's look at updating columns first。 and then we'll update some
    rows。 So I currently have my snippets file open here。😊，That we've seen in previous
    videos so that we can see what this looks like on a smaller data set before seeing
    how to do this on our larger data with that stack overflow survey data。 Now， before
    we modify the columns， let's take a look at these first using the columns attribute
    that we've seen in previous videos。
  prefs: []
  type: TYPE_NORMAL
- en: So let me add a new cell here down at the bottom。 we can look at the columns
    just by saying Df do columns and we can see that we just have three columns here。
    So our column names are first last and email。 So let's say that we wanted to update
    the columns to be a little more specific。
  prefs: []
  type: TYPE_NORMAL
- en: So let's say that I wanted this to be first name instead of first。 So there's
    a couple of ways that we can do this。 So first， if we want to rename all of the
    columns。 then we can simply do an assignment using the columns attribute that
    I just used。 So in order to do this。 I could just use an assignment here。 and
    just pass in a list。
  prefs: []
  type: TYPE_NORMAL
- en: So I could just pass in a list of all the different columns that I want these
    to be。 So I'll call this。First name， last name。 and I'll just keep email the same。
    So if I run this。 let's now look at these columns again。 and now we can see that
    those column names have changed。 And if I actually look at the data frame here。
    then they show up changed in the data frame as well。
  prefs: []
  type: TYPE_NORMAL
- en: Now， I almost never use this because this is used for when you're passing in
    different names for all of your columns I usually only need to change the names
    of a few different columns。 Now， one thing that is a lot more common is the need
    to change something specific about each column in our data frame。
  prefs: []
  type: TYPE_NORMAL
- en: So， for example， maybe your columns are all uppercase and you want them to be
    lowercase or vice versa or maybe your columns。 your column names have spaces and
    you want to replace the spaces in the column names with an underscore in this
    case。 we can use a list comprehension。 So for example， let's say that I wanted
    to uppercase。 all of the column names here。 So in order to do this。 I could use
    a list comprehension。
  prefs: []
  type: TYPE_NORMAL
- en: And I could just。Say Df columns is equal to。 and now we'll just say like x dot
    upper。4 x in Df dot columns。 So if I print out that data frame after making that
    change。 then we can see that now all of our column names have been translated
    to uppercase。 Now another thing that you might want to do is remove spaces and
    replace them with underscores。
  prefs: []
  type: TYPE_NORMAL
- en: especially if you like using the dot notation to access a column name that doesn't
    work if there are you know。 spaces in the column name because that just not correct
    syntax。 So if you wanted to replace spaces with underscores instead。 then what
    you could do is just do something similar here and say Df columns is equal to
    Df dot columns do SR。
  prefs: []
  type: TYPE_NORMAL
- en: we're using the STR method on this columns series here。 And then we can use
    the replace method from that stream class。 So I can just pass in a space and say
    that we want to replace。Place all those spaces with underscores Now this isn't
    going to make any changes in our specific data frame because all of ours already
    have underscores if I reverse this and I did an underscore and then a space then
    we can see that now we replaced all those underscores with spaces that's probably
    not what you want though I would rather have underscores instead of spaces。
  prefs: []
  type: TYPE_NORMAL
- en: so if we do it this way then that's how you replace all of those。 but let me
    go ahead and set these columns back to the way that they were before I like lowercase。
    So I'm going to change those back to lowercase there。 and now everything that
    we've seen so far applies to every one of our columns。
  prefs: []
  type: TYPE_NORMAL
- en: but what if we only wanted to change some columns Well in this case we can use
    the rename method and just pass in a dictionary of the columns that we want to
    change So if I want to set the first name and last name back to what they were
    before then I could say Df do rename。
  prefs: []
  type: TYPE_NORMAL
- en: Now we can just pass in the columns and we're going to pass in a dictionary
    of what we want here。 So the key is going to be the old value。 So I'll set first
    name back to first。 So the value is going to be the new value for that column
    name So we're going to map first name to first and then I will map last name here
    to last。 so I just have to put that in as a value there and now if I run this
    now。
  prefs: []
  type: TYPE_NORMAL
- en: then it might look like it worked， but if I look at my data frame。 then those
    changes actually didn't go through。 this is another one of those methods where
    if we actually want that place to or if we want that change to take place then
    we have to say in place is equal to true because it'll just let us kind of see
    what it would look like if it worked。
  prefs: []
  type: TYPE_NORMAL
- en: but it's not actually going to change it So saying in place equals to true we'll
    make that change go through。 So now if I rerun this again， then we can see that
    those column names are set。To the way that they were。 Okay， so that's a quick
    look at updating our columns。 Now let's take a look at updating the data in our
    rows。
  prefs: []
  type: TYPE_NORMAL
- en: and we'll spend the majority of video learning how to update data in our rows
    since there's so much more that we can do here。 So first， let's look at how to
    update a single value。 Now， in the previous video。 we saw how we can look up values
    using lo and i Lo。 and we'll use that as our starting point for setting values
    as well。
  prefs: []
  type: TYPE_NORMAL
- en: So let's grab the row for John Doe right here， it's row number2。 let's grab
    that row and change last name to Smith。 So in order to grab that row。 we can simply
    grab that row with the index label2 so we can say Df do lo of2。 if I run that。
    then we can see that we get that row of first name John last name Doe。
  prefs: []
  type: TYPE_NORMAL
- en: And if you wanted to use a conditional like we saw in the last video to grab
    that row。 then that's definitely possible too。 you can do that as well。 Now， we
    could have。😊，Saaiid， you know。 give me rows where the first name is equal to John
    and the last name is equal to Doe if we wanted to do that as a conditional。 So
    now in order to update this information， there are a couple ways that we can do
    this。
  prefs: []
  type: TYPE_NORMAL
- en: we can just pass in all of the new values for this row by passing in a list
    So I could just say that this row I want to set this equal to and then pass in
    all the new values So I'll say that I want to keep John the same。 I want his last
    name to be equal to Smith and then let's also change his email as well。
  prefs: []
  type: TYPE_NORMAL
- en: So John Smith at email co。 So if I run this and then we look at our data frame。
    then we can see that now that last row has a new last name and a new email address。
    Now what if we had a lot of columns but we only wanted to change a couple of values。
    So imagine you know with our survey data we have 85 different column So it'd be
    a pain if we wanted to change a single row and we had to pass in or a single column
    and we had to pass in this huge list。
  prefs: []
  type: TYPE_NORMAL
- en: Of 85 different values。 know that would really suck to need to pass in that
    entire list just to change those couple of values。 So in this case， we can just
    specify the exact columns using Lo。 And again。 we saw this before when learning
    how to use the lo to filter data。 So if I wanted to just change the last name
    and email。 then first。
  prefs: []
  type: TYPE_NORMAL
- en: let's just grab those specific values。 So I can say Df do Lo。 and then I can
    pass in a two for the rows。 and if you remember that we can also pass in a list
    as the second value here for the columns that we want。 So I'll say that I want
    the last and I want the email。 So if I run this。 then we can see that we just
    get the last name and we just get the email。
  prefs: []
  type: TYPE_NORMAL
- en: and now we can change this as well using the same method that we used here above。
    but we don't need to pass in this the values that are staying the same。 So I don't
    need to pass in that John value anymore since we're not changing that。Let's change
    this back to Doe just to make sure that this worked。 So John。Do at email do com。
  prefs: []
  type: TYPE_NORMAL
- en: So now if I run this， that should have made the assignment。 And now if I look
    at our data frame。 then we can see that those were set back。 So now we have John
    Doe and John Doe at email dot com。 Okay， and finally here， now let's just look
    at how to change a single value。 you might be able to guess how it be done。 But
    what we can do is just pass in a single row in a single column and just change
    that value。
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to pass in a list。 So just to change that one value。 I will copy
    this line here。 But now I don't want a list of these columns。 let's just change
    the last name。 So this won't be a list anymore。 Now I'm just saying that I want
    row to the column of last。 and we'll just set that equal to Smith。 whoops， let
    me put that in the string there。
  prefs: []
  type: TYPE_NORMAL
- en: So if I run that。 Then we look at our data frame。 Then we can see that it only
    change that one value。 Now Padas does have another indexer called at。And this
    is specifically meant for changing or looking up a single value。 Now， honestly，
    I just use dot lo for these most of the time。 but the option is there if you want
    it。 I'm assuming it's there for performance reasons。 So if I wanted to change
    this back。
  prefs: []
  type: TYPE_NORMAL
- en: since this is just a single value。 then instead of using dot lo， then I could
    also use dot at。 So I'll do this exact same assignment here。 and I'll change this
    back to dough。 but instead of dot lo， I'm going to say dot at。 and let's just
    set that back。 and then if I look at the theta frame， then we can see that that
    worked as well。
  prefs: []
  type: TYPE_NORMAL
- en: And I'll be honest here， I'll have to look at the documentation。 I'm not really
    sure why we would use dot at instead of dot lo when we only need to get or set
    a single value。 maybe it' for performance reasons。 but I personally find myself
    using lo and i Lo even for single values。 I actually did look it up in the panda
    as documentation， but all it says there is that it's there。
  prefs: []
  type: TYPE_NORMAL
- en: That it's similar to dot Lo。 It doesn't provide any actual justification as
    to why we' use it。 But I wanted you know it's available since it's obviously there
    for a reason and hasn't been deprecated yet。 Okay， so now let me show you one
    mistake that is very common。 and that is when people try to change a value without
    using one of these indexers without using dot Lo or dot at。
  prefs: []
  type: TYPE_NORMAL
- en: So let me show you what this error or this warning would look like。 So let's
    say that we have a large data frame where we want to find this John Doeper and
    change their last name to Smith。 So one way that we could do this is to use a
    filter to grab that specific row。 So I will come down here to the bottom and I'll
    just create a filter here。
  prefs: []
  type: TYPE_NORMAL
- en: and I will say that the email column of the data frame。Equals equals John Doe
    at email dot com。 That is the filter that we're looking for。 So if I apply this
    filter to my data frame。 just passing an in directly to the brackets like this。
    Then we saw in the last video， oops。 and this is filter， not filter since filter
    is a built in Python keyword。
  prefs: []
  type: TYPE_NORMAL
- en: So if I pass in that filter variable there， directly into the brackets。 again。
    we saw this in the last video。 If I run this， then we can see that that works
    for looking up these values。 So that actually returned a data frame there that
    just has a single row。 So we could grab that last name column just by accessing
    that last name from that data frame that was returned。
  prefs: []
  type: TYPE_NORMAL
- en: So if I run this， then that works as well， we can see that we got that do value。
    And finally。 you might think that in order to change this last name to Smith。
    that we could just come up here and say， okay。We got that value。 Now I want to
    set that equal to Smith。 so if I run this。
  prefs: []
  type: TYPE_NORMAL
- en: then you can see that this big warning pops up here and if we look at this warning。
    it says that we get this setting with copy warning so we got a warning。 but that
    it actually make that change to our data frame So let's look at our data frame
    here。 Okay so we tried to change that last name to Smith I know we've been going
    back and forth between these last names here。
  prefs: []
  type: TYPE_NORMAL
- en: but it was though。 and then we tried to change it to Smith and that didn not
    work。 so it didn't make that change when we did the assignment this way。 Now the
    reason that it didn't work here is a little complicated。 essentially it's because
    the way that we're doing it here requires multiple operations in the background
    which can determine whether pandas returns a view or a copy of our data frame
    So when our value isn't getting set it's because it's getting set on a temporary
    object that's just getting tossed out immediately after。
  prefs: []
  type: TYPE_NORMAL
- en: Pands does a lot better job of explaining this specific warning and they have
    a little link here down to the documentation directly within the warning itself。
    so if you want to learn more about this， then you can just click on that warning
    or go to this link and it explains it in a lot more detail。
  prefs: []
  type: TYPE_NORMAL
- en: But the moral of the story here is that when you're setting values just use
    dot Lo or the dot at indexers that we've already seen and you shouldn't have any
    problems。 So we could rerun this same operation up here at the top and actually
    let me just copy this so that if anybody I will put this notebook out here on
    after I'm done with this and if people want to see this exact error then I will
    leave that cell there So we could rerun this exact same operation but instead
    of using these brackets directly here I can just say Df dot Lo。
  prefs: []
  type: TYPE_NORMAL
- en: And then I want to apply those filters to my rows and then I want to grab。The
    last name column as well。 So if I run it this way instead， and then we look at
    our data frame。Then we can see that that change did go through。 So we were able
    to apply that filter and then set that last name equal to Smith in that data frame。
    So if you ever get these warnings like this that just pop up。
  prefs: []
  type: TYPE_NORMAL
- en: then definitely don't ignore them because you know， in this case。 it didn't
    even actually set the value that we thought that we were setting。 So you really
    need to be careful of stuff like that。 Okay。 so that's how we would update a single
    row of data。 So how would we update multiple rows of data。
  prefs: []
  type: TYPE_NORMAL
- en: Well， there's a couple of different ways that we could do this。 So for our for
    our first example。 let's just assume that we want to change all of the email addresses
    so that they are lowercase。 So this might be something that you want to do to
    make the email addresses easier to search。 So to do this we could just assign
    that column to the lowercase value of itself。 So first。
  prefs: []
  type: TYPE_NORMAL
- en: let me grab those lowercase values and to do this， we could just say D F。 And
    then we could access。😊，That email column。 And then that's going to return a series。
    And then we can just use this dot STr class on the series and use the lower method
    on that string class。 So if I run this。 then we can see what this returns is a
    lowercase version of all these emails。
  prefs: []
  type: TYPE_NORMAL
- en: if I look up here in the original data frame。 then these have mixed casing in
    there。 And now these are all lowercase。 Now， this just returns the lowercase values
    of these emails。 it didn't actually make that change。 Now， in order to make that
    change。 we can simply assign that column to this value。 So what I could do here
    is I could just say Df email is equal to Df email dot string dot lowercase。
  prefs: []
  type: TYPE_NORMAL
- en: So if I run this， and then we look at our data frame。 Now those changes actually
    did go through and all of our emails are now lowercase。 So that's one way that
    we can change multiple rows at once。 maybe。We want to do something a little more
    advanced。 So there are several ways that we can do this and we'll go over all
    four popular methods in order to do this。
  prefs: []
  type: TYPE_NORMAL
- en: and a lot of people get these four methods confused So let's go over each one
    individually and try to explain them in detail。 and there's definitely a good
    reason why people get these confused because they're very similar in what they
    do。 So the four methods that I'm going to be talking about are apply and map and
    apply map and replaces let me spell that correctly replace。 So first， let's take
    a look at apply。 So apply is used for calling a function on our values and apply
    can work on either a data frame or a series object and the behavior might be a
    little different than you expect for each of those different objects。
  prefs: []
  type: TYPE_NORMAL
- en: So first， let's look at how apply works for a series。 So when we use this on
    a series it can apply a function。To every value in our series。 So。 for example，
    let's say that I want to see the length of all of our email addresses。 Maybe we
    have a website， and we want to make sure that none of the email addresses are
    too long or something like that。
  prefs: []
  type: TYPE_NORMAL
- en: So I can apply the LN the length function to each value in our series by doing
    something like this。 I can say Df and access that email column and then I can
    say dot apply L。 So we'll apply that  L function。 And when I run that。 what we
    can see what it's doing here。 is it's saying， okay， the L of the first row email
    addresses was 23。
  prefs: []
  type: TYPE_NORMAL
- en: So I've never actually counted up the characters in my email address， but it's
    telling me it's 23。 And then this one says it's 17。 and then it says this one
    is 17。 So that's a quick little way that we can use apply to grab some information
    about our data。 So we can also use this to update values as well。 So in this example。
  prefs: []
  type: TYPE_NORMAL
- en: I'm just going to create a simple function that returns。The uppercase version
    of our email。 but the function can be as complicated as you want it to be。 So
    let me write a simple function here that does what I want it to do。 So I'm going
    to say let's say I'll call this function update email and this will take in an
    email value here and then I'll just return that email in uppercase。
  prefs: []
  type: TYPE_NORMAL
- en: So email dot upper so let me run this。 Now again， this is a super basic example
    here if I really wanted to uppercase the email addresses。 then I would just do
    the same thing that we did before when we made them lowercase but I just am using
    this as an example here。
  prefs: []
  type: TYPE_NORMAL
- en: So when we apply functions， it's usually to do some more advanced updates than
    what we're doing here but let's apply this function to our email column so to
    do this we could say Df and access that email column dot apply and then we can
    pass in that update email。
  prefs: []
  type: TYPE_NORMAL
- en: Function that we just wrote Now we don't want to execute this function。 So you
    don't want to put parentheses here。 You just want to pass in the function without
    parentheses so that we're passing in the function itself and not an executed version
    of itself。
  prefs: []
  type: TYPE_NORMAL
- en: so let me run this cell and we can see that now we're getting back a series
    here of our email addresses in uppercase。 Now if this doesn't actually change
    our values or change our rows like we saw before。 So to do this。 we can just assign
    that to our column。 So I can just take what we wrote here And then I can just
    set that series equal to that series with that applied function。 So if I run that，
    and then we look at our data frame。
  prefs: []
  type: TYPE_NORMAL
- en: then we can see that now our email addresses are all uppercase。 Now again。 this
    was a pretty simple function here。 All we did was return this email dot upper。
    Now for simple for simple functions like this。 you might see people use lambda
    function。As wellNow。 if you're not familiar with Lambda functions， basically。
  prefs: []
  type: TYPE_NORMAL
- en: they are anonymous functions with a specific name or without a specific name
    that we can use for things like this。 So here's what it would look like in this
    example。 So let's say that I wanted to convert these back to lowercase。 So what
    I could do is I will just grab this here。Now I'm going to use a pass in a lambmbda
    function here to dot apply instead of passing in that other function that we wrote。
  prefs: []
  type: TYPE_NORMAL
- en: So I'll say Lambda。 and if you're not familiar with lambda functions。 then the
    syntax can be a little weird here。 but basically we just have a no name function
    here。 and then what we want to return。 So I want to return X dot lower of that
    argument that we get passed in。 So if I run that， and then look at our data frame
    again。
  prefs: []
  type: TYPE_NORMAL
- en: then now we can see that we have the lowercase version of our email。 So if you're
    more comfortable writing regular functions， then you can do it this way。 But if
    you are comfortable writing lambda functions and your function isn't too complicated。
    then you can always do it this way like we did here。 now we're working with strings
    here。
  prefs: []
  type: TYPE_NORMAL
- en: but you can also use this with numbers where we can run any type of calculations
    that we want as well。 Okay， so this is how apply works on series objects。 So now
    let's look at how apply works with data。sSo far， we've only been using this with
    a series。 So anytime we access a column like this。 that returns a series。 And
    again， when we ran apply on the series。
  prefs: []
  type: TYPE_NORMAL
- en: it ran a function on all of the values in that series。 Now， when we run apply
    on a data frame。 it runs a function on each row or column of that data frame。
    So let's see what this looks like and it should make more sense。 So let me grab
    the example above where we ran the L function right here。
  prefs: []
  type: TYPE_NORMAL
- en: And let me copy this and paste this down here。 and then we'll take a look at
    what this looks like on a data frame。 So again， what this gave us was the length
    of each value in that email series。 So you might think that you can run this same
    apply method on the entire data frame and it'll give us the length of each value
    in the data frame。 but that's not what it does。 So let's see what that gives us。
  prefs: []
  type: TYPE_NORMAL
- en: So instead of accessing a specific column。 let's just say Df dot apply。 and
    pass in that L function。 So if I run this， then we get this response that you
    might not expect。 So what's going on here is that it's not applying the length
    function to every value in the data frame。 It's actually applying the length function
    to each series in the data frame。
  prefs: []
  type: TYPE_NORMAL
- en: specifically the columns。 So basically what this is telling us is that our first
    name column has a length of three。 So if we look up here at first we can see that
    first has three values。Teling us that last has three values and email has three
    values。 So that's just the number of rows in each column。 And we can get that
    same result for a specific series if we manually check the length of one of these。
  prefs: []
  type: TYPE_NORMAL
- en: So if I was to say Ly and access one of these columns。And ran this。 then we
    can see that gives us three。 So that's basically what apply is doing here on the
    data frame。 but it's doing it for every column。 and you can also have this apply
    to rows as well。 if you change the axis。 So we can change the axis here and say
    no。
  prefs: []
  type: TYPE_NORMAL
- en: I want to do this on the rows whoops， and I put row I meant to put rows。 So
    if I run this and I made another mistake here。 actually didn't need to put rows
    rows is the default。 I meant to put columns。 So if I put columns， then we can
    see that now we get three as well。 but now what it's doing here is it's counting
    it this way。
  prefs: []
  type: TYPE_NORMAL
- en: So it's saying okay one or row0 has three values， but it's saying， okay。 those
    values are corey Schffer and then the email it's not counting it downward。 So
    basically we want to use functions that will make sense to be used on a series
    object when using a apply on an entire data frame。 So for example， let's say that
    we wanted to grab the minimum value。From each column。 Well。
  prefs: []
  type: TYPE_NORMAL
- en: series objects have a min method。 So we could pass that in to apply and see
    the minimum value for each series。 Now， in our sample data frame， we have all
    string values。 So if we grab the minimum value from a series of strings。 then
    it'll just return the one the first one in alphabetical order。
  prefs: []
  type: TYPE_NORMAL
- en: So let's see what this would look like。 So we can come down here and we can
    say Df dot apply。 and now let me pass in that series min method。 So I could say
    Pd is what we imported panda as Pd dot series do min。 So if I run this。 then we
    can see， okay， it's saying that the one that comes first in the alphabet in the
    first category is Cory。 the one that comes first in the last names is do。 So that
    is， you know。
  prefs: []
  type: TYPE_NORMAL
- en: that's a D these two are E's that makes sense。 And then my email comes before
    these other two emails。 Now， it probably would have been better to take a look
    at this using。A series of numerical data instead， because with numerical data。
    this stuff you know obviously makes more sense。 So if we used series do min on
    numerical data。
  prefs: []
  type: TYPE_NORMAL
- en: then that would obviously give us the minimum values for each of those numbers
    and we can use lambda functions with this as well。 but you just have to remember
    that the lambmbda will be working on a series object。 So if I come down here I
    can say Df dot apply。 and now let's pass in a lambda。Now， this X here。 this X
    is going to be a series。 It's not going to be a value。 So what methods do a series
    have。
  prefs: []
  type: TYPE_NORMAL
- en: Well， a series has a min method。 So let's return the minimum value and run that。
    And we can see that that gives us the same response that this one up here gave
    us。 Now， like I said。 this is kind of a contrived example because we could get
    these same results by using the data frames Min method。 But I just wanted to point
    out how this actually works。
  prefs: []
  type: TYPE_NORMAL
- en: So this is way more useful when your data frame contains numerical data。 So
    for example。 we could use nupy to apply these square root for all of our series
    objects or any type of numerical analysis like that。 Okay， so running apply on
    a series applies a function to every value in the series。 And running apply to
    a data frame like we did here。
  prefs: []
  type: TYPE_NORMAL
- en: applies a function to every series in the data frame。 But you might be wondering
    if。Theres a way that we can apply a function to every individual element in the
    data frame。 And that's what apply map is used for。 and apply map only works on
    data frames。 series objects don't have the apply map method。 So let me show you
    how this is different。 So again。
  prefs: []
  type: TYPE_NORMAL
- en: let's use that same built in length function。 and pass that into apply map。
    So I'll say Df dot apply map。 And now let's pass in that built in length function。
    So if I run this。 then we can see that what this does is that it's now applying
    that length function to each individual value in our data frame。 So the first
    name had these many characters。 So first name mine was Cory。 So C O R E Y。
  prefs: []
  type: TYPE_NORMAL
- en: that's five characters。 and then Jane and then John。 So those are four characters。
    And we saw the length of the emails before 231717。 So that's what this is doing
    here。 It's applying that function to every。ual element of our data frame。 So this
    might be how some of you expected the apply method to work on a data frame。
  prefs: []
  type: TYPE_NORMAL
- en: but instead we use apply map for this。 Now I know that this can be a bit confusing
    but hopefully after seeing those differences。 it makes a little bit more sense
    of when we would want to use which So for example since we have an entire data
    frame full of strings in this example if I wanted all of them to be lowercase
    then I could just do something like this I could say Df do apply map and then
    I can just pass in the string do lower method。
  prefs: []
  type: TYPE_NORMAL
- en: so if I run this then we can see that now all of the values in that data frame
    are lowercase。 Now if you had numerical data in your data frame then you would
    get an error here since you can't run string methods on numbers so you'd need
    to pass in a more complicated function that handles that appropriately so now
    we've looked at apply and apply map and hopefully those make more sense to you
    now。
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at the map method。 Now， the map method only works on a series。
    So map is used for substituting each value and a series with another value。 So
    for example。 let's say that we wanted to substitute a couple of our first names。
    So to do this。 I could say Df and access that first name column which is also
    a series and then I can use the map method on this。
  prefs: []
  type: TYPE_NORMAL
- en: And now I'm going to pass in a dictionary of the values that we want to substitute。
    So let's say instead of Cory， I want to pass in Chris， and instead of Jane。 I
    wanted to pass in a value of Mary。 So if I run this。 then we can see that that
    returns a series where those first names were substituted out。
  prefs: []
  type: TYPE_NORMAL
- en: So Cory was the first value here。 Now it's Chris Jane is now Mary。 Now one thing
    that I do want to point out here。 is that the values that we did。Substitute were
    converted to N N values， not a number of values。 Now that may or may not be what
    we want。 And I'll show an example of this when we look at some real world stack
    overflow examples。
  prefs: []
  type: TYPE_NORMAL
- en: Now in this example， we likely wouldn't want to get rid of these other names。
    So you might be thinking， okay， well， what if I wanted to keep John。 but just
    substitute these other names。 So if that's the case， then instead of using map。
    we can instead use the replace method。 So instead of doing what we did here。
  prefs: []
  type: TYPE_NORMAL
- en: Ill just copy this paste this in here， instead of using map， I can use replace。
    And if I run this。 then now we can see that it's basically the exact same result
    here。 except now we actually have it didn't replace John with an N A N value。
    And again。 everything that we've done here doesn't actually change the data frame。
  prefs: []
  type: TYPE_NORMAL
- en: if we wanted to set this to the actual column。 then we would have to do some。Thing
    like this。 We could say that that Df first column is equal to that replaced version
    of the data frame。 So if I run this， and then I look at our entire data frame。
    then now we can see that those values were substituted。 Okay。
  prefs: []
  type: TYPE_NORMAL
- en: so now that we've looked at a lot of different ways of updating information
    in our rows and columns。 Now let's go over to our larger data set and look at
    some realw worldld examples of how we can apply what we've learned here。 So let
    me go over to my stack overflow survey data here。 So we have our stack overflow
    survey notebook open here。
  prefs: []
  type: TYPE_NORMAL
- en: that we've been using throughout this series。 And again。 if you'd like to download
    these notebooks or the stack overflow data in order to follow along then the links
    for all this are in the description section below。 Okay， so let's apply some of
    what we learned here to this data。 So in the last video where we covered filtering。
    We looked at filtering salaries over a certain amount。
  prefs: []
  type: TYPE_NORMAL
- en: and the column name for salary。 it is over here somewhere。It is this one here。
    Con comp。 Now。 I'm assuming that short for converted compensation。 and that is
    converted to United States dollars。 So let's say that we wanted to rename that
    column to where it was a bit more clear。 So instead。 I'm going to rename this
    column to salary USD instead of converted comp。
  prefs: []
  type: TYPE_NORMAL
- en: So if we remember from earlier in the video。 we can do this with the rename
    method。 So if I come down here， then I can say Df dot rename。 and then we can
    just pass in the columns that we want to rename。 So I'll pass in a dictionary
    here。 but this is only going have one value。 So we want to change converted comp。
  prefs: []
  type: TYPE_NORMAL
- en: and we want to set that to I'll call this salary USD。 So if I run this。 then
    let me go over here and see if this looks good。 Okay， so that looks good。 that
    changed。 Now after you make sure that it made the change that you wanted at the
    May。And that it's not a mistake。 then we can actually apply that to our data frame
    by setting in place is equal to true。
  prefs: []
  type: TYPE_NORMAL
- en: Now that's why in place equal to true is actually a good idea because sometimes
    you know when you're working in pandas we're always doing these different types
    of renames and filters and things like that and sometimes we're going to do things
    wrong So it's always better to check and make sure that it made the change that
    you meant to make first and then apply that change to your data frame to actually
    make the solidify those changes So now let's see if we have access to that salary
    USD column And if I look at that。
  prefs: []
  type: TYPE_NORMAL
- en: then we can see that we do have a salary USD column in this data frame so that
    change did work okay so what is something else that we can do here to see what
    we have already learned okay so here's an example here。We've looked at this hobbyist
    column a few times in this series。
  prefs: []
  type: TYPE_NORMAL
- en: This is a column where people answered on the survey。 whether they code as a
    hobby in their free time。 And let's look at this column real quick。 We can kind
    of see it here。 It has a bunch of yes， yes， no values。 Let me actually print this
    out down here。 So I will access that hobbyist column。
  prefs: []
  type: TYPE_NORMAL
- en: And we can see that this is a bunch of yes， no values here。 So let's say that
    we wanted to convert these values and map all of the yes responses to a true Boolean
    value and the no to false。 So how would we do this。 Well， one way that we could
    do this is with the map method that we just learned about。 So what we could do
    is we could say。😊，D F hobbyist dot map。
  prefs: []
  type: TYPE_NORMAL
- en: and then pass in a dictionary here of of the substitutions that we want to make。
    So for the yes values， I will convert this to a boolean of true。 And for the no
    values。 I will convert this to a boolean of false。 So if I run this， then if we
    compare。The results that we got up here and the results that we're getting down
    here。
  prefs: []
  type: TYPE_NORMAL
- en: we can see that all the yeses are mapped to true and all the nos are mapped
    to false。 Now。 I don't believe there' is actually an in place argument for map。
    So what we can do here is we can just set that series。And set that equal to the
    mapped version of that series。 So now。
  prefs: []
  type: TYPE_NORMAL
- en: if I run this and look at our data frame， now we can see that that entire column
    is now true false values instead of yes。 no values。 Now， remember， when we use
    map， then anything that isn't in our dictionary here。 So anything outside of a
    yes or no answer would be converted to an in a in value。 I think there are other
    columns in this survey where there are yes。
  prefs: []
  type: TYPE_NORMAL
- en: no and not sure answers or something like that。 So if we only wanted to replace
    the yes or no values and leave the others untouched。 then instead， we could use
    the replace method instead， But map works for this example。 because I know that
    this column only has yes and no。 Okay。 so that is a quick review of some of what
    we learned in this video。
  prefs: []
  type: TYPE_NORMAL
- en: I'm not going to go over everything again since this video is already getting
    a little。Long。 but I did want to show you some examples of how updating values
    works when and how this can be applied to real worldl data like this survey so
    before we end here I would like to mention that we do have a sponsor for this
    video and that sponsor is brilliant org。
  prefs: []
  type: TYPE_NORMAL
- en: So in this series we've been learning about pandas and how to analyze data in
    Python and brilliant would be an excellent way to supplement what you learn here
    with their handson courses they have some excellent courses and lessons that do
    a deep dive on how to think about and analyze data correctly for data analysis
    fundamentals。
  prefs: []
  type: TYPE_NORMAL
- en: I would really recommend checking out their statistics course which shows you
    how to analyze graphs and determine significance in the data and I would also
    recommend their machine learning course which takes data analysis to a new level
    where you about the techniques being used that allow machines to make decisions
    where there's just too many variables for a human to consider so to support my
    channel and learn more about brilliant you can go to brilliant org cs to sign
    up for。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_3.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_4.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_5.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_6.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_7.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_8.png)'
  prefs: []
  type: TYPE_IMG
- en: And also， the first 200 people that go to that link will get 20% off the annual
    premium subscription。 and you can find that link in the description section below。
    Again， that's brilliant。 org for/ cS。Okay， so I think that's going to do it for
    this pandas video。 I hope you feel like youve got a good idea for how we can update
    the information within our rows and columns。
  prefs: []
  type: TYPE_NORMAL
- en: We started off a bit simple making changes in specific spots。 and then going
    a little more advanced when we learned about apply map and apply map。 Now。 I know
    that those can be confusing to some people。 But hopefully you feel like you got
    an understanding of how each of those work。 Now， originally。
  prefs: []
  type: TYPE_NORMAL
- en: I was also going to show how to add and remove rows and columns in this video。
    But this is getting a bit long。 So I'm just going to save that for our next video。
    So in the next video， we'll learn how to add and remove rows and columns from
    our data frame。 And that should be a much shorter video。 But if anyone has any
    questions about what we covered in this video。
  prefs: []
  type: TYPE_NORMAL
- en: then feel free to ask in the comment section below and I'll do my best to answer
    those。 And if you enjoy these tutorials and would like to support them。 then there
    are several ways you can do that。 the easiest ways to simply like the video and
    give a thumbs up。 And it's always a huge help to share these videos with anyone
    who you think would find them useful。
  prefs: []
  type: TYPE_NORMAL
- en: if。😊，The means you can contribute through Patreon。 and there's a link to that
    page in the description section below。 be sure to subscribe for future videos。
    and thank you all for watching。![](img/e5b1b0669b3d37c98e40fb48d9e86bdf_10.png)
  prefs: []
  type: TYPE_NORMAL
