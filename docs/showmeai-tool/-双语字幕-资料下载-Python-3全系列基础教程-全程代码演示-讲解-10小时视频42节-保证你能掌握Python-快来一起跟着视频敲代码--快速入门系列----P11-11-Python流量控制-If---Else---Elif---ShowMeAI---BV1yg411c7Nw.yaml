- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P11：11）Python流量控制：If - Else - Elif - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P11：11）Python流量控制：If - Else - Elif - ShowMeAI - BV1yg411c7Nw
- en: '![](img/2a40144e853e0fb381a136e2639194ad_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a40144e853e0fb381a136e2639194ad_0.png)'
- en: Welcome back everyone。 My name is Brian， let's continue our journey with Python
    3。 So in this video we're going to talk about if else and ElF。 what are these
    three things Well it is simple flow control when we talk about flow。 We're talking
    about the flow of an application and this is the basic building blocks for that
    flow control。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，大家好。我是Brian，让我们继续我们的Python 3之旅。在这个视频中，我们将讨论if else和ElF。这三者是什么呢？其实很简单，这是流程控制。当我们谈论流程时，我们在谈论应用程序的流，而这是流程控制的基本构建块。
- en: Before we dive in， we need to talk about some basic theory。 Don't worry。 I'm
    going to keep it super short。 We have a variable。 Let's call it X and x is true。
    A very simple bull。 We can turn it on。 We can turn it off。Now， we're talking about
    flow control。 Think of flow control。 Like when you were a child and your parent
    looked at you and said。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入之前，我们需要谈谈一些基本理论。别担心。我会保持超级简短。我们有一个变量。我们称之为X，而x为真。一个非常简单的布尔值。我们可以打开它。我们可以关闭它。现在，我们在讨论流程控制。把流程控制想象成，当你还是个孩子时，你的父母看着你说。
- en: if you do this， then this is going to happen。 That's essentially what we're
    talking about。 It's a decision。 It's not super hard to wrap your head around，
    but it does take some explanation。 So X equals true。 We've got our if statement。
    And if it's going to function on some sort of condition。 condition。Most of the
    time will evaluate to true or false。So we're going to say if x equals true。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你这样做，那么将会发生这个。这就是我们要讨论的本质。这是一个决策。理解起来并不是特别困难，但确实需要一些解释。所以X等于真。我们有我们的if语句。如果它将在某种条件下运行。条件。大多数情况下将评估为真或假。所以我们将说如果x等于真。
- en: Then， do something。We'll have some code that'll run if it's true and we'll have
    some code that'll run if it's false。Now， this is not always the case。What I mean
    by that is sometimes this over here simply doesn't exist。You're only going to
    evaluate for true， but you can do things like， say， if it's true。 do this else
    do that。 And it can read like a book。 You can literally say， if Bob。Equals happy。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，做一些事情。如果它为真，我们将有一些代码会运行；如果它为假，我们也会有一些代码会运行。现在，这并不总是这样。我所说的意思是，有时候这边根本不存在。你只会评估为真，但你可以做这样的事情，比如说，如果它是真的。就这样，否则就那样。它可以像一本书一样阅读。你可以字面上说，如果Bob.Equals快乐。
- en: then do something if Bob is not happy， do something else。It's really that simple。However。
    you need to understand this is the fundamental building block of almost all applications。This
    is called flow control， you are controlling the flow of the application's logic。All
    right。 enough theory。 Let's die right。 in we're going to look at if conditions，
    so。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Bob不高兴，那就做其他事情。就是这么简单。然而，你需要明白这是几乎所有应用程序的基本构建块。这叫做流程控制，你在控制应用程序逻辑的流。好吧。足够的理论。让我们直接开始。我们将查看if条件，所以。
- en: We're going to create a variable called X。 and we're going to say it is true。
    This is just simply a bull。 we've seen this before。Now I'm going to say if and
    you notice Al in V S code， it gives us these little templates。 We're just going
    to do normal if。We're going to say if x。Polen。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个叫做X的变量。并且我们将说它是真的。这只是一个布尔值。我们以前见过这个。现在我要说if，你会注意到在VS代码中，它给了我们这些小模板。我们只会做普通的if。我们将说if
    x。Polen。
- en: and now we want to print something out。Let's go ahead and run this and see what
    happens。And it says yes。 So our programming logic is x is true。 And if x， notice
    how I just said if x。 we could have said if x。Equals true。Then it's going to print
    this out。 but it knows it's smart enough to know you don't really need that。Also
    notice this in depth。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想打印一些内容。让我们运行这个，看看会发生什么。结果显示是的。所以我们的编程逻辑是x为真。如果x，注意我刚刚说的if x。我们可以说if x.Equals
    true。那它将打印出来。但它知道，你实际上不需要那样。还要注意这一点的深入。
- en: we've talked about this a little bit before and this colon so if you're coming
    from another programming language。This is really what it looks like under the
    hood。You have these brackets as everybody loves and。 you know， C plus plus C sharp
    JavaScript， all the C style languages and the code's pretty much indented Well
    Python does away with that so all of this。It's converted into that。 and it's much
    shorter， much easier to read。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前谈过这个，还有这个冒号，所以如果你来自其他编程语言。这实际上是底层的样子。你有这些括号，大家都喜欢，C++、C#、JavaScript，以及所有C风格的语言，代码基本上是有缩进的。而Python省略了这些，所以所有这些都转换成那样。而且它更简短，更容易阅读。
- en: You don't have all these weird sggly lines you got to worry about。Now you can
    continue to execute。As long as it's on the same indent。For example。X is true if
    X print yes and again。See yes and again。Now we are going to say else， and this
    is where we pop back。Need that right there to tell Python that we've got more
    coming。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要担心那些奇怪的波浪线了。现在你可以继续执行。只要它在同一个缩进下。例如，如果X为真，则打印yes和again。看看yes和again。现在我们要说else，这就是我们返回的地方。需要在这里告诉Python我们还有更多内容要处理。
- en: And we're going to just simply print oh。What's going to happen when we run this？Well，
    x is true。 so if x， and then it's going to run this。Else， it will run that else
    is funny because else says。 hey， if this didn't happen， then instead run this
    code here。Whenever you see these indents。 think of this as a block of code， it's
    actually called scopepe。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简单地打印哦。当我们运行这个时会发生什么？好吧，x为真。所以如果x，然后它会运行这个。否则，它将运行那个else很有趣，因为else说。如果这没有发生，那么就运行这里的代码。每当你看到这些缩进时。把它想象成一个代码块，实际上称为作用域。
- en: So this would be a scope and this would be a scope。 it's a much more complex
    topic that we'll cover in a future video but I want you to be aware that exists
    let's go ahead and run you see yes and again it never printed no。I'm going to
    say help， I mean， just to make sure this really stands out on the screen。 Run
    it again。 We never see it。Why， because this is true？If x。Then print this out。
    It never jumps to L。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这将是一个作用域，这也将是一个作用域。这是一个更复杂的话题，我们将在未来的视频中讨论，但我希望你知道它的存在。让我们继续运行，你会看到yes和again，它从未打印no。我将说help，意思是确保这在屏幕上真的很突出。再运行一次。我们从未看到它。为什么，因为这是对的？如果x。那么打印这个。它从未跳到L。
- en: So let's change this defaults。And you'll get a feeling for how programming logic
    takes place。 X is now false。It's going to say if X。Print these else， print that。So
    what's going to happen here is it's going to get to x and say， nope， X is not
    true。 so ignore this block of code and instead jump down to else and run this
    block of code， see help。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们更改这些默认值。你会感觉到编程逻辑是如何进行的。X现在为假。它会说如果X。打印这些else，打印那个。那么这里会发生什么呢？它会到达x并说，不，X不为真。所以忽略这个代码块，而是跳到else并运行这个代码块，看看help。
- en: '![](img/2a40144e853e0fb381a136e2639194ad_2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a40144e853e0fb381a136e2639194ad_2.png)'
- en: Works as expected。![](img/2a40144e853e0fb381a136e2639194ad_4.png)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按预期工作。![](img/2a40144e853e0fb381a136e2639194ad_4.png)
- en: So what we've really been talking about is condition evaluations。 and they're
    pretty much going to be true or false， meaning true， run it or false。 don't run
    it or just do something completely different。Let's take a look at some condition
    evaluations here。 So I'm going to say x equals 100。Y equals 25。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上讨论的是条件评估。它们基本上会是真或假，意味着真，就运行；假，就不运行，或者做一些完全不同的事情。让我们来看一些条件评估。我将说x等于100，y等于25。
- en: So I'm just creating two little variables here and let'll say if。 and we're
    going to say y equals x。We want to tell Python there's more coming。And we're going
    to print this out。 Not I'm doing this all on one line。 you don't necessarily need。To
    do these tab indents。 you can do everything on one line if you want to。So we're
    saying if y is equal to x。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我只是创建了两个小变量，我们将说如果。我们要说y等于x。我们想告诉Python还有更多内容要来。我们要打印这个。注意我在一行上完成这一切。你不一定需要做这些制表符缩进。如果你愿意，可以在一行上完成所有内容。所以我们在说如果y等于x。
- en: notice there's two equal signs。 If you do this， you're saying make y the value
    of x。 and we don't want that。 We want to test for equality here。We're going to
    say。be个潮。And we can just through the magic of copy and paste， speed this up just
    a little bit here。And we're going to look at our condition evaluators here。 So
    I'm going to say if y is not equal to。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意有两个等号。如果你这样做，你是在说让y等于x的值。我们不想要那样。我们想在这里测试相等性。我们将说，be个潮。通过复制和粘贴的魔力，我们可以稍微加快这个过程。我们将查看我们的条件评估器。所以我将说如果y不等于。
- en: And then we can say less than。So if y is less than x。And I want to say greater
    then。 So if wise is greater than what we're really getting at here is you can
    do some really。Complex decision making based off values。And they're very simple。
    very easy to understand all you need to do is understand the symbols。For example。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以说小于。所以如果 y 小于 x。而我想说大于。所以如果 wise 大于，这里真正要表达的是，你可以基于值进行一些非常复杂的决策。它们非常简单，易于理解，你所需要的只是理解符号。例如。
- en: this guy right here looks super confusing， but we're saying if y is less than
    or equal to。Notice how you have this compound here， so now this gets really complex
    and you've got it all on one line。 but it is super convenient to do that。And you
    can do the exact app。 but you can say greater than or equal to。Let's go ahead
    and test this out here。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个家伙看起来超级混乱，但我们在说如果 y 小于或等于。注意你有这个复合条件，所以现在这变得非常复杂，并且你把它都放在一行中。但这样做是非常方便的。你也可以做确切的应用，但你可以说大于或等于。我们来测试一下。
- en: so we're going to run this and you can see it doesn't print everything。It says
    not equal to less than and less than or equal to， so what's going on here？
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要运行这个，你可以看到它并没有打印出所有内容。它说不等于、小于和小于等于，那么这里到底发生了什么？
- en: We're evaluating y versus x， so we're saying is y equal to x， Well it's not。
    there're two different values。So it's not going to run this code。 This is what
    I mean by the condition evaluations will go to true， run it or false， not run
    it。There are other ways of doing it， but we're keeping things super simple。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在评估 y 与 x，所以我们在说 y 是否等于 x，实际上并不相等。它们是两个不同的值。所以它不会运行这段代码。这就是我所说的条件评估会变为真，执行代码，或者为假，不执行代码。还有其他方法，但我们保持超级简单。
- en: And then we're saying if y is not equal to x， which is going to evaluate the
    true because those two are not equal。 then print this out and sure enough we see。Not
    equal to I'm not going to go through each line。 but you can kind of view and see
    which one of these evaluate to true， for example。Is y greater than x。Well， of
    course， it's not 25 is less than hundreds， so this will never run。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在说如果 y 不等于 x，这将评估为真，因为这两个是不相等的。那么打印这个出来，果然我们看到了。不等于。我不会逐行讲解，但你可以查看并看到这些哪个评估为真，例如。y
    大于 x 吗？当然不是，25 小于 100，所以这永远不会运行。
- en: and we don't see it down here。Now， if we change this value。You'll notice the
    output changes as well Now it's not equal。 but it's greater than and greater than
    or equal to。This is extremely cool and is extremely flexible。 Now， you start to
    understand our computers make decisions。 It's based off simple， if logic。😊。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 而且我们在这里看不到它。现在，如果我们改变这个值。你会注意到输出也会变化。现在它不等于，但它大于或大于等于。这是极其酷且灵活的。现在，你开始理解我们的计算机是如何做决策的。它基于简单的
    if 逻辑。😊
- en: If this statement or this condition evaluates to true， then run some specific
    code。![](img/2a40144e853e0fb381a136e2639194ad_6.png)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个语句或这个条件评估为真，那么执行一些特定的代码。![](img/2a40144e853e0fb381a136e2639194ad_6.png)
- en: '![](img/2a40144e853e0fb381a136e2639194ad_7.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a40144e853e0fb381a136e2639194ad_7.png)'
- en: All right， all of this seems pretty cool。 but look at this。 it's kind of a jumble
    mess。 It's just this big wall of if statements。 it's very hard to read。 There's
    no indentation。 then you got to kind of read through every single one to find
    the one you're looking for。Let's talk about LF， which is really a switching solution，
    when I say switching。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这一切看起来都很酷，但看看这个。这有点混乱。它只是一大堆 if 语句。阅读起来非常困难。没有缩进。然后你得逐个阅读才能找到你想要的。我们来谈谈 LF，这实际上是一种切换解决方案，当我说切换时。
- en: Other languages have a concept called a switch， which is just like think of
    a big panel of light switches you can turn them on and off。 Python doesn't really
    have that concept。 There's ways around it。 but it doesn't really have that specific
    concept。So let's look at a way of getting around this。 So I'm going to say x is
    10。 Now we want a bank of switches。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其他语言有一个叫做 switch 的概念，就像想象一个大型的灯开关面板，你可以开关它们。Python 并没有这个概念。有变通的方法，但它并没有这个特定的概念。所以让我们看看如何绕过这个。我要说
    x 是 10。现在我们想要一个开关组。
- en: We want to be able to turn code on and off at will。So I'm going to say if。X。Equals
    25。 Then we're just going to print out。Segals 25。Now， we want to take this and
    kind of smash it into something without doing a completely new if statement。 We
    want this to stay all in one line， because believe it or not， these are two different
    statements。 and they'll execute separately。So what we're going to do here is L
    F。X。Equals 50。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够随意开启和关闭代码。所以我将说如果。X 等于 25。那么我们只需打印出。Segals 25。现在，我们想把这个合并成一个不完全新的 if 语句的东西。我们希望这一切保持在一行，因为信不信由你，这实际上是两个不同的语句。它们将分别执行。所以我们要做的是
    L F。X 等于 50。
- en: So really now it's going to read this as one giant line， so it's going to say
    if x is 25。 execute this， else， if x is 50， execute this。And we can just take
    this concept and keep expanding on it。Go ahead。Say if。X is 75。And let's go ahead
    and say 100。We can end this and say， you know what。 If we didn't find any of these
    switches using the L A statement。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在它将把这一切作为一行来读取，因此它将说如果 x 是 25。执行这个，否则，如果 x 是 50，执行这个。我们可以将这个概念不断扩展。继续。说如果
    X 是 75。然后我们可以说 100。我们可以结束这个，说你知道吗。如果我们没有找到任何这些开关，使用 L A 语句。
- en: we can simply say else and then make what's called a catch all。Which is going
    to execute if none of these fired off。So it's at 10。 Let's see what's going to
    happen here。It triggered our catch all， see？
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地说 else，然后做一个称为捕获所有的内容。如果没有这些触发，它将执行。所以它在 10。让我们看看这里会发生什么。它触发了我们的捕获所有，看到了吗？
- en: So it went through and evaluate and says is x 25， no， is it 50， is it 75 is
    it 100。Else fired off。 let's switch this to 75， see what happens。You can see now
    it just says x is 75。 So what's going on here is it says。Evaluate this， evaluate
    this， evaluate this， turn to true。Run this code now we're done， so it'll jump
    all the way out。Very simple， very easy logic。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它遍历并评估并说 x 是 25 吗，不，是 50 吗，是 75 吗，是 100 吗。Else 被触发。让我们把这个改为 75，看看会发生什么。你可以看到现在它只说
    x 是 75。那么这里发生了什么呢？它说。评估这个，评估这个，评估这个，转为真。现在运行这段代码，我们完成了，所以它将跳出所有。非常简单，非常容易的逻辑。
- en: and it looks much better than just this giant wall of text。 Super easy to follow。As
    you dive deeper and deeper into a programming， you're going to find there's always
    another way of doing it if you didn't like L if。 there is another way。And it's
    called nested or nestled statements。 And this is basically a statement in a statement
    in a statement in a statement。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来比这堵巨大的文字墙好得多。非常容易理解。随着你深入编程，你会发现如果你不喜欢 L，还有另一种方法。还有一种方法，称为嵌套语句。这基本上是一个语句中的语句中的语句中的语句。
- en: And you can go on forever and ever and ever。 Let's go and take a look。 So I'm
    going to say x equals。 and let's just pick a number randomm 82。 And we're going
    to say it X。Is greater than 50。Frince。And'll say over 50。But wrap that in some
    quotes here。And because it's over 50， we want to keep going。 So I want to say
    e x is well， greater than 60。Then。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以一直继续下去。让我们去看看。所以我将说 x 等于，并且我们随便选一个数字 82。我们说它 X 大于 50。然后我们说超过 50。但把这个放在一些引号里。因为它大于
    50，我们想继续。所以我想说 e x 实际上，大于 60。然后。
- en: and we can use the same logic over and over and over。 And this now becomes a
    very repetitious pattern。So for example。 I can just say this and we just grab
    this and keep going。Notice how the indents get bigger and bigger and bigger。You
    have to do this otherwise。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以一次又一次使用相同的逻辑。这样就形成了一个非常重复的模式。例如。我可以这样说，我们只需抓住这个并继续。注意缩进是如何越来越大的。你必须这样做，否则。
- en: Python considers that a new statement。So for example， this would actually create
    a problem here。 It's not going to execute the way we want it to。 So what we need
    to do is indent， indent and。And this is what I love about VS code is it puts these
    lines where the indent is。So now you can see this is a statement。This is a statement。And
    so on and so on， and it gets very。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Python 将其视为一个新语句。因此，例如，这里实际上会创建一个问题。它不会按照我们想要的方式执行。因此，我们需要缩进，缩进。这就是我喜欢 VS Code
    的原因，它在缩进的位置放置这些行。现在你可以看到这是一个语句。这是一个语句。依此类推，它变得非常。
- en: very cool very quickly。Now， sometimes pasting betrays you and you just simply
    got to tab it over again。 the lines will be your guide and literally tell you
    where you to go。So let's say。If it's over 90。And I don't want to take this too
    ridiculous。Let's go ahead and say。F。X is greater than or equal to 100。 And we're
    just going to end it here。Pri。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 非常酷，非常迅速。现在，有时候粘贴会背叛你，你必须重新缩进。行会是你的指引，真的告诉你该去哪里。假设，如果超过90。我不想让这变得太荒谬。我们继续说，F。X大于或等于100。我们就到这里结束。Pri。
- en: Let's just say that X stood for some sort of progress。Now。 we've got some issues
    here right off the bat。 you I saw this little squiggly line here it's saying unexpected
    indent。 so we've got to back this out here。And fix our indentations。Oh didn't
    like that。 so we can just grab this whole thing and in then it。Should fix it，
    there it goes。Save and run。 Oh。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就说X代表某种进展吧。现在，一开始我们就遇到一些问题。我看到这个小波浪线，它表示意外的缩进。所以我们得把这个退回去，修正我们的缩进。哦，它不喜欢这个。所以我们可以抓住整个内容，然后把它放进来。应该修复了，看，成功了。保存并运行。哦。
- en: we have another indentation error。 Let's see what's going on here。So this is
    the part of Python that will drive you absolutely bonkers。 If you don't have your
    indentation right， it will let you know， and you'll get an indentation error。Now
    that all my indentations are fine， it should run as expected。So which one would
    you use Well。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们又遇到了一个缩进错误。看看这里发生了什么。这是Python的一部分，会让你感到非常烦躁。如果你的缩进不正确，它会告诉你，并且你会收到缩进错误。现在我的所有缩进都正确，它应该按预期运行。那么你会使用哪个呢？好吧。
- en: it depends。 So， for example， in this scenario， we have what's called fall through，
    meaning x is 82。 So it's going to evaluate true， jump to the next one， true， jump
    to the next one true。And jump to the next one true。 And then it's suddenly fault。
    So it stops executing here。 even though there's more of the statement。 and you
    have these lovely little indents love them or hate them that you have to contend
    with。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于情况。所以，例如，在这个场景中，我们有所谓的“落空”，意味着x是82。所以它会判断为真，跳到下一个，真，再跳到下一个，真。然后再跳到下一个，真。接着突然故障。所以它在这里停止执行，尽管还有更多语句。而且你得面对这些可爱的缩进，爱它们或恨它们。
- en: Remember， the indentations tell Python where you are in the programming logic。😊。So
    some people like Liv， some people like fall through expect to see both of those
    out in other people's source code choose the solution that works right for you。
    My personal preference is for LF。![](img/2a40144e853e0fb381a136e2639194ad_9.png)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，缩进告诉Python你在编程逻辑中的位置。😊 所以有些人喜欢Liv，有些人喜欢落空，期待在其他人的源代码中看到这两者，选择适合你的解决方案。我的个人偏好是LF。![](img/2a40144e853e0fb381a136e2639194ad_9.png)
