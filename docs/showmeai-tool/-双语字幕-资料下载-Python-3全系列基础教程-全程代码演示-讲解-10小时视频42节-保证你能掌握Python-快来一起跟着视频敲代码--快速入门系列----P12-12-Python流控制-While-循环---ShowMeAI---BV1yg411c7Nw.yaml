- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P12：12）Python流控制：While 循环 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P12：12）Python流控制：While 循环 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/84eadd930b0b3e75c98ca900a0885b35_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84eadd930b0b3e75c98ca900a0885b35_0.png)'
- en: Welcome back everyone， my name is Bryant， let's continue our journey into Python
    3。We're going to talk about the while loop。 This is basic flow control。 and it's
    going to prove a point your computer is very stupid。 And yes， I said what I said。
    your computer is just very dumb， and we're going to prove that。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，大家好，我是Bryant，让我们继续我们的Python 3之旅。我们要讨论while循环。这是基本的流控制。它将证明一点：你的计算机非常愚蠢。没错，我说的就是这样。你的计算机真的很笨，我们将证明这一点。
- en: So a loop is just simply completing code over and over and over again until
    you tell it to stop because the computer isn't smart enough to know when to quit。![](img/84eadd930b0b3e75c98ca900a0885b35_2.png)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以循环就是简单地重复执行代码，直到你告诉它停止，因为计算机并没有足够聪明去知道何时退出。![](img/84eadd930b0b3e75c98ca900a0885b35_2.png)
- en: Let's take a look。![](img/84eadd930b0b3e75c98ca900a0885b35_4.png)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看。![](img/84eadd930b0b3e75c98ca900a0885b35_4.png)
- en: Okay， little bit of theory here before we move on， we have the entrance of our
    program and we're going to jump down into some sort of loop。Let's call this our
    loop here。And it's going to evaluate this and run some type of code。 Now it doesn't
    really matter what type of code it runs。Let's get rid of that little guy。Usually
    what you're doing is some sort of incremental function。 for example， count something。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在继续之前我们先来一点理论，我们有程序的入口，我们将进入某种循环。我们就称之为这个循环。它会评估这个条件并运行某种类型的代码。现在不管它运行什么类型的代码都没关系。让我们把那个小家伙去掉。通常你所做的是某种递增的功能。例如，计数某些东西。
- en: increase the number， look for data on a socket or something like that。 So it's
    going to say， okay。 start the loop。So I want to connect there， there we go。And
    do something。If。You don't exit this loop。 it just literally goes right back into
    the loop， and your program ends up looking something like this。We call this an
    infinite loop where you will enter the program， go into a loop。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 增加数字，查找套接字上的数据或类似的东西。所以它会说，好的，开始循环。所以我想在这里连接，来了。然后执行某些操作。如果你不退出这个循环，它就会真的回到这个循环里，你的程序最终看起来会像这样。我们称之为无限循环，你将进入程序，进入一个循环。
- en: and then you just loop this code over and over and over again until you tell
    it to well。 stop and do something else。You may be asking yourself， why do you
    even need a loop。 well think about it。You enter your program。 You come down into
    your loop。 and let's say you want to do something 100 times。 You need to now increment
    some sort of counter。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你就反复循环这个代码，直到你告诉它停止并执行其他操作。你可能在问自己，为什么你甚至需要一个循环。好吧，想一想。你进入你的程序。你进入你的循环。假设你想做某件事100次。你现在需要增加某种计数器。
- en: Once you've hit that counter， you jump out of this loop and you stop your code。There
    are some loops out there that are intentionally infinite。 And what I mean is they
    look like this。The program starts， you enter your loop。 and then it just loops
    forever。For example， when you in and do graphic user interface programming。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你达到了那个计数器，你就跳出这个循环并停止你的代码。有一些循环是故意设计为无限的。我的意思是它们看起来是这样的。程序开始，你进入你的循环。然后它就会永远循环。例如，当你进行图形用户界面编程时。
- en: you have what's called the user interface loop or the event loop。 which is basically
    the program will run forever waiting for the user to like click a mouse or move
    something around。That loop just happens forever and ever until the program closes。![](img/84eadd930b0b3e75c98ca900a0885b35_6.png)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个叫做用户界面循环或事件循环的东西。基本上程序将永远运行，等待用户点击鼠标或移动某些东西。这个循环就会永远发生，直到程序关闭。![](img/84eadd930b0b3e75c98ca900a0885b35_6.png)
- en: All right， now that we understand what a loop is， Let's take a look at it in
    practice。 So I'm going to say x equals 0。 and we're going to create our while
    loop。And this is going to look very similar to an if statement because it's going
    to evaluate it just like an if statement would。 Mean this loop will execute as
    long as the condition we're about to give it。 It is true。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们理解了循环是什么，让我们看看实际操作。所以我要说x等于0。我们将创建我们的while循环。这将看起来非常类似于if语句，因为它会像if语句一样评估。意味着这个循环将执行，只要我们即将给出的条件为真。
- en: Some say act of lesson than 10。Then do something。 And this is going to be a
    great example of how computers are dumb。 They do what you tell them to。As you
    tell them to do it。Little bit of bonus。 Any see a problem with this statement。
    But what we're saying is x is 0， while x is less than 10。Prennt this， but we're
    never incrementing X。 It's always going to be 0。 So this will always be true。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有人说教训的行为少于10。那么就做点什么。这将是一个关于计算机愚蠢的很好的例子。它们会按你告诉它们的方式去做。正如你所要求的那样。有一点额外的。你看到这个陈述有问题吗？但我们所说的是x是0，而x小于10。打印这个，但我们从不增加X。它始终是0。因此，这将始终为真。
- en: and it'll just run forever。 That's the infinite loop I was telling you about。
    See how it just says0。 And it's going to run forever and ever。 And that console
    is just going crazy。 somebody kill it。It will just keep going forever and ever
    until I turn the program off or until I shut the computer down。 so we need to
    actually increment X。Once we do that。We have now incremented our counter。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它将永远运行。这就是我告诉你无限循环的地方。你看它总是说0。它将永远运行，控制台也疯狂了。有人来终止它。它将永远继续，直到我关闭程序或关闭计算机。因此，我们实际上需要增加X。一旦我们这样做，我们就增加了计数器。
- en: eventually x will。B10 or greater， and this will exit out。One through 1 works
    is expected now。So loops can be very powerful and very easy to use。 but you can
    very much screw up your application just by creating an infinite loop on accident。Now。
    in case you're wondering。Go ahead and print this out here。 and we're going to
    say。Next one is done。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最终x会变成10或更大，这样就会退出。1到10的循环现在按预期工作。因此，循环可以非常强大且易于使用，但你可以通过意外创建无限循环来搞砸你的应用程序。现在，如果你想知道，可以继续打印这个。我们要说的是，下一个完成了。
- en: We want to know when this loop is done executing and we use。 you guessed it
    the indentations this determines our scope or our block of code。So while this
    condition is true。Execute this scope or this block of code。 Then when we're done
    looping， we're going to jump right back up here。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想知道这个循环何时完成执行，我们使用。你猜对了，缩进，这决定了我们的范围或代码块。因此，当这个条件为真时，执行这个范围或这个代码块。然后，当我们完成循环时，我们将跳回这里。
- en: Let's see that in action I'm going to clear that out。Sure enough。1 through 10
    and then test one is done， so it works exactly the way you think it would。![](img/84eadd930b0b3e75c98ca900a0885b35_8.png)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看实际效果，我要清除这个。果然，1到10，然后测试完成，因此它的工作方式正如你所想的那样。![](img/84eadd930b0b3e75c98ca900a0885b35_8.png)
- en: '![](img/84eadd930b0b3e75c98ca900a0885b35_9.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84eadd930b0b3e75c98ca900a0885b35_9.png)'
- en: Let's take a quick detour and talk about pass。 You're going to see this quite
    a bit in Python land。 and a lot of people don't really explain it。 So let's just
    say while。And let's just take this little template here。And it's going to say。While
    expression pass。But this is a valid Python expression。Go say。0， and let's just
    give it the same logic here。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微绕一下，谈谈pass。你在Python中会看到这个，很多人并没有真正解释它。所以我们假设while。我们就用这个小模板。它将说。while表达式pass。但这是一个有效的Python表达式。比如说0，并且给它同样的逻辑。
- en: Notice how this will run。Now what's going on into the hood is this is still。Functioning。Or
    is it。 Let's find out here。Im going kill this terminal just in case。Well say test2
    is done。So x0。 while x is less than notice how we never increment it like we did
    in this guy， we're going to pass。And then eventually print out test 2 is done。
    Sa run。 Notice how it says test 1 is done from up here。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这将如何运行。现在引擎盖下发生了什么，这仍然在运行。或者说它在运行吗？让我们来看看。我将关闭这个终端，以防万一。那么我们说测试2完成。因此x是0。当x小于时，注意我们从未像在这个例子中那样增加它，我们将通过。然后最终打印出测试2完成。注意它从这里说测试1完成。
- en: But it never gets down to test， too。So what's going on under the hood， this
    script is still running。 It's just doing an infinite loop right here。 So whenever
    you see pass inside of a loop。Be very careful because you're creating some sort
    of infinite loop。Pass is a special keyword in Python that tells Python。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但它永远不会达到测试2。那么在引擎盖下发生了什么，这个脚本仍在运行。它只是在这里做一个无限循环。因此，每当你在循环中看到pass时，要非常小心，因为你正在创建某种无限循环。Pass是Python中的一个特殊关键字，告诉Python。
- en: take no action and just continue with what you would normally do。![](img/84eadd930b0b3e75c98ca900a0885b35_11.png)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不采取任何行动，继续正常做你该做的事。![](img/84eadd930b0b3e75c98ca900a0885b35_11.png)
- en: So be very careful with pass。![](img/84eadd930b0b3e75c98ca900a0885b35_13.png)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于pass要非常小心。![](img/84eadd930b0b3e75c98ca900a0885b35_13.png)
- en: We just covered that pass as well， pretty dangerous in a loop。 simply because
    you can loop forever on accident。 Well， it's not that simple under the hood。 but
    we're going to try and make it simple。 and we're going to talk about continuing
    and breaking。 So we're going to say x equals 0。And let's go ahead and do something
    really， really terrible。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚讨论过pass，这在循环中非常危险。仅仅因为你可能会意外地无限循环。嗯，底层的情况并不简单，但我们会尽量简化。我们将讨论continue和break。因此，我们将说x等于0。让我们做一些非常糟糕的事情。
- en: We're going to say， while true， do something。If you're paying attention。 you
    know that while is going to evaluate this much in the way an if statement would。
    and it's going to say if this is true。Do the loop and keep doing it over and over
    until this is no longer true。However， we've used the Python true keyword， so this
    will now loop forever。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要说的是，当条件为真时，执行某些操作。如果你在关注这个，你就会知道“while”会以“if”语句的方式来评估这一点，并且它会判断这个条件是否为真。执行循环，并一直重复，直到这个条件不再为真。然而，我们使用了Python的true关键字，所以这将无限循环。
- en: And you will actually see this out in code because sometimes people just want
    to loop until some arbitrary condition is met。 It could be input from the keyboard。
    It could be some network connection。 It could be anything。 you're going to see
    this a lot。 So you'll need to know when to break out of the loop or how to handle
    certain conditions。 So let's talk about continue first。We're going to say x plus
    equal goess1。And if x is less than 5。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在代码中看到这一点，因为有时人们只是想循环，直到满足某个任意条件。这个条件可以是键盘输入，也可以是某个网络连接，或者其他任何东西。你会经常看到这个。因此，你需要知道何时跳出循环或如何处理特定条件。首先，我们来谈谈continue。我们将说x加上goess1。如果x小于5。
- en: We want to。 Well， just kind of skip over this。And we don't really want to do
    anything。 So I'm just going to say x is less than 5。 whatever the number is。 And
    then we're going to continue。And what Conin does is say go back to the beginning。
    just continue along your merry way and do what you were going to normally do。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要的就是跳过这一部分。我们其实不想做任何事情。因此我只是说x小于5，无论数字是多少。然后我们将继续。而continue所做的是返回到开头，继续你原本要做的事情。
- en: And then we're going to add in some sort of logic。 So if x was greater than
    10。We would do something。Print that X out。 And we're going to put a print statement
    at the very， very end of this。And notice this is on the same line as while。 So
    this will not print out until this loop is complete。One thing I love about VS
    code in most editors is you can actually collapse。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将添加一些逻辑。如果x大于10，我们就会执行某个操作，打印出X。并且我们会在最后一行放一个打印语句。请注意，这与while在同一行。因此，直到循环完成之前，这个打印语句不会执行。我喜欢VS
    Code和大多数编辑器的一点是，你实际上可以折叠。
- en: so it actually looks like this。So once this loop is done， it'll print complete。
    let's go ahead and clear this out， see this in action here。U， oh， you notice how。It's
    working exactly as we expect it would， because。The computer， while very fast，
    is very dumb。So what's going on here is it's going and saying if x is less than
    5。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上看起来是这样的。一旦这个循环完成，它将打印“完成”。让我们清理一下，在这里看看实际效果。哦，你注意到吗？它工作得正如我们所预期的那样，因为计算机虽然很快，但非常愚蠢。那么这里发生了什么？它会说如果x小于5。
- en: Brnt it out and then just go back to the beginning， so we're still in continual
    loop land。 we need to fix that。![](img/84eadd930b0b3e75c98ca900a0885b35_15.png)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出来，然后返回到开头，因此我们仍然在一个连续的循环中。我们需要修复这个。![](img/84eadd930b0b3e75c98ca900a0885b35_15.png)
- en: '![](img/84eadd930b0b3e75c98ca900a0885b35_16.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84eadd930b0b3e75c98ca900a0885b35_16.png)'
- en: So our programming logic， we want to basically say if it's less than5。 just
    go back to the beginning of loop and keep incrementing that counter。 If it's greater
    than5。 do something but we also want to stop when we hit 10， so I'm going to say
    if。X is 10。Pnt。And then x equals。Just so we can see that x is actually at that
    value。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的编程逻辑基本上是，如果小于5，就返回到循环的开头，并继续增加计数器。如果大于5，就执行某个操作，但我们也希望在达到10时停止，所以我将说如果x等于10。打印。然后x等于。这样我们可以看到x实际上达到了那个值。
- en: Now we're going to use the brake。E word about。Don't worry， we're not breaking
    anything。Break is like kind of think of the wild loop， this guy。As a little jail
    cell。 and we're going to break out of jail and just jump right to the next line。So
    it's going to pick up code execution right here and then it's going to run this
    statement。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要使用 break。说点关于它的事。别担心，我们不会破坏任何东西。Break 就像想象中的野外循环，这个家伙。就像一个小监狱，我们要从监狱里逃出来，直接跳到下一行。所以它将在这里继续执行代码，然后运行这个语句。
- en: Go ahead and see this in action。Okay， sure enough， we've got。X is less than
    5。 We've got 1，2，3，4。 and then do something，6，7，8，9，10。 And then when we hit 10，
    we're going to exit， and we are complete。So that is looping in a nutshell。So major
    takeaways from this video is well， loops are very。 very powerful， but you need
    to have some sort of condition to evaluate。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 继续看看这个实际效果。好的，确实，我们有。X 小于 5。我们有 1，2，3，4。然后做点什么，6，7，8，9，10。当我们达到 10 时，我们将退出，完成。这就是循环的简要说明。这段视频的主要要点是，循环非常，非常强大，但你需要有某种条件来进行评估。
- en: otherwise you're going to create an infinite loop。An easy way to create an infinite
    loop is just simply pass and it will loop forever。And you can say while true，
    which will also create an infinite loop。 but you can use continue to well， continue
    to use the flow inside of the loop or break to break out of that flow and use
    the programming logic。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 否则你会创建一个无限循环。创建无限循环的简单方法就是简单地使用 pass，这样它会永远循环。你也可以说 while true，这也会创建一个无限循环。但你可以使用
    continue 来继续在循环内的流程，或者使用 break 来打断这个流程，应用编程逻辑。
- en: '![](img/84eadd930b0b3e75c98ca900a0885b35_18.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84eadd930b0b3e75c98ca900a0885b35_18.png)'
