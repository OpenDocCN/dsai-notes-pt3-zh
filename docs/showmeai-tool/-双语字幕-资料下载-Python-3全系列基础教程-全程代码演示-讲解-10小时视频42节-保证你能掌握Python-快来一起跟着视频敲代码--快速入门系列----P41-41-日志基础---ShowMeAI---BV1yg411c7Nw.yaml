- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P41：41）日志基础 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P41：41）日志基础 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/182d0e4246c17f4cf478cc911d7f813e_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/182d0e4246c17f4cf478cc911d7f813e_0.png)'
- en: Welcome back， everyone。 My name is Brian。 And in this video， we're to talk about
    logging basics。 Now。 what is logging。 We're not cutting down trees or anything。
    So so far。 we've been using the handy print function， but logging is way， way
    cooler than printing。 And it is kind of the de facto， but we really haven't been
    able to have this conversation because we haven't covered all the technology we
    need to to build up to this conversation。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来，大家好。我是布莱恩。在这个视频中，我们将讨论日志记录的基础知识。那么，什么是日志记录呢？我们并不是在砍树之类的。目前为止，我们一直在使用方便的打印函数，但日志记录比打印要酷得多。这已经成为一种事实上的标准，但我们实际上还没有能够进行这个对话，因为我们还没有涵盖所有需要的技术来展开这个对话。
- en: 😊，So what makes logging cooler than printing Well printing just prints something
    out on the screen。 but logging， you can have levels。 for example， you can say
    it's a debug message。 info warning error critical and some of these should be
    selfexplanatory。 debug is just for you。 the developer， you want to know what's
    happening。 infofo is just hey， something happened。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 😊，那么，为什么日志记录比打印更酷呢？因为打印只是将某些内容输出到屏幕上，但日志记录，你可以有不同的级别。例如，你可以说这是一个调试消息、信息、警告、错误、严重，某些内容应该是自解释的。调试只是为了你，开发者，你想知道发生了什么。信息则只是嘿，发生了一些事情。
- en: you may want the user to see this you may not War is hey。 something bad may
    happen if this continues or if it's not fixed。Arrir is pretty self explanatory
    and critical is worse than error， so。These are the different levels。To start off
    with。We are going to import。The logging module。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望用户看到这个，也可能不想。战争是，嘿，如果这种情况持续下去或者没有修复，可能会发生一些糟糕的事情。错误（Arrir）是自解释的，而严重（critical）则比错误更糟，所以。这些是不同的级别。首先，我们将导入日志模块。
- en: You could also do something like this from。Lologging。Import。 and we're going
    to import the root logger。The reason why I add this is you need to understand
    that logging by default has a root logger and when I say root。 I mean it's the
    top level， you can define other loggers， custom loggers。 but we're going to be
    working with the top level logger。Okay。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以这样做，从 `Lologging` 导入，接下来我们将导入根日志记录器。之所以添加这一点，是因为你需要理解，默认情况下有一个根日志记录器，当我说根时，我指的是顶层，你可以定义其他日志记录器，定制日志记录器，但我们将使用顶层日志记录器。好的。
- en: so I'm going to just comment this out just so people don't get confused about
    which one we're working with。 we're just importing the entire module here。And
    I'm going to work with basic logging。 notice how they do not get displayed by
    default。 This is the main takeaway of this segment。 This is going to be super
    confusing if you don't pay attention to that。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将把这段注释掉，这样人们就不会对我们正在处理哪个感到困惑。我们这里只是导入整个模块。我要使用基本的日志记录。注意，它们默认情况下不会显示。这是本节的主要要点。如果你不注意这一点，可能会非常混乱。
- en: So I'm going to define a function。 We're going to use this over and over again。
    It's going to just simply be test。And we're going to print some lines。And let's
    just do 20 of them。 Why not。And then I'm going to grab that。Give it the good old
    copy and paste。That way。 all of this is going to be separated out when we print
    it。Now， from here。We want to do a few things。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我要定义一个函数。我们将反复使用这个函数。它将只是简单的测试。我们将打印一些行。我们就打印20个吧。为什么不呢？然后我将把它复制。这样，当我们打印时，所有这些将会被分开。现在，从这里开始，我们想做几件事。
- en: I want to say。Logging dot。And we want to debug。Now this is a little confusing
    because we're not actually debug anything we're saying logging。 make a debug message，
    or more specifically， we're going to message something with the severity of debug
    on the root logger。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我想说。日志记录（Logging）。我们想调试。现在这有点混淆，因为我们并没有真正调试任何东西，我们是在说日志记录，生成一个调试消息，或者更具体地说，我们将在根日志记录器上发送一个严重性为调试的消息。
- en: Remember， we're talking about levels of logging here。Dbug being the lowest critical
    meaning hey。 your programs just exploded and here's what happened。So we're going
    to say。The bug message here。And then we can take the same pattern and just you
    guessed it， copy and paste time。谁。林方。Now。 informational are， well， is that information。
    It's not really anything super important。 It's just。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们在谈论日志记录的级别。调试（Dbug）是最低的，严重（critical）意味着嘿，你的程序刚崩溃了，发生了什么。所以我们将说。这里的调试消息。然后我们可以采用相同的模式，你猜到了，复制和粘贴时间。谁。林方。现在，信息性日志，其实，这些信息并不是特别重要。它只是。
- en: hey， the file was changed or something modified warning。 However。 this is when
    things are starting to get a little serious。 You ever give like your kid a warning。
    hey， you better go clean your room or else。Don't condone beating your child。 but
    sometimes you just got to make them clean the room。 So we've got debug info warning。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，文件被更改或某些东西修改了警告。然而，这时事情开始变得有点严重。你是否给过你的孩子警告，嘿，你最好去清理你的房间，否则就完了。并不提倡打孩子，但有时你就是得让他们清理房间。所以我们有调试、信息、警告。
- en: And as we go further， further， this numbers changing。 There's a number in the
    background that we're going to really review later on。Now。 what's higher than
    a warning is， you guessed it an error。We talked about air handling and air conditions
    and things like that。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进一步深入，这些数字在变化。后台有一个数字，我们稍后会真正回顾。现在，超过警告的是什么？你猜对了，是错误。我们讨论过错误处理和错误条件等问题。
- en: And that's exactly what we're doing here。 We're saying， hey， some sort of error
    happened。 but using this will not throw an error。 We're just logging that an error
    occurred。And last。 but certainly not least， is critical。When you hear the word
    critical in computers。You need to believe that it is critical， meaning everything
    you know has just ceased to exist。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们在这里所做的。我们在说，嘿，发生了一种错误，但使用这个不会抛出错误。我们只是记录发生了错误。而最后但并非最不重要的是严重错误。当你听到计算机中的“严重”这个词时，你需要相信这是至关重要的，意味着你所知道的一切都已停止存在。
- en: and you need to focus on this， or everything you know has just disappeared because
    it has died。 That's basically what critical means in Comp lingo。Now。 we're just
    going to call this test function and see what happens。Notice how they do not all
    get displayed by default。 Let's go ahead and run。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要专注于这一点，否则你所知道的一切就会消失，因为它已经失效。这基本上就是在计算机术语中“严重错误”的意思。现在，我们要调用这个测试函数，看看会发生什么。注意它们并不会默认全部显示。我们继续运行。
- en: All we see is warning erroring critical， but where's debug in info？To really
    understand this。 we need to set the level。 And when I talk about level。 we're
    talking about this debug info warning Aaron critical Under the hood。 each one
    of these has a number assigned to each level。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的都是警告、错误和严重错误，但调试和信息在哪呢？要真正理解这一点，我们需要设置级别。当我谈到级别时，我们指的是调试、信息、警告和严重错误。实际上，每个级别都有一个数字分配给它。
- en: Think of it like levels of a building starting at the bottom， going all the
    way to the top。Most important。Two least important。Okay， so we're going to say
    a level。Equals。 and I want to go logging。 We're going to use the logging module。
    We're going to get the level name。 What this is going to do is convert that number
    in the background to a string representation。 But。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，就像一栋建筑的级别，从底部到顶部，最重要的在上，最不重要的在下。好的，我们将设置一个级别。等于。我想进行日志记录。我们将使用日志记录模块。我们将获取级别名称。这将把后台的数字转换为字符串表示。但。
- en: of course， it's not that straightforward。 We now have to go logging。Yet， log
    Er。And what this will do is get the root logger， which ironically we're already
    working with。But the thing is， you can specify a name so you can have different
    types of loggers that do different things。 We're just going to get the root logger。And
    then we're going to say gi。Effective level。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不那么简单。我们现在必须进行日志记录。然而，日志记录器。这将获取根日志记录器，具有讽刺意味的是，我们已经在使用它。但问题是，你可以指定一个名称，这样你就可以有不同类型的日志记录器执行不同的操作。我们只需获取根日志记录器，然后我们将说获取有效级别。
- en: Gett effective level is going to return what level of logging we're currently
    working with here。From here， we're just going to print that out。 so to it print。F。And
    we'll say a log level。All right。 so our log level is currently at warning。What
    we're going to look at the next section is how to specify that level。But what
    I really want to talk about is。What the level really means， what it means is。Warning。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 获取有效级别将返回我们当前正在处理的日志级别。从这里开始，我们只需将其打印出来。所以打印出来。F。我们将说一个日志级别。好的，所以我们的日志级别当前是警告。我们将在下一节查看如何指定该级别。但我真正想谈的是，这个级别真正意味着什么，意思是警告。
- en: meaning anything more critical。Is going to be included， so we're going to do
    not just warnings。 but also errors and critical。But we don't really care about
    debug and info。 and this is one of the little gotchas about the logging class
    by default is people will start with this and start doing debug messages and then
    nothing happens and they go。 well， why and this is why we need to set the level。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 意味着任何更关键的信息都将被包含，因此我们不仅会处理警告，还会处理错误和严重错误。但我们并不真正关心调试和信息。这是日志类的一个小陷阱，默认情况下人们会从这里开始并开始发送调试消息，然后什么都没有发生，他们会想，嗯，为什么，这就是我们需要设置级别的原因。
- en: Now that we understand the concept of logging levels。Let's look at how we can
    manipulate them we're going to get and set the logging levels。 This allows really
    for filtering。And the reason why you want to do this is in a typical application。
    you're going to have a lot of information whipping around and you don't want to
    see all of that on the screen at once。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了日志级别的概念。让我们看看如何操纵它们，我们将获取和设置日志级别。这实际上允许进行过滤。而你想这样做的原因是在典型应用程序中。你会有很多信息在快速流动，你不想在屏幕上同时看到所有这些。
- en: you only want to see what's important to you。So first thing we're going to do
    here is we're going to。Get the root logger。 Now， the root logger is included by
    default。 but I want to actually go out and get it just to show you that we are
    getting an object。So I'm going to say root log。Equals logger， or I sorry， logging
    yet logger。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你只想看到对你重要的内容。因此，我们在这里要做的第一件事是获取根记录器。现在，根记录器是默认包含的。但我想实际去获取它，以便向你展示我们得到了一个对象。所以我将说根日志。等于记录器，或者我抱歉，记录模块的记录器。
- en: See how that's a little confusing there。 Now， if you had multiple loggers。 you
    would have the name of the individual logger。 if you don't have a name。 its just
    the root or the main logger here。From here。We're going to just。Rrab this because
    this is just horrible looking。I must say print。And we're going to print the level。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这有点令人困惑。如果你有多个记录器，你将看到每个记录器的名称。如果没有名称，它就是根记录器或主记录器。从这里开始。我们将抓取这个，因为它看起来实在太糟糕了。我必须说打印。我们将打印级别。
- en: want paste that out here。So we're saying logging。Yet， level name。This is a little
    misleading because we're not working with the main logger。 We're working with
    the logging modules。 we're saying the module。Should get the level name。 Now we
    want to get that from our root logger。 so effectively， instead of saying this。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 想要把它粘贴在这里。所以我们在说记录。是的，级别名称。这有点误导，因为我们并不是在处理主记录器。我们在处理日志模块。我们在说模块。应该获取级别名称。现在我们希望从根记录器获取它。因此，实际上，我们不只是说这个。
- en: We can replace with that。So。Logging module， get level name of whatever log we're
    working with。 get the effective level and under the hood， the level is just a
    number。Let's go ahead and run this。So level warning， I'm going to actually put
    something in there to split that up。So we know we're at the warning level and
    we've known that all along。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用那个来替换。所以，记录模块，获取我们正在使用的任何日志的级别名称。获取有效级别，底层级别只是一个数字。让我们继续运行这个。所以警告级别，我实际上会放入一些内容来分开它。这样我们就知道我们处于警告级别，并且我们一直都知道这一点。
- en: but now we're going to set it to debug。Now， what does it mean said it to debug。Well。
    it means we're going to include debug and anything more critical and sense。Up
    at the top here。 debug is the top of the chain。Anything's going to be included，
    not just debug。So we're going to say root log。Set level。And then we're going to
    say the logging module。E bug。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们将其设置为调试。那设置为调试意味着什么？嗯。这意味着我们将包括调试和任何更关键的信息。顶部的调试是链的顶端。任何内容都会被包括在内，不仅仅是调试。因此，我们将说根日志。设置级别。然后我们将说记录模块。调试。
- en: Then we can just call our handy test function that has all those。Beautiful little
    loggers going on。And run， sure enough now we're seeing the debug info warning
    erroring critical。So it is working as expected。 I'm going to grab this。And we
    can very quickly start changing the level as needed。 Some it change is too critical
    only。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以调用我们的便捷测试函数，它包含所有这些。美丽的小记录器正在运行。果然，我们现在看到了调试信息、警告、错误和严重错误。因此，它按预期工作。我将抓取这个。我们可以非常快速地根据需要开始更改级别。有些改变只是过于关键而已。
- en: Remember， critical is well， Cri， it means like something has exploded or is
    about to。And we're going to run this， and you can see logging level is now critical。There
    we go。 it's pretty easy to understand here what's going on。What you need to understand
    though。 is that the levels do not make those magically disappear。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，关键是好，`Cri`，这意味着像是某样东西爆炸了或者即将爆炸。我们将运行这个，你可以看到日志级别现在是关键的。我们可以看到，这里发生的事情很容易理解。然而，你需要明白的是，级别并不会使这些消息神奇地消失。
- en: just means that we are not logging them or capturing them。 those messages are
    still being fired off。Okay， now let's just do it one more。And I want to set this
    to warning。Right back where we were。In critical root。Critical message here， you
    might be wondering what this root is， what is this root？
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是意味着我们没有记录它们或捕获它们。这些消息仍然在发出。好的，现在我们再做一次。我想将其设置为警告。回到我们之前的状态。在关键根。这里是关键消息，你可能会想知道这个根是什么，这个根是什么？
- en: Well， that is the actual logger we're working with。 That's why I've been calling
    this the root logger because we're working with the root logger。 If we had a different
    logger， it would be the name of the logger right there。It's actually pretty elegant
    the way this works and you can flip these around as you need to。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这就是我们正在使用的实际记录器。这就是我为什么称其为根记录器的原因，因为我们正在使用根记录器。如果我们有不同的记录器，它将在那里显示记录器的名称。这种工作方式其实相当优雅，你可以根据需要随意切换这些。
- en: so if you're getting a lot of verbose information and you only want to see what's
    critical。 you can set it to critical。Then you're not getting warnings， so then
    you set it a warning。 and now you're getting the appropriate level of information
    you need to see。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你获得了大量的详细信息而你只想看到关键的信息，你可以将其设置为关键。这样你就不会收到警告，因此你设置为警告。现在你获得了适合你需要看到的信息级别。
- en: '![](img/182d0e4246c17f4cf478cc911d7f813e_2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/182d0e4246c17f4cf478cc911d7f813e_2.png)'
- en: '![](img/182d0e4246c17f4cf478cc911d7f813e_3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/182d0e4246c17f4cf478cc911d7f813e_3.png)'
- en: Now， as cool as this is， what would be cooler is if we could log this directly
    to a file。 So as events happen， it gets dumped directly into a file。 And that's
    exactly what we're going to do。 But I want to show you something that will just
    infuriate you time and time again。😊。If you go out to Google and you type in how
    to use the logger。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，虽然这很酷，但如果我们能够直接将日志记录到文件中，那将更酷。因此，当事件发生时，它会直接转储到文件中。这正是我们要做的。但我想给你展示一些东西，这将一次又一次地让你感到愤怒。😊如果你去谷歌搜索如何使用记录器。
- en: You're going to get something that looks like this logging that basic config，
    setting to a file name。 everybody gets all super excited。 file mode， right， Yes，
    this is going to work。 You can even define the format。 This is super cool。 So
    we're going to say the level in the message。 and then we're going to say level
    equalal logging dot debug。😊，Notice what this is doing。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会得到类似这样的输出：`logging that basic config`，设置为文件名。大家都非常兴奋。文件模式，对，没错，这将会有效。你甚至可以定义格式。这真的很酷。因此，我们要说级别和消息。然后我们要说级别等于`logging
    dot debug`。😊请注意这在做什么。
- en: this is setting the config it's setting some handlers and all this fun stuff。So
    people get super。 super excited。And they do something like this。 Loging dot Ebu。And
    we're going to send a debug of just hello。So in theory， when we run this。Logging
    is going to call debug with the message of Hello is going to create the file app。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这正在设置配置，它设置了一些处理程序和所有这些有趣的东西。所以人们非常兴奋。然后他们做了类似这样的事情。`Loging dot Ebu`。我们要发送一个仅包含你好（hello）的调试信息。因此，理论上，当我们运行这个时，日志记录将调用调试，消息为“你好”，并将创建文件app。
- en: txt in write mode。And then it's going to write this out in this format。 And
    we know that because we're setting logging debug so。Rm roll。Nothing happened。
    That's right。 Absolutely， nothing happened。So then people get very frustrated
    and they do something like Google Why is logging not logging。 that's literally
    one of the most popular Google searches for this。The reason why is very simple。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在写模式下创建txt文件。然后它将以这种格式写入。我们知道这是因为我们设置了`logging debug`。所以，`Rm roll`。什么都没发生。没错，绝对没发生。因此，人们会非常沮丧，他们会做类似的事情去谷歌搜索“为什么日志没有记录”。这实际上是其中最流行的谷歌搜索之一。原因非常简单。
- en: basic config will not work if we've already configured the logger。 it needs
    to be done before we take any action and so because we've already been working
    with the root logger and we've already configured it。 basic config does nothing。That's
    right。 It does absolutely nothing。 is so frustrating。So I'm just going to put
    in some notes。And then I'm going to comment these out。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基本配置在我们已经配置了记录器的情况下将不起作用。需要在采取任何行动之前完成，因此我们已经在使用根记录器，并且已经配置了它。基本配置没有任何作用。没错。它绝对没有作用。这真让人沮丧。所以我只是打算写一些注释。然后我会把它们注释掉。
- en: We're going to show you how to get around that。 Now， if this was actually the
    first line。 like if we had this way up here。It would work beautifully， but because
    we've done all this。 it's just simply not going to work。So we need to get a handler。I'm
    going to say logging dot。 and we want a file handler。And all a handler does is
    it says how to handle the log information as it come in。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向你展示如何解决这个问题。现在，如果这实际上是第一行，比如说如果我们把它放在这里。它会很好地工作，但由于我们做了所有这些，它根本无法工作。所以我们需要一个处理器。我将说
    logging.dot。我们想要一个文件处理器。处理器的作用就是处理进来的日志信息。
- en: I must say file that log。namee it whatever you want really doesn't matter。 Now
    we want to define a formatter for that handler。And I'm going to say formater。And
    you know。 these are constructors， so yes， under the hood， we're actually creating
    classes。Now。 this is where I'm going to get a little copy and paste happy just
    because we'll be here all day watching me try to type this out。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须说文件的名称可以随便命名，真的没关系。现在我们想为那个处理器定义一个格式化器。我将说格式化器。你知道，这些是构造函数，所以在幕后，我们实际上是在创建类。现在。我会稍微复制粘贴一下，因为我们可能会花一天时间看我打这些。
- en: What we're going to do is we're going to take the time， string representation。
    the name the level and the message。 If you want what name is it's the logger name。
    So it's going to say time， logger name， the level and the actual message。And you
    can define whatever formatting you want， the guide is out in the official documentation
    for this。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是获取时间、字符串表示、名称、级别和消息。如果你想知道名称是什么，它是记录器的名称。所以它将显示时间、记录器名称、级别和实际消息。你可以定义任何你想要的格式，官方文档中有指南。
- en: Point being once we have a handler and a formatter， we're good to go。From here，
    we can say。Handler dot set。For matterer。And that's going to tell the handler how
    to format the information it is handling。Then we can simply say root。And we're
    going to say our root log。t add handler。Now。 what we can do is we can go in and
    say something like， let me get this back up to debug level。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重点是，一旦我们有了处理器和格式化器，我们就可以开始了。从这里，我们可以说，处理器.dot set。格式化器。那将告诉处理器如何格式化它正在处理的信息。然后我们可以简单地说
    root。我们将说我们的根日志添加处理器。现在，我们可以进去，像这样说，让我把它提升到调试级别。
- en: Now we can set that to logging debug。Then we can say。Root log， dot Ebug。As。Save
    run。And sure enough。 our file out was created， and it is in the format that we
    wanted it in。 This is extremely cool。 and we can even call our test function。And
    because our log levels at debug and because we have set the handler in the format。
    we can go back out to our file log and there is all information it is beautifully
    formatted。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将其设置为 logging debug。然后我们可以说，根日志.dot debug。作为保存运行。果然，我们的输出文件被创建，并且格式如我们所希望的那样。这非常酷。我们甚至可以调用我们的测试函数。因为我们的日志级别在调试，并且我们设置了处理器和格式，因此我们可以返回到我们的文件日志，所有信息格式都很漂亮。
- en: So we have the date time， we have the logger， we have the level， we have the
    message。 and you can see how it even color codes it for us。 This is just super
    impressive。![](img/182d0e4246c17f4cf478cc911d7f813e_5.png)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有日期时间，有记录器，有级别，有消息。你可以看到它甚至为我们进行了颜色编码。这真是超级令人印象深刻！![](img/182d0e4246c17f4cf478cc911d7f813e_5.png)
