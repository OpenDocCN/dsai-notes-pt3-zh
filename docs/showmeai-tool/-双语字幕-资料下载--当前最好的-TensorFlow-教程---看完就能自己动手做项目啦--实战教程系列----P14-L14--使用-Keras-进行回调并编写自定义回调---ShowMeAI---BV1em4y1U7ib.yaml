- en: 【双语字幕+资料下载】“当前最好的 TensorFlow 教程！”，看完就能自己动手做项目啦！＜实战教程系列＞ - P14：L14- 使用 Keras
    进行回调并编写自定义回调 - ShowMeAI - BV1em4y1U7ib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】“当前最好的 TensorFlow 教程！”，看完就能自己动手做项目啦！＜实战教程系列＞ - P14：L14- 使用 Keras
    进行回调并编写自定义回调 - ShowMeAI - BV1em4y1U7ib
- en: '![](img/50863ba9b782f7d5434a6b666c062394_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50863ba9b782f7d5434a6b666c062394_0.png)'
- en: What is going on guys welcome back from the Tensorflowlow tutorial So in this
    video we're gonna to take a look at how to use callbacks and also how to create
    custom callbacks and so for those of you who aren'tfa with callbacks I better
    explain what that is so basically callbacks are a way to customize the behavior
    of your model during either training or evaluation and I think it's going become
    more clear when you actually see some examples of what it's capable of but before
    we dig into that let's just quickly go through the code so most of this or all
    of this is familiar from previous videos we just have imports we're loading the
    Ms data set with Tensorflow datas。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，欢迎回到 TensorFlow 数据教程。在这段视频中，我们将看看如何使用回调以及如何创建自定义回调。对于那些不熟悉回调的人，我最好解释一下这是什么，基本上，回调是自定义模型在训练或评估期间行为的一种方式，我认为在看到一些示例后，你会更清楚它的能力。但在深入之前，我们先快速浏览一下代码，这里的大部分内容或者说全部内容在之前的视频中都很熟悉，我们只是进行了导入，正在用
    TensorFlow 数据加载 MS 数据集。
- en: And then this is just to avoid GPU errors and then so we're loading the Ms data
    set。 we're normalizing the images by using map on the dataset， cache shuffle batch，
    prefetch。 all from the Tensorflowlow data tutorial， then we're creating a very，
    very small model。 just one comp layer and then one final dense layer。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是为了避免 GPU 错误，所以我们正在加载 MS 数据集。我们通过在数据集上使用映射来规范化图像，缓存、打乱批次、预取。所有这些都来自 TensorFlow
    数据教程，然后我们创建一个非常非常小的模型。只有一个卷积层和一个最终的全连接层。
- en: I guess we should just have layers that dense right here。And then all right。
    and then you shouldn't see this part， so I'll just remove this for now。Alright。
    so then we have model compile and then we have model that fit。 So this is what
    the starter code looks like。 Allright。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们应该在这里就有这样密集的层。然后没问题。然后你不应该看到这一部分，所以我现在就把它去掉。好吧。所以我们有模型编译，然后我们有模型拟合。这就是启动代码的样子。没问题。
- en: the first thing we want to do is let's do a save callback。 So I've showed you
    how to save and load models， but it's done it's been done after a training so
    sort of if you're running for 10 epos then I've shown you how to save it after
    it's done training after this model that fit。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的第一件事是进行保存回调。我已经向你展示了如何保存和加载模型，但这通常是在训练完成后进行的。所以如果你训练 10 个回合，我已经向你展示了如何在模型拟合后保存它。
- en: but let's say you want to actually you know save it during training。 perhaps
    every epo perhaps you only want to save sort of the the best model so far and
    I'll show you a way to do that。 And this is a perfect example of what what a callback
    is。So， basically。Let's do it after we create our let's do it here before the model
    compile。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但假设你希望在训练过程中保存它。也许每个回合，或者你只想保存到目前为止的最佳模型，我会向你展示一个方法。这是回调的完美示例。所以，基本上。让我们在创建模型后、编译之前来做这个。
- en: So we'll do save callback is Karas callback model checkpoint is the one we're
    going to use。 And so Kas has a bunch of different callbacks and I recommend you
    to check out the documentation for for all of the ones。 and then this one also
    has a bunch of arguments that we can send in I'm just going use some of the some
    of them。 So first of all， we're gonna specify a file pad So we're just going call
    it checkpoint。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将使用保存回调，这是卡拉斯回调模型检查点，这是我们将要使用的。卡拉斯有很多不同的回调，我建议你查看所有相关的文档。这个也有很多参数可以传入，我只会用其中的一部分。首先，我们将指定一个文件路径，所以我们就叫它检查点。
- en: '![](img/50863ba9b782f7d5434a6b666c062394_2.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50863ba9b782f7d5434a6b666c062394_2.png)'
- en: '![](img/50863ba9b782f7d5434a6b666c062394_3.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50863ba9b782f7d5434a6b666c062394_3.png)'
- en: Then we're going to do save weight only， we're going to set that true。And then
    we're going to do monitor， let's do sort of monitor the accuracy。And then let's
    also do。So then we can also have an argument that we're only going save the best
    one so for example we could do save best only equals true or false let's set false
    so that it actually save it every epoch and I'm also going to show you custom
    so how do we create our custom callback and you could sort of specify whenever
    you want to save it al right。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将做仅保存权重，我们将设置为真。然后我们将监控准确率。然后我们还可以有一个参数，我们只保存最佳的，例如我们可以设置保存最佳仅为真或假，让我们设置为假，这样它实际上在每个epoch时都会保存，我也将向你展示自定义的，所以我们如何创建我们的自定义回调，并且你可以指定你想要保存的时间。
- en: so what we do then when we have this save callback we're going go to our model
    that fit we're going to do callbacks and then we're going to so callback argument
    equals and then the list and we're going to do send in that callback so in this
    case save callback。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当我们有这个保存回调时，我们将去我们的模型，拟合它，我们将做回调，然后我们将进行回调参数等于，然后是列表，我们将发送那个回调，在这种情况下是保存回调。
- en: And so let's start with that and let's run it and make sure that it works。![](img/50863ba9b782f7d5434a6b666c062394_5.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们从这里开始，运行一下，确保它能正常工作。
- en: Alright so in that file there's a folder with the weights of the model so it
    seems to work and then I'm going to show you sort of how we can add another callback
    and let's say we want to have a learning rate scheduler so we can have the initial
    learning rate of 0。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，在那个文件中有一个包含模型权重的文件夹，所以它似乎可以工作，然后我将向你展示我们如何添加另一个回调，假设我们想要一个学习率调度器，所以我们可以将初始学习率设为0。
- en: 01 and then we want to change the learning rate as the epoC progresses So how
    we can do that is let's say we we do。![](img/50863ba9b782f7d5434a6b666c062394_7.png)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 01，然后我们希望随着`epoC`的进展来改变学习率。那么我们可以这样做：假设我们做。
- en: First of all we're going to do define our scheduler functions so we're going
    to define scheduler we're going to send in the epoC and learning rate and then
    we can do something like if the epoC is less than2。 then we're just going to return
    the learning rate and otherwise we could do return learning rate times 0。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义我们的调度器函数，所以我们将定义调度器，我们将传入`epoC`和学习率，然后我们可以做这样的事情：如果`epoC`小于2，那么我们将返回学习率，否则我们可以返回学习率乘以0。
- en: 99 so essentially we're decreasing it by 1% every epoC and I mean this is for
    you to decide if that's a good scheduler I'm just showing you one example and
    and you can implement this the way that you want to。And then we're going to do
    learning scheduler is cars。 callbacks do learning rate。Schedler。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 99，所以本质上我们在每个`epoC`中降低1%，这取决于你决定这是一个好的调度器，我只是给你展示一个例子，你可以根据自己的需要实现它。然后我们将做学习调度器的回调来进行学习率调度。
- en: we're going to send in that function， and then we're also going to send in verboos
    equals1 just for getting print statements when it's changing the learning rate。And
    so let's let's rerun it and make sure that it works。Oh yeah。 so this was a big
    mistake on my part， we also gotta send it in。 so here for the callbacks。 we're
    just going make a comma and then we're just going add that one so。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发送该函数，然后我们还会发送`verboos equals1`以便在学习率变化时获得打印语句。所以让我们重新运行一下，确保它可以正常工作。哦，是的，这是我一个很大的错误，我们还得发送它。所以在这里的回调中，我们只需添加一个逗号，然后添加那个。
- en: Learning rate scheduler and hopefully now it works。 Allright， so as you can
    see here。 it's decreasing the learning rate every epoC and it's doing it by it's
    kind of hard to tell。 but approximately 1% and and yeah so then you can of course
    do more advanced ones all right so this tutorial official tutorial by Tensorflow
    on writing custom callbacks is pretty good and I'm going to link it in description
    below as well。 And this is the one I've read through a lot to get the information
    that I'm providing to you now。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 学习率调度器，希望现在它可以正常工作。好吧，如你所见，它正在随着每个`epoC`降低学习率，这个幅度有点难以判断，但大约是1%。当然，你可以做更高级的调度器。好吧，TensorFlow关于编写自定义回调的官方教程非常不错，我会在下面的描述中链接它。这是我阅读过很多次以获取现在提供给你的信息的教程。
- en: and so essentially when you're creating your own custom callbacks you have all
    of these different functions that you can customize the behavior of the model
    too。 So for example， on training begin， you could do something you can I mean。
    it's sort of up to you to choose what to do。 but there are a bunch of different
    functions to where you can customize the behavior So ontrain and on epoC begin
    on epoC and on test begin and a bunch of different ones。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，当你创建自己的自定义回调时，你可以自定义模型的行为，有很多不同的函数。例如，在训练开始时，你可以做一些事情，这取决于你选择做什么。但有很多不同的函数可以自定义行为，比如on
    train、on epoch begin、on epoch和on test begin等。
- en: '![](img/50863ba9b782f7d5434a6b666c062394_9.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50863ba9b782f7d5434a6b666c062394_9.png)'
- en: So on test end， on predict begin。And so on and so forth。 So let's try to build
    our own custom callback。 It's gonna to be quite simple one。 but hopefully it's
    going to illustrate what it can do。 We're just going use use one of these functions。
    We're going to use this one define on epoch end。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试结束时，在预测开始时，等等。所以让我们尝试构建自己的自定义回调。它会是一个相当简单的，但希望能说明它能做什么。我们将使用这些函数之一。我们将使用这个定义在epoch结束时。
- en: although you can， you know， you can use different ones and experiment with this。
    And I'm also going link you this this tutorial in the description。 Al right。 so
    let's go back to the code。 What I'm going to do is create。![](img/50863ba9b782f7d5434a6b666c062394_11.png)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以使用不同的，并对此进行实验。我也将在描述中链接这个教程。好的。那么让我们回到代码。我要做的是创建。![](img/50863ba9b782f7d5434a6b666c062394_11.png)
- en: Class， and then let's call it just custom callback。Then we're going to inherit
    from Kas。 callback。callback。And then as I said， we're just going to use define
    on。Let's see on Epoch end。 we're gonna send in epoch， and then we're gonna set
    logs。Equal none。As default。 but we're going to get sent in logs sort of， I'm going
    to show you so we can do print。 First of all。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类，然后我们称之为自定义回调。接着我们将从Kas回调继承。如我所说，我们将使用定义。在Epoch结束时，我们将传入epoch，然后设置logs。默认为none，但我们将接收日志，我会给你展示，以便我们可以打印。首先。
- en: we can do logs dot keys。So let's print that and it's going to print every every
    epoch at the end。And I did the same mistake as previously， we obviously got to
    initialize this and send it in。 so what we can do here is we can do see at the
    end of this we can do custom callback and then call it or initialize it rather
    and then hopefully we'll see the behavior that we want。Al right， so as you can
    see here it has there's a dictionary and you have loss accuracy and learning rate。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以打印logs.dot keys。所以让我们打印一下，它将在每个epoch结束时打印。我做了和之前一样的错误，我们显然需要初始化并传入它。所以我们可以在这结束时做自定义回调，然后调用或初始化它，希望我们能看到想要的行为。好的，如你所见，这里有一个字典，你有损失、准确度和学习率。
- en: I also want to mention that when you're having a validation set and a training
    set。 this loss in accuracy is going to become train accuracy， train loss， Val
    accuracy。 v loss and so on so for example， let's see here。So for example， here。
    when we're monitoring the accuracy， if using sort of if you're using if you have
    both a training and a validation。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想提到的是，当你有验证集和训练集时，这个损失和准确度将变成训练准确度、训练损失、验证准确度、验证损失等等。例如，我们来看一下。所以例如，在这里。当我们监控准确度时，如果你使用训练和验证集。
- en: you need to specify which one to monitor， so you might in this case monitor
    the valid accuracy or something like that。 just mention it so that if you have
    a training and validation set you need to specify exactly the one that you want
    to use here。So you can obtain those using this print logs dot keys and so as we
    saw we have loss accuracy and then learning rate。 but so what we're going to do
    is we're going to do if logs dot get。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要指定监控哪个，因此在这种情况下，你可能监控验证准确度或类似的东西。只需提到它，以便如果你有训练和验证集，你需要确切指定你想在这里使用的内容。你可以使用print
    logs.dot keys获取这些，我们看到有损失、准确度和学习率。但我们将做的是，如果logs.dot get。
- en: So let's get the accuracy and then let's say if the accuracy is， I don't know，
    above。O point。90%。 all right that's that's awful but you get the point。 So if
    it's above 90% in this case on the training accuracy， but of course， as I said。
    if you have validation set as well， you can do v accuracy。And then that's fine。So。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们先获得准确率，然后假设如果准确率是，我不知道，高于0.90%。 好吧，这样就很糟糕，但你明白我的意思。所以如果在这种情况下训练准确率超过90%，但当然，如我所说，如果你还有验证集，你可以做验证准确率。这样就可以了。
- en: If that's the case， we're going to do print accuracy over 9090% quitting training。
    and then we can do self dot model lets stop。Training equals true。And this is just
    one example of what you can do with custom callbacks。 And again。 there are more
    sort of。And there are more lengthy ones in the tutorial。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样的话，我们将打印出准确率超过90%并停止训练。然后我们可以让self.model.stop_training等于true。这只是自定义回调可以做的一个例子。再次提醒，教程中还有更多的例子和更详细的内容。
- en: in the official tutorial where you can use all of these different functions
    on the custom callback。 But anyways， let's see that this works and。Let's， let's
    run this。Alright。 so it got accuracy over 90% over just one epoC so accuracy over
    90% quitting training right there and of course。 so for example， instead of doing
    on epoch and maybe you want to check after the batch。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方教程中，你可以在自定义回调中使用所有这些不同的函数。但无论如何，让我们看看这是否有效。让我们运行这个。好吧，所以在只经过一个周期后得到了超过90%的准确率，因此在这里停止训练，当然。所以例如，除了在周期结束时检查，也许你想在批次之后检查。
- en: So exactly when that batch hits that accuracy we want to we want to quit so
    you could do on batch and but anyways that's it for callbacks and how to write
    some very simple custom callbacks Thank you so much for watching the video if
    you have any questions。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当那一批次达到我们想要的准确率时，我们想要停止训练，你可以在批次上进行，但无论如何，这就是回调和如何编写一些非常简单的自定义回调的内容，非常感谢你观看这个视频，如果你有任何问题。
- en: leave them below and I hope to see you in the next video。![](img/50863ba9b782f7d5434a6b666c062394_13.png)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们留在下面，我希望在下一个视频中见到你。![](img/50863ba9b782f7d5434a6b666c062394_13.png)
