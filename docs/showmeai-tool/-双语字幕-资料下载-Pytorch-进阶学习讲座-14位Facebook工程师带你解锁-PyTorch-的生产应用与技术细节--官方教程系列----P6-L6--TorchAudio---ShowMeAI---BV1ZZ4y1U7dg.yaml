- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëPytorch ËøõÈò∂Â≠¶‰π†ËÆ≤Â∫ßÔºÅ14‰ΩçFacebookÂ∑•Á®ãÂ∏àÂ∏¶‰Ω†Ëß£ÈîÅ PyTorch ÁöÑÁîü‰∫ßÂ∫îÁî®‰∏éÊäÄÊúØÁªÜËäÇ ÔºúÂÆòÊñπÊïôÁ®ãÁ≥ªÂàóÔºû - P6ÔºöL6-
    TorchAudio - ShowMeAI - BV1ZZ4y1U7dg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: üéº„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: Hello everyoneÔºå my name is Vincent Kenville Bellair and I'm the tech lead for
    Tordu„ÄÇ which is what I'm going to talk about today„ÄÇThe goal of Torruio is to provide
    building blocks to other researchers and engineers that allows them to bring research
    to production„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: This wayÔºå Tortrivio can accelerate the development of other libraries in the
    open sourceurce ecosystem„ÄÇToorodo is built around the following core functionalities„ÄÇThe
    first functionality is IO to read and save tensors from various file formats like
    MP3Ôºå wave„ÄÇ Fl and SpÔºå we can also download and use common audio datasets where
    samples are loaded in parallel using torch multi processingcessing workers„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: The second functionality is transforms for audio and signal processing such
    as spectrogram and FCC and resembling„ÄÇThe transforms are provided as neural network
    modules in Tor2 dot transforms„ÄÇSince the transforms are written using pure Pytorrch
    operations„ÄÇ the computations can be done on the GPU and it can be compiled using
    Trchcr„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: The third is Sox and Cdi compatibility„ÄÇ Sox and Cdi our audio processingces
    library written in C++ for Sox„ÄÇ we provide an interface to use their transforms
    for CAdi„ÄÇ we provide reading and writing of CAdi binary files„ÄÇ as well as equivalent
    features like spectrogram Ns NF bank„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: The final functionality is a distribution of models„ÄÇ along with canonical example
    pipelines for distributed training for major tasks„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_3.png)
  prefs: []
  type: TYPE_NORMAL
- en: As I saidÔºå the first set of functionality revolves around IO„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_5.png)
  prefs: []
  type: TYPE_NORMAL
- en: Here's a small snippet using To dualode and transform„ÄÇThe waveform variable
    is a tensor„ÄÇ which is read from fileÔºå and the correspondingpon example rate of
    the file is read as a scalar„ÄÇThe torture to transform spectrogram is given an
    input parameter to configure its behavior„ÄÇ It is then past the input tensorÔºå which
    computes the spectrogram tensors as output„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: What's special here that I want to highlight is that not only are the transform
    standard torch and and module and so can be compiled using Jt„ÄÇ but the loads function
    uses torch minings and so can also be compiled and ported wherever Git is supported„ÄÇ
    The goal is thus to make it possible to Jit an entire pipeline to be around in
    production easily„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47b4dd266be755b011d1bea67152b4b_7.png)'
  prefs: []
  type: TYPE_IMG
- en: We support several data sets for different tasksÔºå for instanceÔºå library speech„ÄÇ
    for speech recognitionÔºå library TTS for text to speech„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_9.png)
  prefs: []
  type: TYPE_NORMAL
- en: The next set of functionalities I mentioned is transformsÔºå as I said before„ÄÇ
    they're written in pure Pi torch and as such supportÔºå batchingÔºå torch grip and
    GPU„ÄÇHere's another exampleÔºå since each transform is a torch and a module„ÄÇ they
    can be combined in a standard sequential wrapper for convenient data augmentation„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Here we take a spectrogramÔºå apply a random time stretchÔºå computeute the complex
    norm„ÄÇ apply a random frequency masking and a random time masking„ÄÇ and then convert
    the amplitude to decibel„ÄÇ Frency masking and time masking are part of speckcle
    meant„ÄÇ which is what I'm illrating in the image„ÄÇ A band of frequency and another
    in time are randomly masked„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47b4dd266be755b011d1bea67152b4b_11.png)'
  prefs: []
  type: TYPE_IMG
- en: The code is divided in functional that perform the computation and a transform„ÄÇ
    which is an NN module that wraps each functional and keeps their state Here I'm
    listing a few new functional that we added recently„ÄÇ You can seeÔºå for instanceÔºå
    maone axis that is used within the the frequency and time masking„ÄÇ We also have
    several bicode filters that are used in signal processing or voice executeded
    detection operation to detect voice„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47b4dd266be755b011d1bea67152b4b_13.png)'
  prefs: []
  type: TYPE_IMG
- en: The next functionality is the interface with socks and qualitydi„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_15.png)
  prefs: []
  type: TYPE_NORMAL
- en: For suckÔºå we offer a way of using their efficiency plus operations directly
    within Pytorrch in a torchscriptable manner„ÄÇ For instanceÔºå here I am applying
    a sequence of gainÔºå speedÔºå rate change„ÄÇ pad and trim using apply effects tensor
    directly on the Pytorrch tensor„ÄÇFor CAdi„ÄÇ Torrode provides a wrapper for Torrodo
    transforms that mimics the flags provided to CAdi binaries„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: you can also read Arc and SCP files through Torrojiio so that the processed
    output of CAdi can be used within your Torrod program CAdi is used quite a lot
    in the Aio community„ÄÇ so we want to make it easy to interface with it„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_17.png)
  prefs: []
  type: TYPE_NORMAL
- en: The final set of functionalities that I want to talk about is the addition of
    models within the library„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_19.png)
  prefs: []
  type: TYPE_NORMAL
- en: For speech recognitionÔºå we added a training example pipeline for speech recognition
    that uses Lib speech data set and the Wa to letter model„ÄÇFor text to speechÔºå we
    added a vcoder based on the WaR&N model„ÄÇ along with an example training pipeline
    in the example folder that uses Libris TTS dataset„ÄÇFor source separationÔºå we added
    the COVtizedNe model and an example training pipeline with the Wall Street Journal0
    mixed data set„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47b4dd266be755b011d1bea67152b4b_21.png)'
  prefs: []
  type: TYPE_IMG
- en: Before finishingÔºå I would like to highlight a few features that are on our roadmap„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_23.png)
  prefs: []
  type: TYPE_NORMAL
- en: FirstÔºå we would like to include the qualityy pitch feature extraction due to
    demand from the community„ÄÇSecondÔºå we are interested in including a beam surge
    decoder interface„ÄÇ this is especially useful for speech recognition application„ÄÇAnd
    finally„ÄÇ another loss that has been requested by users is the addition of the
    RNN transducer loss„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47b4dd266be755b011d1bea67152b4b_25.png)'
  prefs: []
  type: TYPE_IMG
- en: To use and learn about PytorchÔºå you can visit Pytorch„ÄÇorg/udio„ÄÇ It contains
    documentation about the APIÔºå installation instructions„ÄÇ tutorials and links to
    the Gitthub page„ÄÇ We also have a new tutorial for the recognition of speech command„ÄÇ
    have fun playing with it„ÄÇTorchd is compatible with LinuxÔºå Mac OSÔºå WindowsÔºå and
    supports Python 3„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: 6 and upÔºå just like Pytororch„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_27.png)
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for watching„ÄÇ![](img/d47b4dd266be755b011d1bea67152b4b_29.png)
  prefs: []
  type: TYPE_NORMAL
