- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëHugging FaceÈÄüÊàêÊåáÂçóÔºÅ‰∏ÄÈÅçÊêûÂÆöNLP‰ªªÂä°‰∏≠ÊúÄÂ∏∏Áî®ÁöÑÂäüËÉΩÊùøÂùóÔºúÂÆûÊàòÊïôÁ®ãÁ≥ªÂàóÔºû - P4ÔºöL4- Âü∫‰∫éPyTorchÁöÑÂàÜÁ±ªÂÆûÁé∞
    - ShowMeAI - BV1cF411v7kC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's do this manually and see how we can call our models„ÄÇ So in Pytorrch„ÄÇ when
    we do inference„ÄÇ we also want to say with torch dot no gra„ÄÇ So this will disable
    the gradient tracking„ÄÇ I explain this in a lot of my tutorials„ÄÇ So you can just
    have a look at them if you want to learn more about this„ÄÇ And then we can call
    our model by saying outputs equals„ÄÇ And then we call the model„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then here we use two asterisk„ÄÇ and then we unpack this batch„ÄÇ So if you
    remember here„ÄÇ this is a dictionary„ÄÇ And here basically with thisÔºå we just unpack
    these values in our dictionary„ÄÇ So for tens offlowÔºå you don't do this„ÄÇ So you
    just pass in the batch like this„ÄÇ But for pytorrch„ÄÇ you have to unpack this„ÄÇ And
    now we get the outputs of our model„ÄÇ So let's„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f843910cc38c033063518b8167635a3_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_3.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_4.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_5.png)'
  prefs: []
  type: TYPE_IMG
- en: Print the outputs„ÄÇ And as you might know thisÔºå these are just the raw values„ÄÇ
    So to get the actual probabilities and the predictionsÔºå we can apply the soft
    max„ÄÇ So let's say predictions equals torch or we also have this in F dot soft
    max and then here we say outputs dot logics and we want to do this along dimension
    equals1„ÄÇ and let's also print the predictions and then let's do one more thing„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So let's also get the labels labels equals and we just get this by taking the
    prediction with the the index with the highest probabilities„ÄÇ So we get this by
    saying torch dot arc max and we can either put in the predictions or„ÄÇ![](img/6f843910cc38c033063518b8167635a3_7.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f843910cc38c033063518b8167635a3_8.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_9.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_10.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_11.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_12.png)'
  prefs: []
  type: TYPE_IMG
- en: We can put in the outputs and actually don't need this„ÄÇ but just for demonstration
    let's use the predictions and then again dimension equals one and then let's print
    the labels as well and now let's actually do one more thing So let's convert the
    labels by saying labels equals and then we use list comprehension and call model
    dot config dot I to label and then it needs the actual label ID and then we iterate
    so we say four label ID in labels to list and now what this does you will see
    this when we print this So we print the labels and now let's actually„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f843910cc38c033063518b8167635a3_14.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_15.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_16.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_17.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_18.png)'
  prefs: []
  type: TYPE_IMG
- en: R this and see if this works„ÄÇ AlrightÔºå so this works„ÄÇ So as you can see hereÔºå
    we print the output„ÄÇ So these are our output„ÄÇ This is a sequence classifier output„ÄÇ
    And as you see„ÄÇ it has the launchets argument„ÄÇ So that's why we used outputs dot
    launchet„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f843910cc38c033063518b8167635a3_20.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_21.png)'
  prefs: []
  type: TYPE_IMG
- en: And then we get the actual probabilities„ÄÇ and then to get the labels„ÄÇ we used
    Arcm„ÄÇ So this is a tensza with the label1 and the label 0„ÄÇ And then we converted
    each label to the actual class name and then we get positive and negative„ÄÇ So
    by the wayÔºå this functionÔºå I think is only dedicated to a auto model for sequence
    classification„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: For exampleÔºå if we just use a auto modelÔºå Then I think it won't be available„ÄÇ
    So that's what these more concrete classes will do for you„ÄÇ it gives you a little
    bit more functionality for the dedicated task„ÄÇ So we see that the loss is none
    in this case„ÄÇ So if you also want to have a loss that we want to inspect„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Then we can give the loss or the„ÄÇüòä„ÄÇ![](img/6f843910cc38c033063518b8167635a3_23.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f843910cc38c033063518b8167635a3_24.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_25.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_26.png)'
  prefs: []
  type: TYPE_IMG
- en: Not the lossÔºå but the labels argument to our model that it knows how to compute
    the loss„ÄÇ So we say labels„ÄÇ and then we create a torch dot tenor by saying torch
    dot tenor„ÄÇ And then as a listÔºå we give it the labels1 and 0„ÄÇ And now let's run
    this again„ÄÇ And then you should see that we should see a loss here„ÄÇ And yetÔºå now
    here we see the loss„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And againÔºå this labels argument isÔºå I think special to this automod for sequence
    classification„ÄÇ![](img/6f843910cc38c033063518b8167635a3_28.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f843910cc38c033063518b8167635a3_29.png)'
  prefs: []
  type: TYPE_IMG
- en: SoÔºå yeahÔºå this worked„ÄÇ And now if we have a careful look at the probabilities„ÄÇ
    So first of all„ÄÇ we see we get label positive and negative„ÄÇ and here for the first
    one„ÄÇ This is the highest probabil„ÄÇ So 9„ÄÇ997„ÄÇ And here for the second oneÔºå this
    is the largest number„ÄÇ So it took this one„ÄÇ And this is 5„ÄÇ30„ÄÇ So if we compare
    them with the results that we got from our pipeline„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Then we see these are exactly the same numbers„ÄÇ So now you might see what's
    the difference between a pipeline and using tokenizer and model directly„ÄÇ So with
    the pipelineÔºå we only need two lines of code„ÄÇ And then we actually get what we
    want„ÄÇ So we get the label and we get the score we are interested in„ÄÇ So this might
    be just fineÔºå but„ÄÇüòä„ÄÇYeah if you want to do it manually you can do it like I showed
    you and you will get the same results that you can then use„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So yeahÔºå that's how you can use a model and a tokenizer and yeah so using the
    model and the tokenizer will be important when you for example want to find tune
    in your model so I will show you roughly how to do this later but yeah so this
    is how you use model and tokenizer and let's just assume we did find tune in our
    model„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f843910cc38c033063518b8167635a3_31.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_32.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/6f843910cc38c033063518b8167635a3_33.png)'
  prefs: []
  type: TYPE_IMG
