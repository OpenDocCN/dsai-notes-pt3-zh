- en: 【双语字幕+资料下载】OpenCV 基础教程，安装、原理、实战， 3小时带你搞定这个热门计算机视觉工具库！＜实战教程系列＞ - P14：项目2：文档扫描器
    - ShowMeAI - BV1zL411377L
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】OpenCV 基础教程，安装、原理、实战，3小时带你搞定这个热门计算机视觉工具库！＜实战教程系列＞ - P14：项目2：文档扫描器
    - ShowMeAI - BV1zL411377L
- en: '![](img/04f37d9e927ad86517b1e6fa084d48b2_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04f37d9e927ad86517b1e6fa084d48b2_0.png)'
- en: '![](img/04f37d9e927ad86517b1e6fa084d48b2_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04f37d9e927ad86517b1e6fa084d48b2_1.png)'
- en: '![](img/04f37d9e927ad86517b1e6fa084d48b2_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04f37d9e927ad86517b1e6fa084d48b2_2.png)'
- en: So in this project， we are going to start off with the webcam code。 which we
    did in the first chapter， so let me go and copy this。And let's change the parameters。
    We willll do it as one， and this will be 50。So， let's run it。And there we have
    our webcam。 so we are going to detect this document and then we are going to use
    Word perspective to get the flat out image of our documents。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将从摄像头代码开始。我们在第一章中做过，所以让我去复制这个。然后我们更改参数。我们将设置为 1，这将是 50。所以，让我们运行它。这里是我们的摄像头。我们将检测这个文档，然后使用透视变换获取文档的平面图像。
- en: which we will scan。Now。Let's move on。 So the first thing we are going to do
    is。We are going to pre processces our image， so we will apply some what you call
    preprocessing techniques so we can detect what you call the edges in our image
    properly。So let's define a function。3e。Processing。And here we are going to input
    an image。 so we will say image， and then we are going to convert this image。 first
    of all。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进行扫描。现在。让我们继续。所以我们要做的第一件事是。我们将对图像进行预处理，所以我们将应用一些所谓的预处理技术，以便可以正确检测图像中的边缘。所以让我们定义一个函数。3e。处理。这里我们将输入一张图像。所以我们会说图像，然后我们将首先转换这张图像。
- en: we will resize it so image。Is equals to C2 dot re size。Or let's resize it。Over
    here。So that the size remains the same for。The holder process， so re sizeize。And
    we are going to resize our original image。With our width and height， So width。Of
    our image and height。Of our image。So this， we can declare。On the top。嗯。That's。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调整大小，所以图像。等于 C2 点调整大小。或者我们在这里调整大小。这样大小保持不变。对于持有者过程，所以调整大小。我们将调整我们原始图像的大小。根据我们的宽度和高度，所以图像的宽度和高度。所以这个，我们可以在顶部声明。嗯。就是这样。
- en: Create a new section here。Clarations。2，6，40。And this one here is48。So let's
    remove that。This。So that being done。Okay， so， so the first thing we will do is
    we will convert it into gray scale。 So we will say image gray is equals to。CV2
    dots， CT color， and then our source， our main image。 and then we want to convert
    it into grayscale。 So C 2 dots。Color， P G，R to gray。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里创建一个新部分。说明。2，6，40。这个是48。所以我们去掉它。这。完成后。好的，所以我们要做的第一件事是将其转换为灰度图像。所以我们会说图像灰度等于。CV2
    点，CT 颜色，然后是我们的源，即我们的主图像。然后我们想将其转换为灰度图像。所以 C2 点。颜色，P G，R 转灰度。
- en: Next we are going to apply some blur， so image blur is equals to cv2。 was in
    blur。 and we have our image query to blur and then we will apply we will give
    the size of the kernel 5 by 5 and then the sigma x。 let's say1。And then， we will。Find
    our edges using our canny edge detector。 So we will say image canny。Is equals
    to。CV2 dots。Gny。And our image is blur。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将应用一些模糊，所以图像模糊等于 cv2。模糊。我们有我们的图像查询以模糊，然后我们将应用，我们将给出内核的大小为 5 x 5，然后 sigma
    x。我们说 1。然后，我们将使用我们的 Canny 边缘检测器查找边缘。所以我们会说图像 Canny。等于。CV2 点。Gny。我们的图像是模糊的。
- en: And then we have the threshold。 So we'll put。Let's say 200 by 200 so these values
    we can change as we move along。 but for now we are going to keep some random values
    and let's see how they go。Once we have done that， sometimes the edges are very
    thin。 so what we can do is we can use the dilation function to make them thicker
    and then we can use the erosion function to make it a little bit thinner again。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有阈值。所以我们设置。假设 200 x 200，所以这些值我们可以在过程中更改。但现在我们将保持一些随机值，看看效果如何。一旦我们完成，有时边缘会很细。所以我们可以使用膨胀函数使其更粗，然后可以使用侵蚀函数再稍微变细。
- en: so what we can do is we can apply two passes of dilation and one pass off what
    we call erosion。Now。 this is not compulsory， but it helps， so it is better to
    do it。Dilation is equals to C2 dot dilates。Tate， yeah， and then we are going to
    use our image canny。And we are going to define a kernel。And then， the iteration。D。Rations
    is equals 2。2。So。There is a mistake somewhere。Okay， so kernelel。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以应用两次膨胀和一次我们称之为侵蚀的处理。现在。这不是强制性的，但有帮助，所以最好这样做。膨胀等于 C2 点膨胀。是的，然后我们将使用我们的图像
    Canny。我们将定义一个内核。然后，迭代次数。D。Rations 等于 2。所以。某处有个错误。好的，所以内核。
- en: Is equals to we are going to define an array of a matrix of。AtOnce， so we need
    to define here。The port Nmpy has N P。And over here， we are going to say that our
    kernelel is nuumpy of once。And the size is five by5。Then we are going to erode
    it。 So image。Eode。Is equals to C 2。Actually。 this is the final result。 So let's
    call it threshold image。Tre。Is equals to C2 dot ero。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 等于，我们将定义一个矩阵数组。在AtOnce，因此我们需要在这里定义。Numpy有N P。在这里，我们将说我们的卷积核是numpy的once。大小是5乘5。然后我们将进行腐蚀。因此图像。腐蚀。等于C2。实际上，这是最终结果。因此我们称之为阈值图像。阈值。等于C2.ero。
- en: And then we are going to input our image dilation。And then we are going to define
    our kernel and the iterations as one。So once we process that。We can return our
    image。It turned。Image。Tial。So we can see here。嗯。Image threshold is equals to。Reprocess
    of our main image。So we can display the image。And there we go。 So we are getting。
    So if we wanted to see the what you call the output of each of these steps。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将输入我们的图像膨胀。接下来我们将定义我们的卷积核，迭代次数设为1。因此，一旦处理完成，我们可以返回我们的图像。它变成了。图像。阈值。所以我们可以在这里看到。嗯。图像阈值等于。我们主图像的重新处理。因此我们可以显示图像。好了，我们得到了。如果我们想查看这些步骤中的每一个输出。
- en: we can simply。What you call commented out and return the one we want to see。
    For example。 if we want to remove these two， we can comment it out and return
    the canny instead。So if we look at that。So here you can see our edges are quite
    1。And sometimes when there is some shadow or some reflections， then it might not
    detect properly。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地。你可以说注释掉，然后返回我们想要看到的轮廓。例如，如果我们想移除这两个，我们可以注释掉，然后返回canny。看看这个。这里你可以看到我们的边缘相当1。有时，当出现阴影或反射时，可能无法正确检测。
- en: That's why we are adding this。Here， as well。So we need to return。The threshold。And
    there you go。 So the boundaries are much thicker and easier to detect what is
    happening in the image。 So next。 we are going to move on to our contours。So we
    need to find the biggest contour in our image。 So this is what we will do now。
    So in chapter 8。For the contours， we use the function， get contours。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们添加这个。这里也是。因此我们需要返回。这个阈值。好了，边界变得更厚，更容易检测图像中发生的事情。接下来，我们将继续处理我们的轮廓。我们需要在图像中找到最大的轮廓。这就是我们现在要做的事情。在第8章中，对于轮廓，我们使用函数获取轮廓。
- en: So we are going to copy that。Till our bounding box。And we will make some changes。So
    here we'll paste it out and now we have the get contour function。So what we can
    do is we need to find the biggest one that is available to us So here we are first
    getting our contours and then for each of them we are looping again and again
    So what we can say is that first of all we need to give a threshold for the area。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将复制这个。直到我们的边界框。然后我们会做一些修改。现在我们会粘贴出来，得到了获取轮廓的函数。我们需要做的是找到可用的最大轮廓。首先，我们在这里获取轮廓，然后对每个轮廓进行循环。因此我们可以说，首先我们需要给出面积的阈值。
- en: I think it's better to add another zero because our area will be quite big。
    we can remove the print and to draw， we can copy an image here。So we can say。Image，
    let's say。Contours。Let's write。 contours is equals  to。Image dot copy。Actually。
    we should do it after the resize， cause all of them are。All of them should be
    same。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得最好再加一个零，因为我们的面积会相当大。我们可以移除打印并进行绘制，我们可以在这里复制一个图像。因此我们可以说。图像，假设。轮廓。写一下。轮廓等于。图像.复制。实际上，我们应该在调整大小之后进行此操作，因为所有这些都应该是相同的。
- en: So let's go down and then we'll write the tear and。Then， here will paste。Here
    we will paste our image contour。Actually， let's use this spelling。 It's better。How没
    control。So。 we can。Display out what is happening。So then we will remove this parameter
    and we don't need to see the length。 Do we need to see the length， Yes， we do
    need to see the length and it should be4。And then。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们往下走，然后写tear。然后在这里粘贴。这里我们将粘贴我们的图像轮廓。实际上，让我们使用这个拼写。这样更好。如何控制。然后。我们可以展示发生了什么。所以我们将移除这个参数，我们不需要查看长度。我们需要查看长度吗？是的，我们确实需要查看长度，应该是4。然后。
- en: Do we need the mounting box， Yes， Okay， so what we are going to do is first，
    we are getting our area。And then we are checking that if it is greater than 5000，
    if it's good。 then we will move on to the next step， we will draw it。On our image
    or do we need to draw。 we will see if we need to remove it later。 Now we will
    get our parameter。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要边界框吗？是的，好的，那么我们要做的是，首先获取我们的面积。然后检查是否大于5000，如果可以的话。然后我们将进入下一步，在我们的图像上绘制它，或者我们需要绘制吗？我们稍后会看是否需要移除。现在我们将获取我们的参数。
- en: and then we are going to find our approximation of our corner points。 and then
    we have to say that。If our。Area。Not sorry。 if our length。Of our。Proxiation is
    equals to 4。In that case。 what we will do is。We will say that the biggest。Is equals
    to a pro。And but as it loops。We need to find the biggest one。 So we have to put
    another condition here。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将找到我们的角点的近似。然后我们必须说。 如果我们的。区域。不是，抱歉。如果我们的。长度。我们的。近似等于4。在这种情况下。我们将说最大的。等于一个
    pro。但在循环时。我们需要找到最大的。所以我们必须在这里添加另一个条件。
- en: We will say that if our area。Is greater than。The max area。So we'll put an end
    here。So。 we'll put an hand here。And then here we will see that max area。Is equals
    to our current area。So what this will do is it will keep looping again and again
    and whenever it finds a value that is bigger than what it has before。 it will
    replace the value of the current one。So this will give us the biggest。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将说如果我们的区域。大于。最大区域。那我们就在这里结束。所以。我们将在这里放手。然后在这里我们会看到最大区域。等于我们当前的区域。那么这将不断循环，每当它找到一个比之前更大的值时。它会替换当前的值。所以这将给我们最大的。
- en: Area and the biggest of our approximation， which will be our four points。So
    do we need this。 not really， so we can remove this with the bounding box。And。Then
    all we need to do is we need to return our。Approximation， so we will return。Approx。Oh，
    sorry。 we will return the biggest one。Biggest。 so this will give us our biggest
    contour。Okay。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 区域和我们近似的最大值，将是我们的四个点。所以我们需要这个吗？不需要，因此我们可以用边界框去掉它。然后我们需要做的就是返回我们的。近似，所以我们将返回。近似。哦，抱歉。我们将返回最大的那个。最大。所以这将给我们最大的轮廓。好的。
- en: so let's run that and see what happens。Now we need to call it here。We are going
    to say that。Get contours and we will send the image threshold。Okay。 so one thing
    that we forgot to do is to define。Initially， our variables。 So the first one is
    a list。 So the biggest。Will be a Ny list， a Ny array， nuy。 array。And。The second
    one is the max area。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们运行一下，看看会发生什么。现在我们需要在这里调用它。我们将说。获取轮廓，我们将发送图像阈值。好的。那么我们忘记做的一件事是定义。最初，我们的变量。所以第一个是一个列表。所以最大的。将是一个新的列表，一个新的数组，nuy。数组。还有。第二个是最大区域。
- en: So we will say max。Area is equals20。So if we run that again。And there you go。So
    now we are getting our contours and hopefully it is returning us the biggest one。
    which is this blue one。So once we have our biggest contour。 what we need to do
    next is using its corner points。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将说最大。区域等于20。因此如果我们再运行一次。看吧。现在我们正在获取我们的轮廓，并希望它返回给我们最大的那个。就是这个蓝色的。所以一旦我们有了最大的轮廓。接下来我们需要做的是使用它的角点。
- en: we need to warp our image and get the bird's eye view。 So in order to do that，
    what we will do is。We will， first of all， get our approximation here so we can
    say that our biggest is equals to get contours image threshold。 And then after
    that， what we need to do is。We need to send it for word perspective。 so we will
    write a new function。So， we will say。Get。It worked。And inside。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要扭曲我们的图像，获得鸟瞰图。因此，为了做到这一点，我们将。首先，在这里获取我们的近似，所以我们可以说我们的最大值等于获取轮廓图像阈值。然后在那之后，我们需要做的就是。我们需要发送它进行透视变换。因此我们将写一个新函数。所以，我们将说。获取。它成功了。并在内部。
- en: we are going to send our image。And we are going to send what do we need to send。
    We need to send our biggest。Contour point。So， here。We can call this function get
    verp of our original image， and we need based on the biggest points。So actually，
    we didn't print out。 Let's see if we are getting it properly。So let's just print
    out。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发送我们的图像。我们将发送我们需要发送的内容。我们需要发送我们最大的。轮廓点。因此，在这里。我们可以调用这个函数获取我们原始图像的透视变换，我们需要基于最大的点。因此，实际上，我们没有打印出来。让我们看看是否正确获取了它。让我们只打印一下。
- en: Once we are getting the biggest one， let's print it out。So there we go。 We are
    getting four points。 so one。2， three， and four。 so we are getting them properly。So
    whether they are the correct one or not， we will look into that furthermore。Or。嗯。We
    can print it out right now。 Should we print out right now。Yeah， actually， we can。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到了最大的那个，让我们把它打印出来。看吧。我们得到了四个点。所以一个。2，三，和四。所以我们正确地得到了它们。因此，无论它们是否正确，我们会进一步查看。或者。嗯。我们现在可以打印出来吗？我们应该现在打印出来吗？是的，实际上，我们可以。
- en: What we can do is instead of printing them all。We can。Copy this。 And we can。Comment
    this out and。The last one we can do。Is we can print out the biggest one before
    it sends so we can say here biggest。And there you go，If we look at it。Let me increase
    that size。 Let's make it 20。So there you go。 So we are getting the correct points
    of our biggest contour， so the next part will be to verp。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的是，不打印它们所有。我们可以。复制这个。然后我们可以。注释掉这个。最后我们可以做的就是在发送之前打印出最大的一个，所以我们可以在这里说最大的。就这样，如果我们看看。让我增大一下那个尺寸。让我们设为
    20。就这样。所以我们得到了最大轮廓的正确点，下一部分将是 verp。
- en: So now we are going to work。Where is that function， so okay。So in the workp。
    we are going to follow what we have done before in our previous examples that
    was in chapter for the warping。 so here we have for warping we need two points
    and then we create a metrics and then we get our work perspective so we will copy
    all of that。And we will bring it into our current project。So we need to find out
    these points1 and then these points2。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们要工作。那个函数在哪里，好的。在 workp 中，我们将遵循之前在扭曲章节中的例子，所以这里我们需要两个点，然后我们创建一个矩阵，然后得到我们的工作透视，所以我们会复制所有这些。然后带入我们的当前项目。所以我们需要找出这些
    points1 和这些 points2。
- en: And then we create the metrics。 And based on that， we have the width and the
    height。 So this width and height are basically the width and height of our image。
    So we will say。With the image and。Hight image， again， width image。And height image。And
    then。What image。And then。 high damage。Okay， we can remove the bass。Okay， so the
    next step would be to put our points here。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建矩阵。基于此，我们得到了宽度和高度。因此，这个宽度和高度基本上是我们图像的宽度和高度。所以我们会说。宽度图像和。高度图像，再次，宽度图像。和高度图像。然后。什么图像。然后。高损坏。好的，我们可以去掉基础。好的，下一步是将我们的点放在这里。
- en: So we are getting our biggest contour。 and all we need to do is we need to inputs。The
    biggest contours over here， so there are already four points。 so that way we can
    easily put it directly over here。Now the next thing is fine over here。So what
    we need to do is we need to look at our image and there is a tricky part here。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们得到了最大的轮廓。我们需要做的就是输入。最大的轮廓在这里，所以已经有四个点。这样我们就可以轻松地直接放在这里。接下来是在这里找到。所以我们需要做的是看看我们的图像，这里有一个棘手的部分。
- en: and I will explain what that is， but just let's just look at our output image
    so we can say here。That return。Our image。Outputs。And here。We can call this function。
    We can say get workb。 and then we can save。That our。Pp。Image worked。没。Worb is
    equals to that。And let's show that。So there we go。そ。Now we knew that our points
    are being detected properly， but as you can see here。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我会解释这是什么，但让我们先看看我们的输出图像，这里可以说返回。我们的图像。输出。这里。我们可以调用这个函数。我们可以说 get workb。然后我们可以保存。我们的。Pp。图像工作。没。Worb
    等于那个。让我们展示一下。所以这样。现在我们知道我们的点被正确检测到了，但如你所见。
- en: the warping is not correct。And if I move it around and it even gives us an error。So
    the reason why the warping is wrong is because we have an annotation we have a
    structure at which our point should be。 so the first point in our biggest contour
    should be00 and then width0 then0 height and then width and height if for example
    in the biggest contour our width and height is in the first one and the00 in the
    second one or it's mixed up then it means that our word perspective will not properly
    work。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 扭曲是不正确的。如果我移动它，它甚至会给我们一个错误。因此，扭曲错误的原因是我们有一个注释，有一个结构我们的点应该位于的位置。所以在我们最大轮廓中的第一个点应该是00，然后宽度0然后0高度，然后宽度和高度。如果在最大轮廓中我们的宽度和高度在第一个，00
    在第二个，或者它们混合在一起，那么这意味着我们的词透视将无法正常工作。
- en: So what we need to make sure of is that when we are sending the points to verp。
    all of our points are aligned like this， so the smallest one should be the first
    one then the width and height the width and0 then the0 and height and then the
    width and the height so how can we make sure of that because our values can vary。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们需要确保的是，当我们将点发送到 verp 时，所有的点都要像这样对齐，最小的点应该是第一个，然后是宽度和高度，接着是宽度和高度，所以我们怎么能确保这一点，因为我们的值可能会变化。
- en: It can keep changing。 So what I'm trying to tell is that these values can change
    based on the angle of the paper and。Based on the contour as well。 So what we have
    to do is we have to arrange these values。 these biggest points before we send
    it for warping。 So we have to reorder them。 so we will create a new function。We
    will say， re order。And inside that， we will need our points。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以不断变化。所以我想说的是，这些值可以根据纸张的角度和轮廓而变化。所以我们必须做的是在发送之前整理这些值。这些最大点。在重新排序它们之前，我们需要创建一个新函数。我们会说，重新排序。在里面，我们需要我们的点。
- en: So my points。We need some points inside， and then we are going to apply some
    methodology inside here that will allow us to create or reorder our points。 So
    if we have， for example。Let me make it a little bit simpler if you want this now。Wait。はいた。う。If
    we add these values up， what we can do is we can add these values up and we can
    find the smallest and the biggest point。So for example， if we add 00 and we add
    width and height， width and 0。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我的要点是。我们需要一些内部点，然后我们将应用一些方法论来创建或重新排序我们的点。例如，如果我们有，让我简单一点，如果你想要这个。等一下。嗯。我们将这些值相加，接下来可以找到最小和最大的点。因此，例如，如果我们加上00，再加上宽度和高度，宽度和0。
- en: 0 and height and width and height， the smallest point will be the00 and the
    biggest point will be width and height。So this means that whatever points we are
    given here， if we add all of them up。The smallest one we will get will be our
    00。And the biggest one we will get will be our width height so this way we can
    quickly sort out which one is the biggest and which one is the smallest so which
    one is the origin and which one is the diagonal point of our corner of our rectangle
    or the last point。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 0和高度，宽度和高度，最小的点将是00，最大的点将是宽度和高度。这意味着无论我们在这里给出什么点，如果我们将它们全部相加，最小的一个将是我们的00，最大的一个将是我们的宽度和高度，这样我们就能快速区分哪个是最大的，哪个是最小的，哪个是原点，哪个是我们矩形的对角点或最后一个点。
- en: And then to find the width0 and the0 height， we can subtract them and one of
    them will give us a positive value and one of them will give us a negative value
    and based on that we can tell which one comes first and which one comes second。So
    what we need to do is。We need to first， let me show you something before we go
    ahead。嗯。Here。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后为了找到宽度和高度，我们可以相减，其中一个会给我们一个正值，而另一个会给我们一个负值，基于此我们可以判断哪个先来，哪个后来。所以我们需要做的是。首先让我在继续之前给你展示一些东西。嗯。在这里。
- en: So if we look at the shape of our what called array or the matrix。Of biggest。
    Let's have a look at that。So it is four by one by two。So we have four different
    points that we understand and for each point we have X and Y that we understand
    as well。 but that one is redundant， so what we will do is we will remove that
    one。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们看一下我们的数组或矩阵的形状。最大的。让我们看看。它是4乘1乘2。所以我们有四个不同的点，我们理解，并且对于每个点，我们也理解X和Y。但是那个是多余的，所以我们将把它去掉。
- en: So when we are about to reorder， the first thing we will do is we will say my
    points。Is equals to my points。Dot reshape。And we are going to write， we want to
    reshape it as4 by2。And then we are going to create a new matrix that we will send
    outside that we will return from this function and that。Mattrix should be the
    same as what we are receiving over here， which is 4 by one by2。Okay。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我们准备重新排序时，首先我们会说我的点。等于我的点。点reshape。我们希望将其重塑为4乘2。然后我们将创建一个新的矩阵，我们将把它发送到外部，并从这个函数返回。这矩阵应该与我们在这里收到的相同，即4乘1乘2。好的。
- en: so we will write my points。 nuon is equals to nuier dot zeros。Zeros。 And then
    we can say。4 by。1 by2。And then we can write its type， so nuy dot。Integer 32。So
    the first thing we will do is we will add。As we have discussed， we will add all
    of these values。 So inside， we have four points。Let me print this out。 So it's
    easier to see。 We will print biggest。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将写我的点。nuon等于nuier点zeros。Zeros。然后我们可以说。4乘1乘2。然后我们可以写它的类型，所以nuy点。Integer 32。我们要做的第一件事是我们将添加。正如我们所讨论的，我们将添加所有这些值。所以内部，我们有四个点。让我打印出来。这样更容易看到。我们将打印最大值。
- en: So the first step we are going to do is we are going to add each one of them。
    So 1，85 plus 55。 then 61 plus 279 and so on。 So in order to do that， we have a
    easy function。 we can say add is equals to my points。Dot sum。And we are going
    to use A 1。So this will give us。 let's print it out， and we can say。Our ad。Is。We
    are not sending it to reorder。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要做的第一步是将它们逐一相加。所以1，85加55。然后61加279，依此类推。为了做到这一点，我们有一个简单的函数。我们可以说加法等于我的点。点和。我们将使用A
    1。所以这将给我们。让我们打印出来，我们可以说。我们的加法。是。我们没有发送它进行重新排序。
- en: That's why it's not showing up。 So what we can do。Is we can。Right here。Or this
    should be inside the verp。So we can write here。Re order。And we can send the biggest
    points。So if we stop that， we can see that over here， 183 plus 55 is 238 and then
    61 plus 279 is 340 and then so on we are getting。Our values。 So the smallest one
    here is our first one。 So we are going to say that is our 00。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是它不显示的原因。那么我们可以做什么呢？我们可以。在这里写。或者这应该在verp内部。因此，我们可以在这里写。重新排序。我们可以发送最大的点。所以如果我们停止它，我们可以看到这里，183加55是238，然后61加279是340，依此类推，我们得到了。我们的值。因此，这里最小的一个是我们的第一个。所以我们将说这是我们的00。
- en: and the biggest one here is 651。 And we are going to say that is our word and
    height。 So this one is at the correct position。 It should be at 00。But this one
    is at the wrong position。 This should be the last one。 So we are going to rearrange
    our order in our new points。So we will say here that my points。New。At number0，
    which will be the first one。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而这里最大的值是651。我们将说这是我们的宽和高。所以这个位于正确的位置。它应该在00。但这个位于错误的位置。这个应该是最后一个。所以我们将在新的点中重新排列顺序。因此，我们将在这里说我的点。新的。在数字0，也就是第一个。
- en: is equals to my points。And we are going to get the index。 So we are going to，
    first of all。 find the smallest one。 So we will say that nuy dots。A RG minimum。And
    we are going to say that find the smallest one。The index of the smallest of this
    list。Or of this matrix。 So here we are going to find the smallest value and we
    are going to get its index。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 等于我的点。我们将获取索引。因此我们首先要找到最小的。我们会说nuy点。A RG最小值。我们将说找到最小的。这个列表或这个矩阵中最小的索引。所以在这里我们将找到最小值，并获取其索引。
- en: once we have its index， we are going to put it here。 And from that we are getting
    the values。 the actual x and y and then we are storing it in our new point。 The
    same thing we will do it for the biggest one which will be the last one as0，1，2，3。
    and this time around we will write it as max。So if we run that。Let me print that
    out。Brent。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了索引，我们将在这里放置它。从中我们得到值。实际的x和y，然后将其存储在我们的新点中。我们对最大的点做同样的事情，它将是最后一个作为0，1，2，3。这次我们将写作max。因此，如果我们运行它。让我把它打印出来。Brent。
- en: New points。And we can write。前にポ。So if we print that。So here we can see that
    our new points now the smallest one is at the first point and the biggest one
    is at the last point here。 So now we need to find the ones in the middle。So。Next，
    we are going to。 we can remove or let。 let's keep them for now。 So next， we are
    going to find the difference between them。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 新的点。我们可以写。前にポ。所以如果我们打印出来。我们可以看到现在新的点最小的在第一个位置，最大的在最后一个位置。所以现在我们需要找到中间的点。因此，接下来，我们将。我们可以删除，或者让我们现在保留它们。接下来，我们将找到它们之间的差值。
- en: So we can say the difference is equals to nuy dots。Difference， and we are going
    to use my points。And again， we are going to define our axis as one。Actually， let
    me write it。 you can define it like this x's as one。So then based on this， we
    are going to say that my points。The new ones at number one。Is equal to this should
    be our width and0。So this one will be my points。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以说，差值等于nuy点。差异，我们将使用我的点。再次，我们将把我们的轴定义为一。实际上，让我写下来。你可以这样定义x为一。因此，基于此，我们将说我的点。新的点在数字一。等于这应该是我们的宽度和0。所以这个将是我的点。
- en: At Nai dots。The minimum argument。Of our differentiation。And the same way。Let
    me right here。The same weight。The second one will be the maximum of our argument。So
    let's run that。 Okay。 let me print this out。But。At the bottom。 Okay， if we run
    that。And we stop it。 So now you can see that our points are rearranged， so we
    are getting width。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nai点。我们微分的最小参数。同样的方式。让我在这里写。第二个将是我们参数的最大值。所以让我们运行它。好的。让我把这个打印出来。但在底部。好的，如果我们运行它。然后停止它。所以现在你可以看到我们的点被重新排列了，所以我们得到了宽度。
- en: And then0 and then0 and then height by 0， I mean it's a lower value。So。Here
    our points are rearranged。 You can see our original points are like this。And then
    our arrange points are like this。So now we have our new point so we can send them
    back。 So should I delete。 Okay， let me。Put it as a comment。 So if you want to
    check， you can check it。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后0，0，和高度为0，我是指这是一个较低的值。所以，这里我们的点被重新排列。你可以看到我们的原始点是这样的。然后我们的排列点是这样的。所以现在我们有了新点，可以将它们发送回去。那我应该删除吗？好的，让我把它放成注释。所以如果你想检查，可以去检查。
- en: and then we can write return。My point， new。So， this will。Give us the biggest
    points rearranged。 So we will say that biggest is equals to reorder。Biggest。 so
    if we're run this now。 hopefully it will come up properly。 And there you go。 So
    our image is showing properly。 and we are getting our word perspective。 the image
    has worked。 Now。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以写return。我的点，新。所以这将给我们最大的点重新排列。所以我们会说最大等于reorder。最大。所以如果我们现在运行这个，希望它能正常显示。看，这样我们的图像显示正常。我们获得了我们的单词视角。图像已经生效。现在。
- en: the problem is that one thing is that the width is too much。 We need to reduce
    it。Let's make it 360。Okay， the camera cannot be， so 640， my camera has this issue，
    so it has to be 640 by 40。That we can do there。😔，So。Why is it still， Okay， okay，
    okay， So this is supposed to be opposite。 So this should be 6，40。And this should
    be 360。Let's make it 480。いや、間違まる。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是宽度太大了。我们需要缩小它。让我们设为360。好吧，摄像头不能，所以640，我的摄像头有这个问题，所以必须是640乘40。我们可以这样做。😔，所以。为什么它还在，好的，好的，好的。所以这应该是相反的。所以这个应该是640，而这个应该是360。让我们设为480。いや、間違まる。
- en: So this is what we are getting。 And now the thing is that our original image
    is 640 by 480。 so don't expect a lot of resolution over here， but I have put an
    image。In the resources folder。 So if you look at the resources folder， we have
    a paper。Image and this image is really high resolution。 It is 4000 by 3000。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我们得到的。现在的问题是我们的原始图像是640乘480。所以不要期待这里有很多分辨率，但我在资源文件夹中放了一张图像。所以如果你查看资源文件夹，我们有一张纸质图像，这张图像分辨率非常高。是4000乘3000。
- en: so if you apply the same method on this one， it will give you a really good
    scanned image at the end。 but because we are getting it from a live webcam and
    it is only 640 by 480 that's why the resolution is not that good。But if you can
    bump up the values， you will get much higher resolution。 So that is good for now。
    but one thing we can see is that the verp is good， but we can see some lines at
    the end。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你在这个上应用相同的方法，最后会给你一个非常好的扫描图像。但是因为我们是从实时摄像头获取的，只有640乘480，所以分辨率并不好。但如果你能提高值，就会得到更高的分辨率。所以现在这样就好，但有一点我们可以看到，verp很好，但最后我们可以看到一些线条。
- en: And we don't want that。 we what we can do is we can afford a little bit of a
    cutout a little bit of a crop around the edges so that we get some better results。
    So what we can do is we can after warping it， we can reduce some pixels so let's
    put it in the verp。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 而且我们不想要那个。我们可以做的是在边缘周围稍微裁剪一下，以便获得更好的结果。所以我们可以在变形后减少一些像素，所以让我们把它放在verp中。
- en: So here we can say that our。Let's say。Image。Outputs。Or should we name it different。
    Let's name it different。So， image。嗯。Croed。Is equal to。We are going to crop our
    image。 or we are going to say that our original image is IMG output。 and then
    we are going to remove 20 pixels from each side， so we will say 20。Then， image。Output。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这里我们可以说我们的。假设是图像输出。还是应该给它起个不同的名字？我们就给它起个不同的名字吧。图像。嗯。Croed等于。我们将裁剪我们的图像。或者我们将说我们的原始图像是IMG
    output。然后我们将从每一侧去掉20个像素，所以我们会说20。然后，图像输出。
- en: dot shape。Add zero， and then we will minus 20 from here as what。And then we
    will say 20 again。 and then we will say that our image output。Dot shape， which
    is。At 1-20。So this is the same concept what we have done before in our cropping
    example。 so if you don't remember that you can check that chapter again。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 点shape。添加零，然后我们将从这里减去20，就像这样。然后我们再说20。然后我们会说我们的图像输出。点shape，也就是在1-20。这是我们在裁剪示例中做过的相同概念。所以如果你不记得，可以再查看那一章。
- en: so once we have done that we need to resize the image so that it becomes as
    the same size as before。Because it will be easier to play around with it。So。Cbed
    is equal to C2 dot resize。 and then our image crop。And then our width。Of our image
    and then height of our image。And then we can output the crop image instead。So，
    if we learn that。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了这一点，我们需要调整图像大小，以便它与之前的大小相同。因为这样处理会更方便。所以，Cbed等于C2点resize，然后是我们的图像裁剪。然后是我们图像的宽度和高度。然后我们可以输出裁剪后的图像。所以，如果我们了解这一点。
- en: Now we are getting a much cleaner image， we have removed 20 pixels from each
    side and now it looks more like a scanned paper。Okay， so next， what we can do
    is if we want to look at what you call。The workflow。 we can add our joining I
    code， which is our stacking。If we wanted to do that， so we can go back。We can
    go to chapter 6。 and here we have the function for stacking。 We can copy this。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: And we can paste it in our current project。And just to put all these images
    together。So which of the images should we put together？So this is just a formality
    to see what is going on。So and there is another case that I will discuss now and
    you will see why that is important as well。Let's just stack the images first，
    so we will say that our image。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Aray is equals to we are going to declare an array。So here we'll put our original
    image。Then we can put our image contour。And then we can put the。Image。Biggest。Where
    that image threshold。 So let's put it down so we can put it here。Image threshold。And
    then， we can put。Image worked。So this should give us a good idea。And then we will
    just say that。Stack the images。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: so we will see it stacked。Images is equals to stack images。And we will define
    a scale。So let's say 0。6。 and then we are going to define our arrays of image。Oh，
    sorry， imagery。And then here we will copy this and paste it。Paste it。So there
    you go so now we can see the workflow。 we have our document， then we are getting
    our what we call the biggest contours and then actually this should be here。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: this should be here the other way around。So。Where is it。So that is better， I
    guess。 Yeah。 so that is better。 So again， now we are rescaling it。 so that it。Because
    of that。 it's looking a little bit weird。But if we print it out separately， it
    should be fine。What is it in each worked？
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04f37d9e927ad86517b1e6fa084d48b2_4.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: So， here we have our。Final result。Now one thing you will note now， if I remove
    the document。 it should give us an error。![](img/04f37d9e927ad86517b1e6fa084d48b2_6.png)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: There you go。Now， this error is because we did not define anything when it does
    not define the biggest。 it does not find the biggest contour。 So we need to write
    that down here。So we will say that we are going to find the biggest contour。Let
    me see up if we want to put it up or here。Okay。So。Yeah， we are sending。The biggest。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: I think it's better to put it down here。So what we can do is we can say that
    if our biggest is not equals to0 or its if it's not empty。 then we need to go
    forward so we can say。That。If biggest。Dots， sorry， dot size。Is not equals to 0。Then
    we are going to do this image work， otherwise。And this should be inside， as well。And
    this can be outside。Otherwise else， we are going to display the images still，
    but we will。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Not display the contours because we didn't find them， and we will not display
    the work。 We will just。Replace it with the original image。So let's see if that
    works。![](img/04f37d9e927ad86517b1e6fa084d48b2_8.png)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: So if I remove that， yeah， so when I remove it。It doesn't show anything and
    then when I bring it back。It's now showing me the live image。![](img/04f37d9e927ad86517b1e6fa084d48b2_10.png)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我移除那个，是的，当我移除它时，它什么都不显示，然后当我把它带回来时，现在它给我显示的是实时图像。![](img/04f37d9e927ad86517b1e6fa084d48b2_10.png)
