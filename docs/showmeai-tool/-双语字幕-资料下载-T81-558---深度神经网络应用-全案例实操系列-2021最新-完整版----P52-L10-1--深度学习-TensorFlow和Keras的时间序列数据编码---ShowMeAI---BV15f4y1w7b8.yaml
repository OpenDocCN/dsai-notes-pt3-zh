- en: 【双语字幕+资料下载】T81-558 ｜ 深度神经网络应用-全案例实操系列(2021最新·完整版) - P52：L10.1- 深度学习、TensorFlow和Keras的时间序列数据编码
    - ShowMeAI - BV15f4y1w7b8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】T81-558 ｜ 深度神经网络应用-全案例实操系列(2021最新·完整版) - P52：L10.1- 深度学习、TensorFlow和Keras的时间序列数据编码
    - ShowMeAI - BV15f4y1w7b8
- en: Hi， this is Jeff Heaton， welcome to applications of Deep neuralural Network
    with Washington University。In this module， we're going to begin to look at time
    series in particular how to encode data for time series。 because whether you're
    using a convolution neural network or a LSTM。 you need to put the data into a
    specific form for time series for the latest on my AI course and projects。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是杰夫·希顿，欢迎来到华盛顿大学的深度神经网络应用模块。在本模块中，我们将开始研究时间序列，特别是如何对时间序列数据进行编码。无论你是使用卷积神经网络还是LSTM，你都需要将数据以特定形式输入到时间序列中，以获取我最新的AI课程和项目的信息。
- en: click subscribe in the bell next to it to be notified of every new video。![](img/69d6102c602b5f5e34282741fe73a7d7_1.png)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 点击旁边的铃铛订阅，以便在每个新视频发布时收到通知。![](img/69d6102c602b5f5e34282741fe73a7d7_1.png)
- en: First， let me show you what I mean by time series and sequences because these
    become important concepts for the code that we're going to actually create in
    this module that makes use of LSTMs and temporal convolution neural networks。
    So if you think of tabular data we'll just start with tabular data the miles per
    gallon data set that we've used a couple of times as we've gone through this course。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我展示一下时间序列和序列的含义，因为这些将成为我们在本模块中实际创建的代码的重要概念，该代码使用LSTM和时序卷积神经网络。所以如果你考虑表格数据，我们可以从几次使用过的每加仑英里数据集开始。
- en: This has cars where it'll give you like the acceleration of a car， the miles
    per gallon。 the weight doesn't really matter just a series of these and then maybe
    like a type。 the actual miles per gallon data set doesn't hand up， but maybe like
    a car truck acceleration。 I don't know these can all be like normalized values
    of 0。8。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这有汽车，能给你像汽车加速度、每加仑英里的数据，重量实际上并不重要，只是一系列这些数据，然后也许是一个类型。实际的每加仑英里数据集不太完整，但可能会有像汽车、卡车的加速度。我不知道这些都可以是归一化值0.8。
- en: maybe that's pretty fast one miles per gallon， maybe it's now pretty slow1 weight
    is going to be a midranged and type we'll do just car truck So zero I mean car
    So this is one row of data。We're going to try to potentially predict something
    Now what I'm going to have that we're trying to predict is maybe the brand of
    car and we'll do that with dummy variables so there'll be like three different
    types of a brand that the car could be that's those are dummy variables and that
    is going to be the target and for this particular car maybe it's type B Now if
    you create something like this what your neural network is going to look like
    traditionally speaking as far as neural networks are going to be you're going
    to have these four that we have here as the input so you're going to have a four
    a four neural neural network that has each of these basically going into one of
    these and it's a neural network you're going to have multiple layers you're going
    have all sorts of stuff going on in there and then finally this part that is going
    to become your output neurons so one for A B and C。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这数据很快，可能每加仑一英里，现在也许变得相当慢，重量将是中等范围，类型我们将只做汽车和卡车。所以零，我是说汽车。这是一行数据。我们将尝试预测一些东西。现在我们要预测的是汽车品牌，我们将用虚拟变量来实现，可能有三种不同类型的品牌，汽车可以是这些虚拟变量中的一种，而这是目标，对于这辆特定的汽车，可能是类型B。如果你创建这样的内容，你的神经网络传统上看起来将是这样的，你将有这四个输入，所以你将有一个四个神经网络，每个基本上连接到其中之一，这是一个神经网络，你将有多个层，里面会有各种东西，最后这一部分将成为你的输出神经元，所以A、B和C各一个。
- en: So this is basically your typical sort of neural network v tababular data that
    we've had throughout this entire class Now for computer vision。 the sequences
    get really very similar Now what we do with this is we might have a sequence of
    cars coming in So say for example we weren't trying to predict is it A B or C
    maybe we're trying to predict in the future we're trying to predict what type
    of car we're going to actually sell next so to do that Traly what you would do
    is you would just add additional input neurons into this you'd put four more here
    and you would essentially time series it so this would be the top one would basically
    be that would be slot1 the second one would be two and you keep adding groups
    of four neurons onto this as you went through and you would say okay I have a
    sequence I've sold this type of。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这基本上是我们在整个课程中遇到的典型神经网络v表格数据。现在对于计算机视觉，序列变得非常相似。现在我们可能会有一系列汽车进入。因此，例如，我们不是在试图预测A、B或C，而是试图预测未来我们实际上将销售哪种类型的汽车。因此，实际上你要做的是向这个模型添加额外的输入神经元，你会在这里放四个，并且你基本上会进行时间序列处理，这样第一个就是插槽1，第二个就是2，随着你进行的过程中，不断添加四个神经元的组，你会说，好的，我有一个序列，我已经销售了这种类型的。
- en: First then I sold maybe another one that I would that I would fill in here and
    it's it's next it's in spot number two What type are we going to sell next so
    you would essentially build these sequences up as you had the data coming in So
    you you have your data that's your and then Y is essentially the next the very
    next thing So the next type That's how you that's how you traditionally did this
    before we had LSTMs and temporal convolution neural networks you would encode
    it you would do time series encoding where you basically would do a sliding window
    where the window was。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我可能会再卖一辆车，我会在这里填入，并且它在第二个位置。我们接下来要卖什么类型的车？所以你基本上会随着数据的进入逐步构建这些序列。因此，你有你的数据，Y基本上就是下一个，确切来说就是下一个类型。这就是在我们拥有LSTM和时序卷积神经网络之前，传统上是如何做到的。你会进行时间序列编码，基本上就是做一个滑动窗口。
- en: If you sold cars 1，2，3 and4， your first window would be maybe those four and
    you had sold car5 next car5 would be your output then as you took this further
    and further into the future you might then use these to predict that so it keeps
    sliding down you would use the fact that you sold cars 2。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你销售了汽车1、2、3和4，你的第一个窗口可能就是这四辆车，然后你已经销售了汽车5，接下来汽车5将是你的输出，然后随着时间的推移，你可能会用这些来进行预测，所以它会不断滑动，你会利用你销售了汽车2的事实。
- en: 3，4，5 to predict the two it sold car 6 that's called sequence and the sequence
    each of these that's not just one necessarily one value that's all four of those
    values acceleration weight type all of these that you would be feeding into the
    neural network to predict Now the important distinction here between the convolution
    neural networks in the LSTMs LSTMs in particular is how many neurons you have
    as you added more and more values to your sequence so in this case we had a sequence
    of size 4 as you add more and more of those。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用3、4、5来预测2，这被称为序列，而序列中的每个元素不一定只是一个值，而是所有四个值的加速度、重量、类型等等，这些都是你输入到神经网络中以进行预测的。现在，卷积神经网络与LSTM之间的重要区别在于，随着你将更多值添加到序列中，你有多少个神经元。在这种情况下，我们有一个大小为4的序列，随着你添加越来越多的这些值。
- en: Values into your sequence。 your number of input neurons grows and that's one
    of the limitations of these say you have a sequence size of 100。 Now still using
    larger and larger sequence sizes always adds on additional complexity whether
    you're doing a traditional neural network are an LSTM because you have to sort
    of unfold this in the back propagation when it starts to actually train it。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将值纳入你的序列。你的输入神经元的数量在增加，这就是这些模型的一个限制，比如你有一个大小为100的序列。现在，使用越来越大的序列大小总是会增加额外的复杂性，无论你是在做传统神经网络还是LSTM，因为你必须在反向传播中展开它，这样才能开始实际训练。
- en: but let's see how a LSTM would actually work。 we would not be adding these additional
    neurons on the bottom here we would simply be passing in each of these rows of
    cars。 So maybe you sold five cars in a row that was your sequence size as you
    pass those five cars in each of the four predictors the acceleration miles per
    gallon weight and type those would all go to your four input neurons you would
    simply for the next one you would send you would call the neural network again
    and you would send the second one in the sequence So as this goes through you
    are providing the。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们看看LSTM是如何实际工作的。我们不会在底部添加这些额外的神经元，而是简单地传入这些汽车的每一行。因此，也许你连续售出了五辆车，那就是你的序列大小。当你将这五辆车的四个预测值（加速度、每加仑多少英里、重量和类型）传入时，这些值都会输入到你的四个输入神经元中。对于下一个，你将再次调用神经网络，并发送序列中的第二个。随着这一过程的进行，你在提供。
- en: Nework with more and more and more cars。 Now， the difference is a traditional
    neural network that's not recurrent。 if you pass in these values for acceleration
    miles per gallon weight and type。 if you pass in 08。2。5 and 0 you're always going
    to get the same type。 just like with the ir data set that we did the same four
    inputs are always going to produce the same output for a given neural network
    unless you retrain it these recurrent neural networks maintain state。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 网络中有越来越多的汽车。现在，传统的非递归神经网络与此不同。如果你传入这些加速度、每加仑多少英里、重量和类型的值。如果你传入0、8、2、5和0，你将始终得到相同的类型。就像我们在IR数据集上做的那样，给定神经网络的相同四个输入总是会产生相同的输出，除非你重新训练它，而这些递归神经网络保持状态。
- en: So when you send in one group of inputs， it'll give you a prediction it always
    gives you a prediction。 then when you send in the second one， the fact that it's
    seen that previous input。 So this could let you look at okay your car dealers
    sold these five cars in a row based on that I' predicting that the next car sold
    will be something else。 You're not increasing the input neurons， you're simply
    sending in more and more values to the。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当你发送一组输入时，它会给你一个预测，它总是会给出一个预测。然后当你发送第二组时，前面的输入已经被看过。因此，这可以让你观察你的汽车经销商连续售出了这五辆车，基于此我预测下一辆车会是其他车型。你并不是在增加输入神经元，而是简单地发送更多的值。
- en: Ne networkss and the internal state of the neural network changes for each prediction
    you make。 and that affects subsequent predictions。Now， one thing that is very
    important to understand with these because this gets into what a sequence really
    is is say you are doing exactly like I had there。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络和神经网络的内部状态在你每次预测时都会发生变化。这会影响后续的预测。现在，非常重要的一点是要理解这些，因为这涉及到序列到底是什么，比如说你正在做的事情就和我之前提到的一样。
- en: you've sold car1， then you've sold car2 then car3 Now each of those would be
    input vectors of the four values that indicate the sort of car that it is and
    then sold car4 and then5。 So as you presented each of these to the neural network。
    if your sequence size is5 each of those and here's your neural network So as you
    present each of those four cars to your neural network in sequence。 So I mean
    this one's coming first， second， third and fourth。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经卖出了车1，然后车2，再然后车3。现在每辆车将作为四个值的输入向量，指示其类型，然后卖出了车4和车5。因此，当你依次将这些输入呈现给神经网络时，如果你的序列大小是5，每个输入都是这样，这里是你的神经网络。所以当你将这四辆车依次输入到神经网络中时，我的意思是这辆车是第一、第二、第三和第四。
- en: the internal state of that neural network is changing。 So the fact that you
    gave it one first and then two and then three for each of these it is predicting
    what it thinks that the next car would be The question with a sequence comes in。
    when does that internal state for that neural network reset it resets at the beginning。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该神经网络的内部状态正在变化。因此，你首先输入一个，然后是两个，再然后是三个，它预测接下来会是什么车。关于序列的问题在于，神经网络的内部状态何时重置？它在开始时重置。
- en: '![](img/69d6102c602b5f5e34282741fe73a7d7_3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69d6102c602b5f5e34282741fe73a7d7_3.png)'
- en: The end of the sequence So if we had defined a sequence size of four like we
    have here。 it would get reset here and reset here then when you slide it forward
    because you don't want to make just one prediction now you want to predict two34
    you want to predict those using two。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的结束。所以如果我们定义了一个序列大小为四，就像我们这里所示的那样。它将在这里重置，然后再这里重置。当你向前滑动时，因为你不想只做一个预测，现在你想预测两个、三个、四个，你想使用两个来进行预测。
- en: 3，4 and5 and predict what's going to come next now you would reset it here and
    reset it here So now let's see what this would actually look like in code and
    Python so say you were going to try to predict something into the future like
    stock prices you're now going to have essentially three dimensions whereas previously
    you had two the first axis is going to be your training set elements so these
    are like your rows in your other data sets that we've seen these are the individual
    training elements that you're giving the neural network to predict each one of
    these so however big your first axises。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 3、4 和 5 并预测接下来会发生什么，现在你将在这里重置它，并在这里重置它。那么现在让我们看看在 Python 中这实际上会是什么样的代码。假设你要预测未来的某些东西，比如股票价格，你现在将有实质上三个维度，而之前你只有两个。第一个轴将是你的训练集元素，这些就像我们在其他数据集中看到的行，它们是你提供给神经网络进行预测的单个训练元素。
- en: however big x is one is that's how big your y has to be because this is how
    many predictions this training set is going to actually。Your second axis are going
    to be the members of the sequence so those are your time steps so day one。 day
    two， day3， day4 it depends completely on how you want to represent this in a CSV
    file often those are the actual axis2 becomes the actual rows the rows become
    the time step axis one the training set elements you can't really tell that from
    the CSv file you only know that based on how big of a sequence you set to have
    it's also important to note too the sequence sizes are always set in sort of a
    maximum sequence So if you set your sequence size of 10 then you're going to have
    10 time steps that will come into it Now if you don't have 10 elements for a particular
    sequence you're training on usually zero out the remaining values on the second
    axis because these neural networks are smart enough to learn when things contract
    and expand and then features in the data like the inputs those are your third
    ones so those are like your columns on most of the data sets。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不管 x 有多大，y 也必须相应地大，因为这决定了这个训练集实际会产生多少预测。你的第二个轴将是序列的成员，也就是你的时间步，比如第一天、第二天、第三天、第四天，这完全取决于你想如何在
    CSV 文件中表示这些内容。通常情况下，第二个轴实际上会成为行，行会变成时间步，轴一则是训练集元素。你从 CSV 文件中无法真正判断这些，只能根据你设置的序列大小来了解。同时也重要的是，序列大小通常是以某种最大序列来设定的。所以如果你将序列大小设置为
    10，那么你将有 10 个时间步进入其中。如果对于特定序列的训练没有 10 个元素，通常会将第二个轴上剩余的值置为零，因为这些神经网络足够聪明，可以学习何时收缩和扩展，数据中的特征像输入那些是你的第三个轴，所以它们在大多数数据集中就像你的列。
- en: We've seen before like the miles per gallon that we just saw in the previous
    one。 the miles per gallon， the engine size， the type of car that's on your third
    axis So these three eses all you need so you're basically now dealing with a cube
    so let's look at the code where we essentially have a time series So this is a
    stock price it was at 32 that it moved to 41 then it moved to 32 then it moved
    to 20 then it moved to 15 and you might want to。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到过像每加仑多少英里这样的数据，前面的例子中提到的每加仑多少英里、发动机大小、汽车类型都在你的第三个轴上。所以这三个轴都是你需要的，因此你现在基本上是在处理一个立方体。让我们看一下代码，我们基本上有一个时间序列。这是一个股票价格，开始时是
    32，然后变为 41，接着又回到 32，再变为 20，最后变为 15，你可能想要。
- en: Determine if。At each point in the sequence， if you consider it a by or sell
    or a hold one would mean by negative one would mean sell and0 would mean hold。
    So for each of these rows， each of these train set elements， you've got to have
    a Y value。 You notice I did put brackets around this。 So this is actually a two
    dimensionmensional array。 The reason I did this is because you might want to have
    more than one input for this。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确定在序列的每个点上，是否视其为买入、卖出或持有，其中 1 表示买入，-1 表示卖出，0 表示持有。因此，对于这些行中的每一行，每个训练集元素，你必须有一个
    Y 值。你会注意到我在这里加了括号。这实际上是一个二维数组。我这么做的原因是因为你可能想要为此拥有多个输入。
- en: maybe you wanted to actually put the volume for each of these stocks too。 So
    how many it was 32 and the volume， maybe it was heavy trading this day。 not so
    heavy trading that day。 so you can put multiple different values in here。 In fact。
    that that is quite common。 If these were images like you were trying to predict
    on a video sequence。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你想为每只股票添加交易量。那么，这一天的交易量是多少呢？假设是 32，或许这一天的交易量很大，而那一天的交易量不那么大。所以你可以在这里放入多个不同的值。实际上，这非常常见。如果这些是图像，比如你试图在视频序列上进行预测。
- en: then there would be lots of values that you were adding into here。 In fact。
    you would probably add2Ds。into here to represent the grid of the pixels and we
    can see that this is essentially building a CSV file here is what it would look
    like so your your x's are the first column and then the predicted Ys。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这里会有很多你需要添加的值。实际上，你可能会在这里添加2D数据，以表示像素的网格，我们可以看到这本质上是在构建一个CSV文件，这里是它的样子，因此你的x是第一列，然后是预测的Y。
- en: Now， like I was starting to tell you before， we might want to put in the volume
    so that those are two common statistics that you track in the stock market。 The
    stock price and then the volume， both of these go up and down and fluctuate we're
    predicting neither of these two。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，就像我之前开始告诉你的那样，我们可能想要加入交易量，这是你在股市中追踪的两个常见统计数据。股价和交易量，这两者都会上下波动，我们并不预测这两者中的任何一个。
- en: we're trying to predict if we want to buy sell or hold。 And if we create this
    sort of data we can see what it looks like notice it's sort of an array of array。
    you have the outer array and then inside of that array you've got each of these
    pairs of stock price and volume and we can basically convert that into something
    that is very csv you like。 Now the sequence size， you can't tell the sequence
    size might be3， if it's3。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们试图预测我们是想买、卖还是持有。如果我们创建这种数据，我们可以看到它的样子，注意它是一种数组的数组。你有外层数组，然后在那个数组内部有每对股价和交易量，我们基本上可以将其转换为非常类似CSV的格式。现在序列大小，你可能会发现序列大小可能是3，如果是3的话。
- en: you're going to predict on0 through2 is one sequence and predict 3。 then your
    next sequence is going to be 1，2，3 and you're going to predict4 and so on。 Now
    this is where we actually define the sequence size。 So here we have51，2，3，4。5
    as our sequence size。We are creating truly this is three dimensional data because
    that's the first dimension second and third。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你将对0到2进行预测，这是一个序列，然后预测3。接下来你的序列将是1、2、3，你将预测4，依此类推。现在这是我们实际定义序列大小的地方。因此这里我们有51、2、3、4、5作为我们的序列大小。我们正在创建的确实是三维数据，因为这是第一、第二和第三维。
- en: you can count the number of leading braces to know that we can print this and
    three dimensional data looks a lot more messy。 but this is truly the type of data
    that we're going to start creating in the next parts of this module because we're
    going to actually train the LSTMs on data like that even if there's just one feature。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过计算前导大括号的数量来知道我们可以打印这些数据，三维数据看起来要复杂得多。但这确实是我们在本模块接下来部分将开始创建的数据，因为我们将实际训练LSTM模型使用这样的数据，即使只有一个特征。
- en: you still need the three dimensions This is where you're taking the stock price
    and you've just got one value but you're setting up those three dimensions。Because
    you don't happen to have a volume， so even if there's just one。 you've got to
    deal with the 3DQ Thank you for watching this video。 the next video we're going
    to look at recurrent neural networks in LS to stay up to date on this course and
    other topics and artificial intelligence。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然需要三维数据。这是你正在获取股价，而你只有一个值，但你正在设置这三个维度。因为你没有交易量，所以即使只有一个，你也必须处理3D数据。感谢观看这个视频，在下一个视频中我们将讨论LSTM中的递归神经网络，以便跟上本课程和其他人工智能主题的进展。
- en: '![](img/69d6102c602b5f5e34282741fe73a7d7_5.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69d6102c602b5f5e34282741fe73a7d7_5.png)'
