- en: 【双语字幕+资料下载】T81-558 ｜ 深度神经网络应用-全案例实操系列(2021最新·完整版) - P52：L10.1- 深度学习、TensorFlow和Keras的时间序列数据编码
    - ShowMeAI - BV15f4y1w7b8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hi， this is Jeff Heaton， welcome to applications of Deep neuralural Network
    with Washington University。In this module， we're going to begin to look at time
    series in particular how to encode data for time series。 because whether you're
    using a convolution neural network or a LSTM。 you need to put the data into a
    specific form for time series for the latest on my AI course and projects。
  prefs: []
  type: TYPE_NORMAL
- en: click subscribe in the bell next to it to be notified of every new video。![](img/69d6102c602b5f5e34282741fe73a7d7_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: First， let me show you what I mean by time series and sequences because these
    become important concepts for the code that we're going to actually create in
    this module that makes use of LSTMs and temporal convolution neural networks。
    So if you think of tabular data we'll just start with tabular data the miles per
    gallon data set that we've used a couple of times as we've gone through this course。
  prefs: []
  type: TYPE_NORMAL
- en: This has cars where it'll give you like the acceleration of a car， the miles
    per gallon。 the weight doesn't really matter just a series of these and then maybe
    like a type。 the actual miles per gallon data set doesn't hand up， but maybe like
    a car truck acceleration。 I don't know these can all be like normalized values
    of 0。8。
  prefs: []
  type: TYPE_NORMAL
- en: maybe that's pretty fast one miles per gallon， maybe it's now pretty slow1 weight
    is going to be a midranged and type we'll do just car truck So zero I mean car
    So this is one row of data。We're going to try to potentially predict something
    Now what I'm going to have that we're trying to predict is maybe the brand of
    car and we'll do that with dummy variables so there'll be like three different
    types of a brand that the car could be that's those are dummy variables and that
    is going to be the target and for this particular car maybe it's type B Now if
    you create something like this what your neural network is going to look like
    traditionally speaking as far as neural networks are going to be you're going
    to have these four that we have here as the input so you're going to have a four
    a four neural neural network that has each of these basically going into one of
    these and it's a neural network you're going to have multiple layers you're going
    have all sorts of stuff going on in there and then finally this part that is going
    to become your output neurons so one for A B and C。
  prefs: []
  type: TYPE_NORMAL
- en: So this is basically your typical sort of neural network v tababular data that
    we've had throughout this entire class Now for computer vision。 the sequences
    get really very similar Now what we do with this is we might have a sequence of
    cars coming in So say for example we weren't trying to predict is it A B or C
    maybe we're trying to predict in the future we're trying to predict what type
    of car we're going to actually sell next so to do that Traly what you would do
    is you would just add additional input neurons into this you'd put four more here
    and you would essentially time series it so this would be the top one would basically
    be that would be slot1 the second one would be two and you keep adding groups
    of four neurons onto this as you went through and you would say okay I have a
    sequence I've sold this type of。
  prefs: []
  type: TYPE_NORMAL
- en: First then I sold maybe another one that I would that I would fill in here and
    it's it's next it's in spot number two What type are we going to sell next so
    you would essentially build these sequences up as you had the data coming in So
    you you have your data that's your and then Y is essentially the next the very
    next thing So the next type That's how you that's how you traditionally did this
    before we had LSTMs and temporal convolution neural networks you would encode
    it you would do time series encoding where you basically would do a sliding window
    where the window was。
  prefs: []
  type: TYPE_NORMAL
- en: If you sold cars 1，2，3 and4， your first window would be maybe those four and
    you had sold car5 next car5 would be your output then as you took this further
    and further into the future you might then use these to predict that so it keeps
    sliding down you would use the fact that you sold cars 2。
  prefs: []
  type: TYPE_NORMAL
- en: 3，4，5 to predict the two it sold car 6 that's called sequence and the sequence
    each of these that's not just one necessarily one value that's all four of those
    values acceleration weight type all of these that you would be feeding into the
    neural network to predict Now the important distinction here between the convolution
    neural networks in the LSTMs LSTMs in particular is how many neurons you have
    as you added more and more values to your sequence so in this case we had a sequence
    of size 4 as you add more and more of those。
  prefs: []
  type: TYPE_NORMAL
- en: Values into your sequence。 your number of input neurons grows and that's one
    of the limitations of these say you have a sequence size of 100。 Now still using
    larger and larger sequence sizes always adds on additional complexity whether
    you're doing a traditional neural network are an LSTM because you have to sort
    of unfold this in the back propagation when it starts to actually train it。
  prefs: []
  type: TYPE_NORMAL
- en: but let's see how a LSTM would actually work。 we would not be adding these additional
    neurons on the bottom here we would simply be passing in each of these rows of
    cars。 So maybe you sold five cars in a row that was your sequence size as you
    pass those five cars in each of the four predictors the acceleration miles per
    gallon weight and type those would all go to your four input neurons you would
    simply for the next one you would send you would call the neural network again
    and you would send the second one in the sequence So as this goes through you
    are providing the。
  prefs: []
  type: TYPE_NORMAL
- en: Nework with more and more and more cars。 Now， the difference is a traditional
    neural network that's not recurrent。 if you pass in these values for acceleration
    miles per gallon weight and type。 if you pass in 08。2。5 and 0 you're always going
    to get the same type。 just like with the ir data set that we did the same four
    inputs are always going to produce the same output for a given neural network
    unless you retrain it these recurrent neural networks maintain state。
  prefs: []
  type: TYPE_NORMAL
- en: So when you send in one group of inputs， it'll give you a prediction it always
    gives you a prediction。 then when you send in the second one， the fact that it's
    seen that previous input。 So this could let you look at okay your car dealers
    sold these five cars in a row based on that I' predicting that the next car sold
    will be something else。 You're not increasing the input neurons， you're simply
    sending in more and more values to the。
  prefs: []
  type: TYPE_NORMAL
- en: Ne networkss and the internal state of the neural network changes for each prediction
    you make。 and that affects subsequent predictions。Now， one thing that is very
    important to understand with these because this gets into what a sequence really
    is is say you are doing exactly like I had there。
  prefs: []
  type: TYPE_NORMAL
- en: you've sold car1， then you've sold car2 then car3 Now each of those would be
    input vectors of the four values that indicate the sort of car that it is and
    then sold car4 and then5。 So as you presented each of these to the neural network。
    if your sequence size is5 each of those and here's your neural network So as you
    present each of those four cars to your neural network in sequence。 So I mean
    this one's coming first， second， third and fourth。
  prefs: []
  type: TYPE_NORMAL
- en: the internal state of that neural network is changing。 So the fact that you
    gave it one first and then two and then three for each of these it is predicting
    what it thinks that the next car would be The question with a sequence comes in。
    when does that internal state for that neural network reset it resets at the beginning。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69d6102c602b5f5e34282741fe73a7d7_3.png)'
  prefs: []
  type: TYPE_IMG
- en: The end of the sequence So if we had defined a sequence size of four like we
    have here。 it would get reset here and reset here then when you slide it forward
    because you don't want to make just one prediction now you want to predict two34
    you want to predict those using two。
  prefs: []
  type: TYPE_NORMAL
- en: 3，4 and5 and predict what's going to come next now you would reset it here and
    reset it here So now let's see what this would actually look like in code and
    Python so say you were going to try to predict something into the future like
    stock prices you're now going to have essentially three dimensions whereas previously
    you had two the first axis is going to be your training set elements so these
    are like your rows in your other data sets that we've seen these are the individual
    training elements that you're giving the neural network to predict each one of
    these so however big your first axises。
  prefs: []
  type: TYPE_NORMAL
- en: however big x is one is that's how big your y has to be because this is how
    many predictions this training set is going to actually。Your second axis are going
    to be the members of the sequence so those are your time steps so day one。 day
    two， day3， day4 it depends completely on how you want to represent this in a CSV
    file often those are the actual axis2 becomes the actual rows the rows become
    the time step axis one the training set elements you can't really tell that from
    the CSv file you only know that based on how big of a sequence you set to have
    it's also important to note too the sequence sizes are always set in sort of a
    maximum sequence So if you set your sequence size of 10 then you're going to have
    10 time steps that will come into it Now if you don't have 10 elements for a particular
    sequence you're training on usually zero out the remaining values on the second
    axis because these neural networks are smart enough to learn when things contract
    and expand and then features in the data like the inputs those are your third
    ones so those are like your columns on most of the data sets。
  prefs: []
  type: TYPE_NORMAL
- en: We've seen before like the miles per gallon that we just saw in the previous
    one。 the miles per gallon， the engine size， the type of car that's on your third
    axis So these three eses all you need so you're basically now dealing with a cube
    so let's look at the code where we essentially have a time series So this is a
    stock price it was at 32 that it moved to 41 then it moved to 32 then it moved
    to 20 then it moved to 15 and you might want to。
  prefs: []
  type: TYPE_NORMAL
- en: Determine if。At each point in the sequence， if you consider it a by or sell
    or a hold one would mean by negative one would mean sell and0 would mean hold。
    So for each of these rows， each of these train set elements， you've got to have
    a Y value。 You notice I did put brackets around this。 So this is actually a two
    dimensionmensional array。 The reason I did this is because you might want to have
    more than one input for this。
  prefs: []
  type: TYPE_NORMAL
- en: maybe you wanted to actually put the volume for each of these stocks too。 So
    how many it was 32 and the volume， maybe it was heavy trading this day。 not so
    heavy trading that day。 so you can put multiple different values in here。 In fact。
    that that is quite common。 If these were images like you were trying to predict
    on a video sequence。
  prefs: []
  type: TYPE_NORMAL
- en: then there would be lots of values that you were adding into here。 In fact。
    you would probably add2Ds。into here to represent the grid of the pixels and we
    can see that this is essentially building a CSV file here is what it would look
    like so your your x's are the first column and then the predicted Ys。
  prefs: []
  type: TYPE_NORMAL
- en: Now， like I was starting to tell you before， we might want to put in the volume
    so that those are two common statistics that you track in the stock market。 The
    stock price and then the volume， both of these go up and down and fluctuate we're
    predicting neither of these two。
  prefs: []
  type: TYPE_NORMAL
- en: we're trying to predict if we want to buy sell or hold。 And if we create this
    sort of data we can see what it looks like notice it's sort of an array of array。
    you have the outer array and then inside of that array you've got each of these
    pairs of stock price and volume and we can basically convert that into something
    that is very csv you like。 Now the sequence size， you can't tell the sequence
    size might be3， if it's3。
  prefs: []
  type: TYPE_NORMAL
- en: you're going to predict on0 through2 is one sequence and predict 3。 then your
    next sequence is going to be 1，2，3 and you're going to predict4 and so on。 Now
    this is where we actually define the sequence size。 So here we have51，2，3，4。5
    as our sequence size。We are creating truly this is three dimensional data because
    that's the first dimension second and third。
  prefs: []
  type: TYPE_NORMAL
- en: you can count the number of leading braces to know that we can print this and
    three dimensional data looks a lot more messy。 but this is truly the type of data
    that we're going to start creating in the next parts of this module because we're
    going to actually train the LSTMs on data like that even if there's just one feature。
  prefs: []
  type: TYPE_NORMAL
- en: you still need the three dimensions This is where you're taking the stock price
    and you've just got one value but you're setting up those three dimensions。Because
    you don't happen to have a volume， so even if there's just one。 you've got to
    deal with the 3DQ Thank you for watching this video。 the next video we're going
    to look at recurrent neural networks in LS to stay up to date on this course and
    other topics and artificial intelligence。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69d6102c602b5f5e34282741fe73a7d7_5.png)'
  prefs: []
  type: TYPE_IMG
