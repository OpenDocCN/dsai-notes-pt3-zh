- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P19：19）函数和参数 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P19：19）函数和参数 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/caba28d7676c25dbda8d624c235720e2_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caba28d7676c25dbda8d624c235720e2_0.png)'
- en: Okay， functions and arguments， functions are really cool。 but wouldn't it be
    cooler if you could use a function？In a functions。Argument。 what do we mean by
    that？ So let's say where we're going to do something like this， de。Test。 and then
    in here， we would do something like death。Test two or test1 or whatever we wanted
    to do。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，函数和参数，函数真的很酷。但如果你可以在函数中使用函数呢？我们所指的是什么？假设我们要做类似这样的事情，de。测试。在这里，我们将做一些像测试二或测试一之类的事情，或者我们想做的任何事情。
- en: Not exactly how we're going to do it， but yes， we are going to use functions
    as arguments。 Let's dive in and take a look。Let's dive right in here。 We're going
    to look at a function in an argument。sounds a little squarely。 but let's take
    a look here。 So I'm going to say。Deaf test。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不完全是我们要怎么做，但确实，我们将使用函数作为参数。让我们深入研究一下。让我们直接进入这里。我们将查看一个函数作为参数。这听起来有点古怪，但让我们看看。所以我将说。定义测试。
- en: And we're going to have some parameters here。 I'm going to say name， age and
    pet。 we've seen that kind of before in previous video。Good print these out。 Some
    say print。Do the match。 copy and paste， we can speed this process up just a little
    bit。 This going be a super。 super simple little function here。So we're just going
    to print out name Age PeT。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有一些参数。我将说名称、年龄和宠物。我们在之前的视频中见过这种情况。好的，打印出来。有些人说打印。做匹配。复制并粘贴，我们可以稍微加快这个过程。这将是一个超级简单的小函数。所以我们只是打印出名称、年龄和宠物。
- en: there was vastly easier ways we could have done that。 but I just want to really
    print that out one line at a time using the information we've learned so far。From
    here， we're going to make another function called get data。 and this is pretty
    common not just in Python， but pretty much every programming language out there
    where you'll have one function that returns some type of data and another function
    that actually does something with the data。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以用更简单的方法来完成这一点。但我想逐行打印出到目前为止我们学到的信息。从这里开始，我们将创建一个名为获取数据的函数。这种做法在 Python
    中非常常见，但几乎所有编程语言中都存在，你会有一个函数返回某种类型的数据，另一个函数实际使用这些数据。
- en: So， here， we're going to return。diicctionary。Using the well same kind of Ada
    pattern here。 some must say。Byan。Inter whatever age you want。 I won't tell anybody
    if you enter， you know。 something much younger or older。 if you're into that，
    I don't know。So I' just going to return a dictionary of name， age and pet。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这里，我们将返回字典。使用相同类型的模式。有些人说。输入你想要的任何年龄。如果你输入的年龄比实际年轻或年长，我不会告诉任何人。如果你喜欢这样，我不知道。所以我将返回一个包含名称、年龄和宠物的字典。
- en: Now we have some fundamental problems here。For example， how do we actually use
    these two together？
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在这里有一些基本问题。例如，我们如何将这两者结合使用？
- en: Well， there's the standard way， as I call it。Which you would just call this，
    stand along， get data。But now you have to feed it in like this。Best。And you have
    to do this。 really long， annoying。You got to get the order right and all this
    other fun stuff， which is really not that fun at all。And you can do that all day
    long。 And of course， if you change one thing。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，有我称之为的标准方式。你只需调用这个，单独获取数据。但现在你必须像这样输入。最好。你必须做得很长，令人烦恼。你必须把顺序弄对，所有这些其他麻烦事，实际上一点也不好玩。你可以这样做一整天。当然，如果你改变一件事。
- en: you've got to change everything else。 and it becomes just a royal nightmare，
    but it does work。Yeah。 we did look at an easier way with packing data or unpacking
    data， I should say。 and we're going to say test。And now， we're going to call。Yet
    data。But there's a fundamental problem here。If we call it like this and we're
    actually calling that function。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须改变其他一切。这会变得非常麻烦，但确实有效。是的，我们确实考虑过一种更简单的方式来打包或解包数据，我应该这么说。我们要说测试。现在，我们要调用。数据。然而这里有一个根本性的问题。如果我们这样调用，实际上是在调用那个函数。
- en: we are returning a dictionary， but now we need to unpack it。 example， if I just
    run it。 it's going to say missing two required positional arguments。Agent pet。
    So now let's just go ahead and tell Python to unpack that。Save and run but now
    it works。 and it's very simple， very easy you can do it all in one line。 super
    cool the way that works。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在返回一个字典，但现在我们需要解包它。例如，如果我只是运行它。它会说缺少两个必需的位置参数。代理宠物。所以现在我们就告诉Python解包它。保存并运行，现在它可以工作了。非常简单，非常容易，你可以在一行中完成。这种工作方式太酷了。
- en: '![](img/caba28d7676c25dbda8d624c235720e2_2.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caba28d7676c25dbda8d624c235720e2_2.png)'
- en: '![](img/caba28d7676c25dbda8d624c235720e2_3.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caba28d7676c25dbda8d624c235720e2_3.png)'
- en: Okay， so we're going to cover something a little different。 It's a function
    as an argument。 We've already covered a function in an argument right here where
    we said test。 and then we've called get data with these parentheses and we had
    unpack it。 And we've got all these special characters in the special order that
    we got to get just right or nothing works。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们将讨论一些稍微不同的内容。这是一个作为参数的函数。我们已经在这里讨论了一个作为参数的函数，其中我们说了测试。然后我们用这些括号调用获取数据，我们得到了所有这些特殊字符，按照特定顺序处理，否则就无法工作。
- en: We're going to do something a little bit easier。I'm going to say deaf。 and I
    need a good name。 Let's call it bunky。 Why not。I don't know what name to give
    it。 So we're going to call it funky。 and we're going to have a variable called
    data。So far everything's very abstract。 nothing's really defined， we just have
    a variable called data。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将做一些简单一点的事情。我将说def。并且我需要一个好名字。我们叫它bunky吧。为什么不呢。我不知道该给它什么名字。所以我们称其为funky。我们将有一个名为数据的变量。到目前为止，一切都非常抽象。什么都没有真正定义，我们只有一个叫做数据的变量。
- en: And we're going to make another variable called D。 And it's going to be。The
    result of data。Notice how data is being called like a function， even though it's
    also a variable。Other languages。 you would call that like a function pointer，
    but basically what's going on is worthre saying。Rrab some function and then call
    it doesn't matter what we name it， we could name this。Kittens。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建另一个变量D。它将是数据的结果。请注意，数据是像函数一样被调用的，尽管它也是一个变量。在其他语言中，你会称其为函数指针，但基本上发生的事情是，我们说。抓住一些函数然后调用它，无论我们怎么命名它，我们可以把它叫做。小猫。
- en: And then D is going to be the result of kittens。 The name really isn't matter。
    What matters is we are going to call this as a function。 And Python is smart enough
    to know， hey。That variable is a function pointer under the hood。 Do something
    with it。 So I're going to go ahead and print out。第一。Now to do this， I'm going
    to say。放见。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后D将是小猫的结果。名称并不重要。重要的是我们将把它作为函数调用。Python足够智能，知道嘿。那个变量在内部是一个函数指针。做一些事情。所以我将继续打印。第一。现在为了做到这一点，我将说。放见。
- en: And we're going to reuse。Our Gi data function from up here。 which is just going
    to return a dictionary object。So here is the important bit。 I'm going to just
    say this。Notice there's no stars。 There's no extra parameters。 It doesn't。Looked
    like this。It's just the word， yet data。And I'm going to actually put a special
    note right there。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用我们上面提到的Gi数据函数。它将返回一个字典对象。所以这里是重点。我想说的是。请注意，没有星号。没有额外的参数。它看起来不会像这样。它只是一个单词，yet
    data。我实际上要在这里放一个特别的备注。
- en: Let's go ahead and run this， see what it looks like。 So this is the result right
    here。 It is our dictionary。And in case we are just super， super concerned with
    that， we can say。E equals。And then第。Sa run just to verify D equals。 blah， blah，
    blah。 So what's going on into the hood here is we are saying our function is going
    to have a variable。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一下，看看效果如何。这就是结果。它是我们的字典。如果我们对此非常担心，我们可以说。E等于。然后运行一下以验证D等于。等等，等等。那么，这里发生的事情是我们说我们的函数将有一个变量。
- en: and we're going to take that variable and now treat it like a function。 and
    Python's smart enough to go out。And say， O， Funky is getting this guy right here。
    And we're now converting that。To an argument for our function。 that is extremely
    cool。 As long as everything just works， we can then go ahead and do something
    like this。😊，Let's say print。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把那个变量当作一个函数来处理。Python足够智能，可以识别出这个家伙。我们现在将其转换为函数的一个参数，这实在是太酷了。只要一切都能正常工作，我们就可以继续做一些这样的事情。😊，假设打印一下。
- en: And we can do this a number of different ways。 I'm going to do it the long way
    just because why not。And' go ahead and go D。And we got to worry about those single
    double quote issues again。 there are other ways of doing this。Age。If you're wondering
    where I'm hitting these and typing it horribly。 it's actually from our dictionary
    object up here。 So I know we have a name at age and then a pet。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用很多不同的方法来做到这一点。我将用较长的方式来做，为什么不呢。然后继续去D。我们又得担心单引号和双引号的问题了。还有其他方法可以做到这一点。如果你在想我这些输入是从哪里来的，其实是从我们上面的字典对象。所以我知道我们有一个名字、一个年龄和一个宠物。
- en: So let's go ahead and grab the pet， too。We could have done this a number of
    different ways。 We could have done for loop。 We could have， tested to see if it
    was actually in the dictionary keys。 grab the item。 however we wanted to do it。And
    Ta just works。 main takeaway from here is we can actually use a function as an
    argument and then use that variable as a function。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们继续把宠物也抓取过来。我们可以用很多不同的方法来做这个。我们可以使用for循环。我们也可以测试它是否在字典的键中，随便以我们想要的方式抓取这个项目。而Ta就是这样工作。这里的主要收获是，我们实际上可以将一个函数作为参数，然后将那个变量用作函数。
- en: '![](img/caba28d7676c25dbda8d624c235720e2_5.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caba28d7676c25dbda8d624c235720e2_5.png)'
- en: Very cool the way that works。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式真酷。
