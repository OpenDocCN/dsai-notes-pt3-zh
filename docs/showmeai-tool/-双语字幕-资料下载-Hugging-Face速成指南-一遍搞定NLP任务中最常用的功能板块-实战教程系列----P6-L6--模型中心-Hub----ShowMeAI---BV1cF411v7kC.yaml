- en: 【双语字幕+资料下载】Hugging Face速成指南！一遍搞定NLP任务中最常用的功能板块＜实战教程系列＞ - P6：L6- 模型中心(Hub) -
    ShowMeAI - BV1cF411v7kC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Hugging Face速成指南！一遍搞定NLP任务中最常用的功能板块＜实战教程系列＞ - P6：L6- 模型中心(Hub) -
    ShowMeAI - BV1cF411v7kC
- en: And now let's have a look at how we can use a different model。 So like here。
    you can either load this from your disk if you already have a print model somewhere
    on your computer。 But what you can also do is you can go to the huggingface model
    hub。 So you can find this at huggingface do co slash models。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用不同的模型。就像这里一样。如果你已经在电脑上有一个打印模型，可以从磁盘加载它。但你也可以去huggingface模型中心。你可以在huggingface.co/models找到这个。
- en: And here you have the model hub and you can search through different models。
    So for example。 you could filter for the tasks。 So in this case， we want to do
    text classification。 which is the same as sentiment analysis。 And then it filter
    is applies this filter。 So you can see the most popular model is already this
    one。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你有模型中心，可以搜索不同的模型。例如，你可以按任务进行过滤。在这种情况下，我们想做文本分类，这与情感分析是相同的。然后过滤器应用了这个过滤器。所以你可以看到最受欢迎的模型已经是这个。
- en: And then we can click on this and get some more information。 And as you could
    see So this is the exact same model name that we。😊。![](img/c49080a006eb77701b68e6f3b6db92e5_1.png)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以点击这个，获取更多信息。正如你所看到的，这正是我们使用的模型名称。😊！[](img/c49080a006eb77701b68e6f3b6db92e5_1.png)
- en: In our code。 So once you've decided for a model， you can click here and copy
    this name and then paste into your code。 So let's say in this case， we want to
    use a different model。 So in this case。 I want to do sentiment classification
    with Germanman sentences。 So then， of course。 I need one that is trained on chairman。
    So you can filter here so you can search so I can either again search for distt
    bird and see what different versions there are available。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中。一旦你决定了一个模型，你可以点击这里复制这个名称，然后粘贴到你的代码中。那么在这种情况下，我们想使用不同的模型。所以在这种情况下，我想用Germanman句子进行情感分类。所以当然，我需要一个针对Germanman训练的模型。所以你可以在这里进行过滤，可以搜索，我可以再次搜索distilbert，看看有哪些不同版本可用。
- en: or let me search for Germanman。And then here， let's take the most popular one。
    So by Oliver Gour。 And then we see this is a German sentiment bird。 And then we
    get more information。 And sometimes we also see some example code， which is helpful。
    So yeah， this is nice。 And now what we have to do is we want to click here and
    copy。 this will just copy the name。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 或者让我搜索Germanman。然后这里，让我们选择最受欢迎的一个。所以是Oliver Gour。然后我们看到这是一个德国情感鸟。接着我们获取更多信息。有时我们还会看到一些示例代码，这很有帮助。所以是的，这很好。现在我们要做的是点击这里并复制。这样就会复制名称。
- en: And then in our application， let me comment this out。 And then let's again say
    model name equals。 And now I hit paste。 So now it pasted this string here。 So
    now we have this。 And now here we can give our model and tokenizer the model name。
    So model name and model name。 And now let's do this for some example text and
    Germanman。 So let me copy and paste this in here。😊。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在我们的应用中，让我把这个注释掉。接下来再说模型名称等于。现在我点击粘贴。所以现在它在这里粘贴了这个字符串。现在我们有了这个。现在我们可以给我们的模型和分词器设置模型名称。所以模型名称和模型名称。现在我们来处理一些示例文本和Germanman。所以让我把这个复制并粘贴到这里。😊
- en: '![](img/c49080a006eb77701b68e6f3b6db92e5_3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c49080a006eb77701b68e6f3b6db92e5_3.png)'
- en: So basically， let me quickly translate this for you that this as not a good
    result。 This was unfair。 This was not good， not as bad as expected， this was good
    and she drives a green car So basically these three texts are negative This one
    is rather positive and this is neutral。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上，让我快速翻译一下，这不是一个好的结果。这是不公平的。这不好，不如预期那么糟糕，这很好，她开了一辆绿色的车。所以基本上这三条文本是负面的，这条相对积极，而这条是中性的。
- en: So let's see if our model can detect this correctly So now again。 like above
    we do the same steps so we could copy and paste this so let's copy and paste this
    and then the same as above we say with torch torch dot no gras and then we call
    the model So we say outputs equals model and then here we unpack our batch then
    we have the model then we want to have。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们看看我们的模型是否能正确检测到这一点。现在再次像上面一样，我们执行相同的步骤，可以复制和粘贴，所以我们复制并粘贴，然后和上面一样，我们说用torch
    torch.dot no grad，然后调用模型。所以我们说outputs等于模型，然后在这里解包我们的批次，这样我们就有了模型。
- en: Label I， so let's say label I equals。 and then we use the torch do arc max function
    with the outputs and along dimension equals one and let me remove this one and
    then we print the label I So print the label I and then we do the same as we do
    here。 So we want to convert them to the actual label names by calling model dot
    config I to label label I for label in here we call this label Is to list and
    then print the labels and now let's run this and actually let's also print the
    batch in this case and let's have a look at how this looks like。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 标签I，所以我们假设标签I等于。然后我们用torch do arc max函数与输出，并且沿着维度等于1，让我去掉这个，然后我们打印标签I。打印标签I，然后我们做和这里相同的事情。所以我们想通过调用model.config
    I将它们转换为实际的标签名称，为标签在这里我们称这个为label Is to list，然后打印标签，现在让我们运行这个，实际上我们在这种情况下也打印批次，看看它的样子。
- en: So let's run this and I get anarrow。 So here I forgot to。Say outputs dot loets
    like we did before。 So let's try it again。 And this is only two results。 So of
    course， here in our tokenr。 we want to use these texts。 So let's call this X train
    underscore grman and then let's use x train underscore Germanman here and let's
    run it again。 Alright， and as we can see we get the labels 1，1，1，0。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们运行这个，我得到一个错误。所以这里我忘记了。说outputs.loets就像我们之前做的那样。让我们再试一次。这只有两个结果。所以当然，在我们的tokenr中，我们想使用这些文本。所以让我们称这个为X
    train underscore grman，然后在这里使用x train underscore Germanman，然后让我们再运行一次。好吧，正如我们所见，我们得到了标签1，1，1，0。
- en: 0 and2 and this is equal to negative negative negative then two times positive
    and then neutral。 So yeah， this is exactly what I told you the first three sentences
    are rather negative than two positive ones and this one is neutral。 So yeah now
    our Germanman model works as well。 And this is how we can use different models
    So we simply search the model hub and。Hopefully there is an already pretrained
    version for the task we want and then we can just use this here as our model name
    and then we are good to go Or if there is not a already pretrained version then
    we have to do this ourselves and find you in our own model so I will show you
    how you do this in a moment but now one more thing I want to mention。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 0和2，这等于负负负然后两倍的正面，然后中性。所以是的，这正是我告诉你的，前面三句话相对负面，而两个是正面的，这一个是中性的。所以是的，现在我们的Germanman模型也有效。这就是我们如何使用不同模型的方法，所以我们简单地搜索模型库。希望那里有一个已经预训练的版本来完成我们想要的任务，然后我们可以把这个作为我们的模型名称使用，然后我们就可以开始了。如果没有已经预训练的版本，那么我们就得自己动手找到自己的模型，稍后我会告诉你如何做到这一点，但现在我想提到的还有一件事。
- en: So I want to talk about this return Tenos equals P。 So if we here we print the
    batch and here the input Is and then we see this is a Tenor So right now it's
    already in the Pyth format。 So we could use Tenorflow here or we just omit this
    and if we omit this then we don't have this in the Tenzo format So now it is just
    a Python list I think then。What you could do is you could convert this so we can
    say batch equals and then we convert this to a tenor by saying torch dotenor and
    then we give it the we call this batch and this is a dictionary so we can say
    batch and then access the key input IDs like we see here and now we created a
    actual tenor out of this and then we don't have to unpackick it like this here
    so now we remove this and then if we run it again then this should work as well
    and yeah this work too so we get the same result and here we printed our batch
    and now we see this is a tenor directly so yeah be careful here to specify what
    you want So it's actually if you use pytorch then it's just simpler to use this。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想谈谈这个返回的Tenos等于P。这里我们打印批次，这里的输入是，然后我们看到这是一个Tenor，所以现在它已经是Pyth格式了。我们可以在这里使用Tenorflow，或者我们可以省略这个，如果省略这个，那么我们就没有Tenzo格式。所以现在它只是一个Python列表。我想你可以这样做，你可以转换这个，所以我们可以说batch等于，然后我们通过说torch.dotenor将其转换为tenor，然后我们给它，我们称这个为batch，这就是一个字典，所以我们可以说batch，然后访问键input
    IDs，就像我们在这里看到的，现在我们用这个创建了一个实际的tenor，然后我们不必像这样解包它，所以现在我们去掉这个，如果我们再次运行，那么这也应该工作，是的，这也有效，所以我们得到了相同的结果，这里我们打印了我们的批次，现在我们看到这直接是一个tenor，所以是的，小心指定你想要的。所以如果你使用pytorch，那么实际上用这个会更简单。
- en: As a return argument。 So return tenos equals P。 But if you don't use this。 then
    you know what you can do otherwise。 Alright， so now we know how we can use different
    models。 So yeah， try this out for other models in your language and see if this
    works。 And now let's have。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为返回参数。所以返回tenos等于P。但是如果你不使用这个。那么你知道你可以做什么。好吧，所以现在我们知道如何使用不同的模型。是的，尝试在你的语言中为其他模型测试一下，看看这是否有效。现在让我们有。
- en: '![](img/c49080a006eb77701b68e6f3b6db92e5_5.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c49080a006eb77701b68e6f3b6db92e5_5.png)'
