- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëT81-558 ÔΩú Ê∑±Â∫¶Á•ûÁªèÁΩëÁªúÂ∫îÁî®-ÂÖ®Ê°à‰æãÂÆûÊìçÁ≥ªÂàó(2021ÊúÄÊñ∞¬∑ÂÆåÊï¥Áâà) - P49ÔºöL9.3- ËÆ°ÁÆóÊú∫ËßÜËßâÂíåKerasÁöÑËøÅÁßªÂ≠¶‰π†
    - ShowMeAI - BV15f4y1w7b8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HiÔºå this is Jeffheine welcomel to applications of deep neural networks of Washington
    University In this video„ÄÇ we're going to look at transfer learning and how we
    can transfer computer vision neural networks that have been developed for us into
    Cars for the latest on my AI course and projects„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Click subscribe in the bell next to it to be notified of every new video„ÄÇ So
    let's do some actual transfer learning for computer vision in Cars to show you
    how to make use of the mobile net„ÄÇ We're going to transfer this completely into
    our Python code and we'll be able to recognize 10 different image types„ÄÇ We're
    going to also implement a veryÔºå very simple example of how we'll extend this to
    learn„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: We're really trying to see if we can just add a few images to it and actually
    teach it to recognize a couple of different dog breeds and we'll see that we have
    some degree of success with this to do this as a real project„ÄÇ we would have to
    capture quite a few additional images to do this„ÄÇ You'll get a chance to try this„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: üòä„ÄÇ![](img/fea53c1ab8aaa1af63aff2f2daccb4dc_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: Out in the assignments to create your own transfer learning for computer vision„ÄÇ
    We're going to try to create the Microsoft dog breed image search„ÄÇ So this is
    this is a project that Microsoft probably worked on for some degree of time„ÄÇ We're
    going try to do a veryÔºå very simple poor man's version of this that recognizes
    just a couple of dog breeds„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: but you can basically put in pictures of of dogs„ÄÇ and it will tell you using
    a convolution„ÄÇ probably a transfer„ÄÇ I don't know if they train this from scratch
    or if they use some transfers from existing neural networks„ÄÇ But nonethelessÔºå
    we'll try to do something somewhat like this First„ÄÇ before we even try transfer
    learning„ÄÇ let's just see if we can get mobile net loaded and actually work„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So I'm going to pull in these imports so that we have it this command here will
    basically load in imagenet from Kis so that we can make use of it in mobilenet„ÄÇ
    Let me go ahead and pull this„ÄÇüòä„ÄÇ![](img/fea53c1ab8aaa1af63aff2f2daccb4dc_3.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fea53c1ab8aaa1af63aff2f2daccb4dc_4.png)'
  prefs: []
  type: TYPE_IMG
- en: NowÔºå if this was the first time that you were running it„ÄÇ you'd see download
    bars go across and it would download the entire mobilenet imagenet waits for you„ÄÇ
    This can be a very good way to learn about how to architect neural networks„ÄÇ you
    can look at the summary for these and it shows you And by the way„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: this include top that I have here true that just means load the whole thing
    when we go to do transfer learning will say false meaning to share off the output
    layers like we did in the previous part„ÄÇ but we'll take the bottom part for feature
    engineeringÔºå but the top part of the network„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: we're going to put in our own so that we can teach it to classify images that
    we're never in the original image net„ÄÇ This is what it looks like„ÄÇ you'll notice
    some things here that are kind of interesting„ÄÇ we're doing fairly small numbers
    of filters and we tend to get bigger and bigger as we go out 256„ÄÇ512 and so on
    and so forth you can see that they are using batch normalization extensively so
    it can be very interesting to look at these and„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: how these extremely well researched libraries of weights that were transferring„ÄÇ
    how theyve structured their deep neural networks„ÄÇ When you finally get out to
    here at the very end„ÄÇ you'll see these thousands„ÄÇ that's for the these are the
    final output layers that will get removed but these are what are used to classify
    those 1000 different images that this thing is designed to deal with So then let's
    go ahead and try to see how well it will classify images„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Now I grabbed just some URLs here from Google image search„ÄÇ These are a variety
    of different images„ÄÇ I just want to see how well imageNe and classify it„ÄÇ Feel
    free to put your own in here„ÄÇ and classify those as well„ÄÇ you can load them from
    files too„ÄÇ let's go ahead and run this„ÄÇ It should be loading those URLs It's actually
    done already you'll see that first image that I picked So that first image is
    a suck ball and it's literally from Shopify„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So I was actually doing Google image search„ÄÇFinding an image and just right
    clicking„ÄÇ copy image URL and putting it into here„ÄÇ So this was actuallyÔºå I guess„ÄÇ
    a real soccer ball for sale that I happened upon„ÄÇ But you'll notice that image
    the image net train mobile net saying with 99% probability that it believes that
    is a soccer ball„ÄÇ So it's quite good„ÄÇ It's saying honeycomb is the next one down
    but it's pretty uncertain of that„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: but I could see where it's going with honeycomb„ÄÇ It's similar shapeÔºå a dumbbellÔºå
    no idea or balloon„ÄÇ maybe wall clock who even knows So these are just some of
    the classifications that it's done„ÄÇ Now you could take your the python code up
    there and you could write all kinds of computer vision applications„ÄÇ you wouldn't
    even have to train the neural networkÔºå just use mobile net„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and you'll have this capability here I pick just a random car„ÄÇ It actually identified
    it as a racer definitely not a convertible„ÄÇ sort of a sports car„ÄÇ it's a truck„ÄÇ
    It does recognize that as a pickup truck„ÄÇ It's definitely not an amphibian„ÄÇ if
    you put that in waterÔºå it would sink to the bottom„ÄÇ pretty So and it's„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Also showing the class number so the classes between 0 and 999 so these are
    the classes that you have it might be 1 to1000 I'm not totally sure what the indexes
    are There's me I was hoping it would classify me as a person but OL it classifies
    me as a suit which I guess is a synonym for a lawyer„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: I might take some offense to that„ÄÇ It says that I have a Winsor tie„ÄÇ There is
    no tie on there„ÄÇ It's very difficult to get me to wear a tie„ÄÇ I very rarely wear
    them groomroom„ÄÇ I was a groom at one point when my wife and I got marriedÔºå but
    that was not the day„ÄÇ Definite not a trench coat„ÄÇ And I don't know why it thinks
    I'm a cellular telephone„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: I use him a lotÔºå but I am not a cellular telephone„ÄÇ This is my dog Hckory„ÄÇ He's
    a English bulldog„ÄÇ but it's a very close up„ÄÇ So I'm trying to be mean and confuse
    itÔºå And I do successfully„ÄÇ There are some dog breeds in image netÔºå So it can do
    some breed identification already„ÄÇ but it's saying that it's a pug or maybe a
    French bulldog wrong country wrong breed altogether„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Defite not a boxerÔºå Def not a bullmesteef„ÄÇ That is one of the biggest dogs that
    there there is„ÄÇ And I don't even know what this is„ÄÇ So using this„ÄÇ and the code
    from up here„ÄÇ You can basically load in this image net„ÄÇ and you can start to classify
    this„ÄÇ or you can use Yolo if„ÄÇNeeded if you want to look at the previous module
    that I had on that where you can learn to actually create something that needs
    to recognize several things on the screen„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So maybe a car and a person and know the actual X and Y that they're located
    at but this you could do a number of things you could potentially write a robotic
    dog door that only opens for whatever it classifies your dog as thatd be a fun
    project but this is showing you basically the make square we had that before it
    just does a Instagram type„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: make it make it a portrait„ÄÇ we go through all the URLs and I basically load
    the URL 1 by1 convert it into an image load it I resize it to the image heighthen
    which which is 224 by 224 anti asing convert the image to an array„ÄÇ expand the
    dimensions if necessary and then I preprocess the image preprocess input that's
    provided by Ks to help you pre-process your image and then I'm ready to„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: The predictions here I essentially then print out the numberÔºå which is the agm„ÄÇ
    and I also get the decode predictions function that was provided by Kis„ÄÇ and this
    lets me print out this nice list of the probabilities„ÄÇ So this could be a starting
    point for all kinds of applications that you might you might want to create„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: but let's try to do actual transfer learning„ÄÇ So here I am going to load the
    same thing again„ÄÇ but include top is going to be false„ÄÇ I load and I print out
    the summary„ÄÇ You'll see that those 1000 layers at the bottom are not there„ÄÇ We
    stop right at the 1024s„ÄÇ So it's just like the one that we saw earlier in this
    partÔºå but we're stopping early„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Now everything is still trainable„ÄÇ Well mark those as nontrainable in a moment
    here we add on the additional layers„ÄÇ So I am going to add on two dense layers
    of 1024 just kind of continuing there„ÄÇ These will be trainable„ÄÇ all the stuff
    that you see up here will not be trainable„ÄÇ And then I put a softm„ÄÇHere because
    we're going to basically add three different types of dog Here I actually build
    the model„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and here I mark the first 20 as trainable false the last as completely trainable„ÄÇ
    Now Kira has some really nice capabilities to let you train from folders Here
    I am going to train this according to this„ÄÇ this folder„ÄÇ Now the structure that
    you put this into becomes very important„ÄÇ So this is users Jheton downloads trans„ÄÇ
    So that's just where I happen to put it in there„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So trans for transfer learning„ÄÇ let me show you that folder„ÄÇ So this is the
    folder I have set up„ÄÇ you'll see I have class A B and CÔºå those are my three types
    of dog„ÄÇ I do not have a huge training set here„ÄÇ So class A„ÄÇ these are all bulldog
    type animals and then class B these are poodles Class C„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: these are German shepherds„ÄÇ So this is how you would set it up„ÄÇ you just to
    label these„ÄÇ You have your images here„ÄÇ they can be Jpegs and PGs and you name
    the„ÄÇ![](img/fea53c1ab8aaa1af63aff2f2daccb4dc_6.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fea53c1ab8aaa1af63aff2f2daccb4dc_7.png)'
  prefs: []
  type: TYPE_IMG
- en: Folds so that the common classes are grouped together„ÄÇ that gives you your whys
    the folder names and then the actual files going to each of the folders„ÄÇ what
    you actually name these files doesn't matter„ÄÇ And I simply point it to here„ÄÇ This
    tells it the target size so it's going scale all of those as need B to 224 We're
    trying to classify them as categorical so we want the three classes and we go
    ahead and run this found 9 images belonging to three classes„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Now if you want to train thisÔºå you'll have to go in and pull in your own images
    and create that directory structure„ÄÇ some of those images are potentially copyright
    it so I can't really create a collection of those but you may also not want to
    do dog breeds as well and you'd probably want to grab quite a few additional images
    you'd ideally want maybe 50 to 100 in each of the classes but that's just a stab
    at it Now I'm going to train it„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: This will go pretty quick actually I'm only training it for five epos I could
    certainly do more and that might give us„ÄÇBetter accuracy„ÄÇ I'll go ahead fast forward
    this until it's done„ÄÇ And now we're done„ÄÇ So let's go ahead„ÄÇ I put in different
    URLs for different dogs that were not in the training set„ÄÇ So let's see how well
    it actually does„ÄÇ AgainÔºå this is mainly going through the motions You'd want quite
    a few additional images if you are going to do this for real right there's a German
    shepherd„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: It's saying it class 2„ÄÇ Here's another German shepherd also class 2„ÄÇ Now here's
    a bulldog„ÄÇ if this is class 2„ÄÇ that's an epic fail„ÄÇ So it is thinking that this
    bulldog is pretty similar to these German shepherds„ÄÇ iss probably from not training
    it quite enough„ÄÇ This bulldog„ÄÇ my bulldog it's saying that that's something different
    entirely„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And then the poodles are also classifying as two„ÄÇ So you probably need more
    images„ÄÇ but this is just really taking you through the motions for this so that
    you can build this potentially for any types of images that you want„ÄÇ Thank you
    for watching this video„ÄÇ in the next video we're going continue with transfer
    learning and see about„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fea53c1ab8aaa1af63aff2f2daccb4dc_9.png)'
  prefs: []
  type: TYPE_IMG
- en: Han language libraries or neural networks that can be transferred into curs
    for our use this content changes often so subscribe the channel to stay up to
    date on this course and other topics in artificial intelligence„ÄÇ
  prefs: []
  type: TYPE_NORMAL
