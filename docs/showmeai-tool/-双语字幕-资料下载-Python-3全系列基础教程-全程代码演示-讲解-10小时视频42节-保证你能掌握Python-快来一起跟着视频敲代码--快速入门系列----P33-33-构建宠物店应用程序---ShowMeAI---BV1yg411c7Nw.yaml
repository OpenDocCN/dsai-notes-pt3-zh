- en: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P33：33）构建宠物店应用程序 - ShowMeAI - BV1yg411c7Nw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 【双语字幕+资料下载】Python 3全系列基础教程，全程代码演示&讲解！10小时视频42节，保证你能掌握Python！快来一起跟着视频敲代码~＜快速入门系列＞
    - P33：33）构建宠物店应用程序 - ShowMeAI - BV1yg411c7Nw
- en: '![](img/d23883c801c226a4b6d06d5119befda5_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d23883c801c226a4b6d06d5119befda5_0.png)'
- en: Welcome back everyone。 this is Briant。 We're going to take everything that we've
    learned so far and make a pet shop application。 This is going to be like a mini
    inventory system。So let's talk about the design real quick before we dive into
    this thing。![](img/d23883c801c226a4b6d06d5119befda5_2.png)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回来大家，我是布莱恩。我们将把迄今为止学到的所有知识应用到一个宠物店应用程序中。这将像一个迷你库存系统。所以在深入之前，我们先快速谈谈设计。![](img/d23883c801c226a4b6d06d5119befda5_2.png)
- en: First thing that's going to happen is Python' is going to start our script。From
    there。 what we're going to do is we're going to go out to the desk and we're going
    to load。Any existing file。Then we're going to go into a loop and let me find a
    good representation of a loop here。And this loop is simply going to ask them what
    do you want to do？
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要发生的事情是Python将启动我们的脚本。从那里开始，我们将去桌面加载任何现有的文件。然后我们将进入一个循环，让我找一个好的循环示例。这个循环只是会问他们想做什么？
- en: It's going to do something like this， you have a few options that you can choose
    from。Any one of those options is going to go right back into the loop， so let
    me just grab this。 go right up into here。And eventually。We will exit the program。
    at which point it will automatically save the progress。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它将会做一些类似于这样的事情，你可以选择几个选项。任何一个选项都会回到循环中，所以让我抓取这个。直接上到这里。最终，我们将退出程序，此时它会自动保存进度。
- en: The end result is going to look something like this。 Start to load to loop some
    options。 and then we're going to save when we exit。Let's dive in and take a look。![](img/d23883c801c226a4b6d06d5119befda5_4.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将看起来像这样。开始加载循环的一些选项。然后当我们退出时会保存。让我们深入看看。![](img/d23883c801c226a4b6d06d5119befda5_4.png)
- en: Okay， moving right along， we are going to import， I'm just going to plot some
    notes in here so we can kind of see the structure from the image we had in the
    previous little section。 We're going to makes it mans， make a class。 The class
    is going to have some functions。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来我们将导入，我将在这里插入一些注释，这样我们可以看到之前小节中的结构。我们将创建一个类。这个类将有一些函数。
- en: We're going to have our main function。 Then we're going to do some testing。
    But first things first。 we need to import what we're going to use。So we're going
    to use two things。 we're going to import J and OS。path。Jason's going to be used
    to save and load that file。 we want to have a dictionary， we want to be able to
    persist that out to the disk。And then import。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有我们的主函数。然后我们将进行一些测试。但首先，我们需要导入我们将要使用的东西。所以我们将导入两个东西。我们将导入J和OS.path。杰森将用于保存和加载文件。我们希望有一个字典，能够将其持久化到磁盘。然后进行导入。
- en: we're going to use the OS do path， there are more modern ways of doing this。
    but we want to be able to check if the file exists。 so we're going to use OS do
    path because that's kind of like the old school way of doing things。![](img/d23883c801c226a4b6d06d5119befda5_6.png)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用OS路径，虽然有更现代的方式，但我们想检查文件是否存在。所以我们将使用OS路径，因为这有点像老派的做法。![](img/d23883c801c226a4b6d06d5119befda5_6.png)
- en: Once we have those imports in， we're ready to rock and roll。![](img/d23883c801c226a4b6d06d5119befda5_8.png)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成这些导入，就可以开始了。![](img/d23883c801c226a4b6d06d5119befda5_8.png)
- en: Now， inventory systems can get a little bit complex， so what I want to do is
    I want to make a class。 and I want to wrap the functionality in this class so
    if we had multiple inventories。 we could handle it separately。Someet class。Inventory。And
    let's go ahead and make a dictionary。And we're just going to make some functions。
    So we're going to。Do our initialization。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，库存系统可能会变得有些复杂，所以我想创建一个类。我想将功能封装在这个类中，这样如果我们有多个库存，就可以分别处理。某个类。库存。接下来我们创建一个字典。我们将创建一些函数。所以我们将进行初始化。
- en: And for these initially， I'm just going to put pass because we don't really
    want any code in here just yet。 we're going to fill this in as we go。Want to add。And
    we can speed this process up just a little bit here。So we're going to add remove。I
    do want to be able to display what's in the inventory。We also want to be able
    to save， obviously， because we're going to put this out to file。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些初始的内容，我将暂时放入pass，因为我们现在不想在这里添加任何代码。我们将随着进展来填充这些内容。想要添加。我们可以稍微加快这个过程。因此我们将添加remove。我确实想能够显示库存中的内容。显然，我们还想能够保存，因为我们将把它输出到文件中。
- en: And because we can say we also want to load this。Now you may be wondering why
    am I not putting this into a separate file。 I kind of want an all in one solution
    just to show you that we can actually do an all in one solution。Next step， now
    that we have our classes， we're going to start filling in these functions。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 而且因为我们可以说我们也想加载这个。现在你可能会想，为什么我不把它放到一个单独的文件中。我有点想要一个一体化的解决方案，只是想给你展示我们实际上可以做到这一点。下一步，现在我们有了类，我们将开始填充这些函数。
- en: '![](img/d23883c801c226a4b6d06d5119befda5_10.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d23883c801c226a4b6d06d5119befda5_10.png)'
- en: '![](img/d23883c801c226a4b6d06d5119befda5_11.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d23883c801c226a4b6d06d5119befda5_11.png)'
- en: Al right， so far， we have a class。 and this is kind of a high level view of
    this class。 It's got init， add， remove， display， save and load。 We're going to
    fill in and knit and add。 So let's go down to our init。 And honestly， I want to
    keep this just ridiculously simple。 We said in the very beginning， as soon as
    this thing starts up， we want to be able to load。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，到目前为止，我们有了一个类。这是这个类的一个高层次的视图。它包含init、add、remove、display、save和load。我们将填充并编写init和add。让我们下去看看我们的init。老实说，我想保持这部分简单到极点。我们在一开始就说，一旦这个东西启动，我们就想能够加载。
- en: I' say self。😊，That load， and we're just going to put all that functionality
    in that function。Now。 add is going to be a little bit different here。 I'm going
    to get rid of this pass。 and we are going to modify the function itself。We want
    to have a key。And a quantity。The premise being， when we add， we're going to add
    some sort of animal like a cat。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我会说self。😊，加载，我们将把所有功能放入这个函数中。现在，add在这里会稍有不同。我将去掉这个pass，并且我们将修改函数本身。我们想要一个关键字和一个数量。前提是，当我们添加时，我们会添加某种动物，比如猫。
- en: a dog or something and a quantity that we're going to add into the inventory。So
    I'm going to say the Q short version for quantity is going to be zero。Now， if
    you look at。For dictionary， there's absolutely nothing in it。 So we can't just
    go out and grab the key。 We have to actually test to see if it exists first。 So
    it key in self dot pets。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一只狗或者其他什么，还有我们要添加到库存中的数量。所以我会说数量的简写Q将是零。现在，如果你看字典，它里面绝对什么都没有。所以我们不能直接去获取关键字。我们必须先测试它是否存在。所以它的关键字在self
    dot pets中。
- en: Then we're going to go ahead and grab the current value。 like how many we actually
    have in the inventory。Self dot pets。And we want the key。And we're going to update
    our quantity。So we're going to say take that current value and add the quantity
    to it。Now， we have the opposite of that。 It just simply wasn't in the inventory。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将继续获取当前值，比如说我们在库存中实际上有多少。self dot pets。我们想要获取关键字。接着我们会更新我们的数量。也就是说取当前值并加上数量。现在，我们有了相反的情况。它根本不在库存中。
- en: in which case we're just going to say Q equals。Thequ。From here， it becomes pretty
    straightforward。 We're going to say self dot pets。Whatever the key was。And we're
    just going to update that with our updated quantity。From there。I'm going to put。
    And just for the sake of time， I'm going to copy and paste。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将说Q等于。Thequ。从这里开始，相对简单。我们将说self dot pets。无论关键字是什么，我们只需用更新后的数量更新它。从这里开始。我将放入一些内容。为了节省时间，我将复制并粘贴。
- en: Added the quantity and key and the total is now， whatever is actually out in
    our inventory system。 So it's pretty simple， but there's a couple key concepts
    you have to wrap around here。 First。 is we don't want to trust that the key is
    actually in there。 We want to test to make sure it exists。 and we want to have
    some functionality in case it's not there。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了数量和关键字，当前总数就是我们库存系统中实际的数量。所以这相当简单，但这里有几个关键概念需要理解。首先，我们不想相信这个关键字真的在里面。我们需要测试以确保它存在，并且需要一些功能以防它不在那里。
- en: '![](img/d23883c801c226a4b6d06d5119befda5_13.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d23883c801c226a4b6d06d5119befda5_13.png)'
- en: '![](img/d23883c801c226a4b6d06d5119befda5_14.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d23883c801c226a4b6d06d5119befda5_14.png)'
- en: Back at the top of our file， we've done our imports。 we've created the class
    we've filled in and in and add now we're going to do remove and display。So let's
    go down here and remove a display just half pass them。 So the first thing I'm
    going to do is I'm going to go to add and I want to kind of copy this。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件顶部，我们完成了导入。我们创建了类，填充并添加，现在我们将进行删除和显示。因此让我们到这里，删除一个显示，稍微跳过它们。所以我首先要做的是去添加，然后我想复制这个。
- en: That way。We have a very similar， very structured API to add or remove you just
    need a key and a quantity。 we won't have any weird data that we got to figure
    out。So remove is well， the exact opposite here。 but we can actually pull parts
    of this out。 So for example。We can just take this entire structure。Just paste
    it right in here。 So we're going to start off with0。 we're going to say if the
    key exists。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，我们就有一个非常相似、非常结构化的API来添加或删除，只需要一个键和一个数量。我们不会有任何奇怪的数据需要处理。所以删除正好是这里的相反，但我们实际上可以提取出这部分内容。例如，我们可以把整个结构直接复制到这里。所以我们将从0开始，我们会说如果键存在。
- en: then go ahead and get the key。And then the quantity instead of addition is going
    to be subtraction。And then we want some sort of other value here。 So for example。I
    don't really need an else because Q is already set to 0。 And actually。 let me
    put that on the right line。So what we're going to do here is now test to make
    sure that we didn't subtract too much。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后继续获取键。数量将是减法，而不是加法。然后我们想要一些其他的值。例如，我实际上不需要else，因为Q已经设置为0。实际上，让我把它放在正确的行上。我们现在要做的是测试，确保没有减去太多。
- en: Say if Q is less than 0。Then。We want to make sure that Q is equal to 0。 In other
    words。 you don't want a negative balance in your inventory that just simply wouldn't
    make any sense。And then， of course， we are updating the inventory and now。We've
    got some sort of display going out to the end user。We're going to say removed
    quantity key。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设如果Q小于0。那么。我们想确保Q等于0。换句话说，你不希望在库存中出现负余额，这显然是没有任何意义的。然后，当然，我们正在更新库存，现在我们有某种输出给最终用户的显示。我们会说移除的数量键。
- en: the total is now， whatever the total is。Now for our display， this is going to
    be just very。 very simple。Or keya value in。And we want to go into the self dot
    pets。 And if any of this that I've been talking about is just making you scratch
    your head。 I'd highly encourage you to go out and watch the videos where we talked
    about these key subjects here。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总数现在是，无论总数是多少。对于我们的显示，这将非常简单。或键值在。我们希望进入self.dot pets。如果我所谈论的任何内容让你感到困惑，我强烈建议你去观看我们讨论这些关键主题的视频。
- en: For example， we've talked about classes。 we've talked about dictionaries。 we've
    talked about four loopbes and things of that nature。 We've also talked about Jason
    and pretty much everything we're talking about。 We've done in the 32 other videos
    that we've done here so。And let's go ahead and print this out。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们讨论过类。我们讨论过字典。我们讨论过四个循环和类似的事情。我们还讨论过Jason，以及几乎我们在这里谈论的所有内容。这些都在我们制作的32个其他视频中。现在让我们继续打印出来。
- en: I'm going say print。And I want to do a formatted print。And I want to say the
    key。Equals。 and then whatever the value is。Now， what I typically like to do at
    this point before we start getting into I O is actually run this just to make
    sure we don't have any crazy errors。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要说打印。并且我想要进行格式化打印。接下来我要说的是键。等于。然后是任何值。现在，在我们开始进行输入输出之前，我通常会在这一点上先运行一下，以确保没有任何奇怪的错误。
- en: The script's going to do absolutely nothing。 We don't even have a main function。
    We just want to make sure it doesn't have any weird syntax error， anything like
    that。Okay。 in our class， we are at the save part and let's kind of go down here
    all the way to save we're going to handle save and load in separate sections。
    so we're just going to focus on saving。So I'm going to get rid of this pass。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将完全不执行任何操作。我们甚至没有主函数。我们只想确保没有任何奇怪的语法错误，类似的东西。好的，在我们的类中，我们处于保存部分，让我们一直往下到保存，我们将分别处理保存和加载部分。因此我们只专注于保存。所以我要去掉这个pass。
- en: And I want to print out to the user that we're going to do something because。Well。
    because we're working with Python， I'm just going to be brutally honest with you。
    We don't know what sort of end devices this is going to be running on。 It could
    be a high end blistering fast server。 It could be a painfully slow embedded device。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要提醒用户，我们要做一些事情，因为。好吧，因为我们在使用 Python，我会非常诚实地告诉你。我们不知道这将运行在什么样的终端设备上。它可能是一个高端的超快速服务器，也可能是一个极其缓慢的嵌入式设备。
- en: We simply don't know。So I want to tell these are we're going to do something。Saving
    inventory。And I typically do this whenever I'm working with anything I owe related。
    I will tell the user before and after， meaning I'm going to do something and I
    have done it or I had some error or something like that。 So I'll start off with
    a structure like this。Saving and saved。 And then I'll actually work with I O。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根本不知道。所以我想告诉他们，我们要做一些事情，保存库存。当我处理任何 IO 相关的事情时，我通常会在之前和之后告诉用户，意思是我将要做某事，我已完成它，或者我遇到了一些错误。所以我会以这样的结构开始：保存和已保存。然后我会实际处理
    IO。
- en: The reason being。If you were looking at a computer。 the computer's hardware
    drive is probably really fast。 but if you get into like an embedded Linux device
    and the script is running on that。It may be really slow。 Or what if the hard drive
    went to sleep。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是。如果你正在使用电脑，电脑的硬件驱动可能非常快。但如果你使用的是嵌入式 Linux 设备，脚本在上面运行，可能会非常慢。或者，如果硬盘进入休眠状态呢。
- en: I'm sure you've had that before where you go to save a file。 and then you hear
    the hard drive spinning up。We want to make sure the user knows our application
    didn't freeze up。So we're going to say with。Open。And let's just say inventory。
    Txt。Now。 this is where we're going to kind of break our own rules just for the
    sake of time here。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你之前遇到过这种情况，保存文件时，听到硬盘转动的声音。我们希望确保用户知道我们的应用程序没有冻结。所以我们要说，打开，假设是 inventory.txt。现在，为了节省时间，我们要稍微打破自己的规则。
- en: We are talking about。Putting all this in a class so that it can be reused。 The
    problem is now I'm hard coding the file name in there。Not a major deal breaker。
    but if you're going to use this for any sort of production。 you're going to want
    to actually be able to dynamically set that string。All right。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在谈论将所有这些放入一个类中，以便可以重用。问题是我现在在硬编码文件名。这不是个大问题，但如果你打算用于任何生产用途，你确实希望能够动态设置该字符串。好的。
- en: so with open and we're going to open this file in right mode。 plain text as
    F F is shorthand for file we're right here。 Now we want to do a J。That doubt。Now。
    remember， there's dump and dumps。You see the S at the end that' we're going to
    convert it to a string。 We don't want to do that。 We want to actually dump it
    out to a file。 So first things first。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以使用 open，我们将以写模式打开这个文件，普通文本，FF 是文件的缩写。现在我们想做一个 J。记住，dump 和 dumps。你看到末尾的 S，这是我们要将其转换为字符串。我们不想这样。我们希望将内容实际导出到文件中。所以首先。
- en: we have to give it the object in this case， the self pets and then the file
    that we're going to dump it to。And the great thing about the width keyword we've
    covered this before in previous videos is it's going to automatically close that
    file for us。 so we don't have to worry about flushing the contents or closing
    the file or anything like that。 So Jason's just going to take this dictionary，
    convert it into adjacent format。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须传递对象，在这种情况下，是 self.pets，以及我们要导出到的文件。关于 with 关键字，之前的视频中我们已经讨论过，它会自动为我们关闭文件，所以我们不必担心刷新内容或关闭文件。然后
    JSON 将把这个字典转换为 JSON 格式。
- en: dump it out to the file and then with is going to close the file for us。 and
    then we're just going to print out saved that way the end user knows， hey。 we
    have actually done the IO completely and there were no errors。![](img/d23883c801c226a4b6d06d5119befda5_16.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将内容导出到文件中，然后 with 会为我们关闭文件。接着我们只需打印出已保存，这样最终用户就会知道，我们实际上已完成了 IO 操作，并且没有错误。![](img/d23883c801c226a4b6d06d5119befda5_16.png)
- en: '![](img/d23883c801c226a4b6d06d5119befda5_17.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d23883c801c226a4b6d06d5119befda5_17.png)'
- en: We've only got one more。 the load function。 Oops helped if I selected it right。
    So here's our class。 I've tried to indent it to make it a little obvious what
    the functions inside the class are。 We've got one left load。 and of course， it
    will load the file。 We've already done save so we can just kind of borrow this
    little structure here。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只剩下一个了。加载功能。哎呀，帮我选择对了。所以这是我们的类。我试着缩进一下，以便让函数在类内部看起来更明显。我们还有一个加载。它当然会加载文件。我们已经完成了保存，因此我们可以借用这里的小结构。
- en: so let's grab this。😊，And just paste it。And we can say we can spell it， right，
    loading inventory。And then load it。And then with and remember the file name's
    important。 So we have to say with the same file， we're going to go ahead and read
    that as plain text。Now。 we want to do the opposite of a dump。 So this is where。We
    need to slow down。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们抓住这个。😊，然后粘贴它。我们可以说我们可以拼写对，加载库存。然后加载它。请记住，文件名很重要。所以我们必须说使用同一个文件，我们将以纯文本格式读取它。现在。我们想要做的是转储的相反操作。因此在这里我们需要放慢速度。
- en: We've gotten a little ahead of ourselves here， and I'm wondering if you can
    see the problem。And in case you can't。With open file， we're just assuming that
    when we load。 the file exists and we need to be a little bit careful with that
    because that could cause some real problems。 But that's why at the very beginning
    of this。We did an import OS path because we're going to check to make sure the
    file exists。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里有点急于求成，我在想你是否能看到问题。如果你看不到的话。使用打开文件时，我们只是假设在加载时文件是存在的，我们需要对此稍微小心一些，因为这可能会引发一些真正的问题。但这就是我们一开始进行导入
    OS 路径的原因，因为我们要检查文件是否存在。
- en: so let's go back down here。And will say。If not， O， S。Dot path， dot exists。And
    here we want to make sure we have the same file name， so I'm literally just going
    to copy this。And paste it。Then， we want to say。Rs。Skippping。Nothing should load。And
    then let's go ahead and return out of here。We're doing this because when the load
    function is called。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们回到这里。我们会说。如果没有，O，S。点路径，点存在。在这里我们要确保文件名相同，所以我将字面上复制这个。然后粘贴它。接下来，我们想说。跳过加载。然后让我们退出这里。我们这样做是因为当调用加载功能时。
- en: it's going to print out loading inventory。And if we just， you know， return。
    it's going to look like the program's hung because it's going to just say loading
    inventory and stop。So we want to make sure the file。Exists， and if it does not。
    then we're going to say skipping nothing to load that way the user knows there
    just simply isn't a file there。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它会打印出加载库存。如果我们只是返回的话，它看起来像是程序挂起了，因为它会说加载库存并停止。因此我们要确保文件存在，如果不存在。然后我们会说跳过，没有要加载的内容，这样用户就知道那里根本没有文件。
- en: and you could make this a little prettier。And then we would turn out， however，
    if there is a file。 we're going to say with open。Open that file up in Read mode
    as file。 and now we need to do a J load instead of a dump。Al must say self dot
    pets。Equals。Jason dot load。 And remember， there's a loads S。 If it ends in S，
    it's going to do it to a string。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以让这个看起来更好一点。然后我们会转到，如果有文件的话。我们将说用打开。以读取模式打开该文件。现在我们需要进行一个 J 加载，而不是转储。我必须说
    self 点 pets。等于。Jason 点 load。请记住，如果以 S 结尾，则它会将其转换为字符串。
- en: and we don't want that。So we want load and we're just going to give it our file。And
    then last but not least， we're printing out loaded that way， the end user knows，
    hey。 we successfully did our I O to completion， and we didn't have any bad issues。Again，
    I like to run。 Scripp's not going to do anything， but if I have like a major syntax
    error。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想要这种情况。所以我们想加载，我们只需给它我们的文件。最后但同样重要的是，我们要打印出加载的信息，这样最终用户就知道，嘿。我们成功完成了输入输出操作，没有遇到任何问题。再次提醒，我喜欢运行。脚本不会做任何事情，但如果我有一个重大的语法错误。
- en: it'll definitely spit it out and tell me。 And we're good to go。Looking at our
    little flow here。 we've come a long way， we've done the imports， we've done the
    entire class and now we're down at main。 we're going to put a main function in
    here。So I'm going to go all the way to the bottom。And I'm going to say。Main， and
    it's going to put this in here for me automatically。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它肯定会输出并告诉我。我们就可以继续了。看看我们的流程。我们已经走了很长一段路，我们完成了导入，整个类也做完了，现在我们要放入主函数。所以我要一直到底部。然后我会说。主，这会自动为我放入这里。
- en: depending on your IDE， you may have to actually type that out or saying if the
    name is main。 meaning Python is running this file directly， then I want to。Call
    a main function。Now。 a lot of people will want to just use this as if it is some
    sort of function itself。 I don't like doing that。 I like actually making my own
    main function。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的IDE，你可能需要实际输入这个，或者说如果名字是main。这意味着Python直接运行这个文件，那么我想要。调用一个主函数。很多人会想将其当作某种函数使用。我不喜欢这样做。我更喜欢实际创建自己的主函数。
- en: That way I can actually just copy and paste this function and use it in other
    places。 whatever I want to do。So we need to make an instance。Of our inventory，
    Because remember。 a class is a blueprint。 It's not actually the objects。 now we're
    can take that blueprint to tell Python， take the blueprint。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我实际上可以直接复制并粘贴这个函数，在其他地方使用。无论我想做什么。所以我们需要创建一个实例。我们的库存，因为记住，一个类是一个蓝图。它并不是实际的对象。现在我们可以用这个蓝图告诉Python，拿去这个蓝图。
- en: And create an object from it and give us that object in the form of a variable
    named I N V。 short for inventory。Now that we have that， what we can do is create
    a loop。And I know in past videos， I've said Loer， the root of all evil。 and you
    should avoid them unless you know what you're doing， but。If you've been following
    along。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个对象并将其以名为I N V的变量形式提供，I N V是库存的缩写。现在我们有了这个，我们可以创建一个循环。我知道在过去的视频中，我说过循环是万恶之源。应该避免，除非你知道自己在做什么，但。如果你一直在跟着。
- en: we should know what we're doing at this point。So first thing we're going to
    do is prompt the user for some type of action。 So I'm going to say the action
    equals。And we want input。And we're going to tell the user， hey。 tell us what you
    want done， and I've already got this keyed up and ready to go in my notes off
    to the screen here。I should say off the side of the screen。 So we're going to
    say actions you can add， remove， list。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到了这个阶段，我们应该知道自己在做什么。首先，我们要做的就是提示用户进行某种操作。所以我会说操作等于。我们想要输入。然后告诉用户，嘿。告诉我们你想做什么，我已经准备好这些内容，在我笔记中准备就绪。我应该说在屏幕的旁边。所以我们要说你可以添加、移除、列出。
- en: save or exit。 And these are the actions we're going to flesh out here。So first
    things first。 if the action。Is equal to exit。Then let's go ahead and break out
    of this loop。 Notice I'm not returning because I want to actually do something
    at the end of this and let me go back here。And we're going to say I and V， dot
    save。So no matter what actions the user takes。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 保存或退出。这些是我们将在这里具体化的操作。所以首先。如果操作等于退出。那么我们就直接跳出这个循环。注意我没有返回，因为我想在最后做一些事情，让我回到这里。我们要说I和V，点保存。因此无论用户采取什么操作。
- en: once we're done with this loop， the inventory is going to save itself before
    the program exits。I'm going to put it right here。Exit。The way Python treats a
    script is once it has nothing else to do。 it simply exits out of Python itself
    and that's why you see it stopping down here。All right， so。Once we've got this
    in place now we just really flesh out the other actions。So， I'm going to say。If。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成这个循环，库存将在程序退出之前自动保存。我将把它放在这里。退出。Python处理脚本的方式是，一旦没有其他事情可做，它就会直接退出Python本身，这就是你看到它在这里停止的原因。好的，所以。一旦我们把这个放好，现在我们真正要具体化其他操作。所以，我要说。如果。
- en: and we can actually just copy this， make life a little simpler， honest。Big fan
    of copy and paste here。 I must say if the action is list。Then I want I N B that
    display。If the action is。Save。We can go ahead and say I And B， at stave。And you
    could do load and all that other stuff， you notice this how I didn't put load
    in there because the inventory is going to load automatically。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上可以复制这个，简化生活，老实说。我是复制和粘贴的忠实粉丝。如果操作是列出。那么我想要I N B那显示。如果操作是保存。我们可以直接说I和B，点保存。你可以做加载和其他所有操作，你注意到我没有把加载放进去，因为库存将会自动加载。
- en: In the constructor。But you could， you know， if you really want to go crazy。
    you could put that action in there， Defite put it in there if you wanted to。 Now。
    I'm going to put in right here。A little bit of logic where we're going to say
    if the action is add。Or。The action。Is remove。Then we're going to take pretty much
    the same。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中。但如果你真的想疯狂一下，你可以把那个操作放进去，Defite放进去如果你想要。现在。我将在这里放入一些逻辑，我们要说如果操作是添加。或者。操作是移除。那么我们将大致相同的内容。
- en: Type of functionality here because it doesn't matter if we're adding or removing。
    We have the same API。 and let's kind of scroll up here。 So remove， we want key
    and quantity， add。 we want key and quantity。 So it doesn't matter which one we're
    doing here。So in here。 I'm going to say the key equals input。Mature。An animal。And
    for the quantity。Input。Once they enter。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的功能类型没有关系，无论是添加还是移除。我们有相同的API。让我们稍微向上滚动一下。所以移除时，我们需要键和数量，添加时也需要键和数量。所以无论我们在做什么，这里都没关系。在这里，我会说键等于输入。成熟。一个动物。而数量则是输入。一旦他们输入。
- en: 关了y。Now that we have those two， we need to figure out which one was actually
    called。 So I'm going to say action。Equals。Addd。Then do something。 And if you already
    know a bit of Python。 you probably know there's better ways of doing this， But
    we're just using what we've learned so far。 So I've got to kind of， I don't want
    to say dumb it down。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭了y。现在我们有了这两个，我们需要弄清楚实际调用的是哪个。所以我会说操作等于添加。然后做点什么。如果你已经了解一点Python，你可能知道有更好的方法来做这个，但我们只是使用到目前为止学到的东西。所以我得稍微简单点，不想说降低难度。
- en: but I've got to make it a little bit rudimentary here。So， and this is barrier。
    we're going to just branch off in our logic and say if it's add do one thing。
    if it's removed do the other。There we go。up。Proably help if I actually called
    remove。 Otherwise。 we're just going to add it twice。 This is the beautiful part
    about having the same type of API。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不过我得把它做得简单一点。所以，这就是障碍。我们将分支逻辑，假设是添加就做一件事，假设是移除就做另一件事。好了。最好实际调用移除。否则，我们就会添加两次。这就是拥有相同类型API的美妙之处。
- en: if you will， I you can now start wrapping functionality in here and make it
    super streamlined。 super easy to follow。😊，So following our logic， and let me just
    grab some screen real estate here。When we go into the main， we're going to create
    an instance of the inventory and then we're going to start a loop。After the loops
    completed， no matter what the user's done， we're going to save that inventory。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你现在可以开始将功能包装在这里，使其超级简化，超级容易跟随。😊所以遵循我们的逻辑，让我在这里抓取一些屏幕空间。当我们进入主程序时，我们将创建一个库存实例，然后开始一个循环。循环完成后，无论用户做了什么，我们都会保存这个库存。
- en: In the loop， we're going to continuously ask the user。 what do you want to do
    and then take action depending on what they entered。![](img/d23883c801c226a4b6d06d5119befda5_19.png)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中，我们将不断询问用户：你想做什么，然后根据他们输入的内容采取行动。![](img/d23883c801c226a4b6d06d5119befda5_19.png)
- en: '![](img/d23883c801c226a4b6d06d5119befda5_20.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d23883c801c226a4b6d06d5119befda5_20.png)'
- en: The only thing left to do is fasten your seatbelts and lets test this out。If
    you have， if underscore。 underscore name， underscore， underscore equals main。And
    you've got your main function and you don't have any syntax errors， you should
    be good to go。 let's go ahead and grab。Some area here so we can see the program
    in action， we're going to run this。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的事情就是系好安全带，测试一下。如果你有`__name__`等于`__main__`，并且你有主函数，没有语法错误，你应该就可以开始了。让我们抓取一些区域，这样我们就可以看到程序运行的情况，我们将运行这个。
- en: And it says loading inventory， skipping nothing to load because we don't have
    adjacent file here。 And it's going to say actions。 add， remove list， save and
    exit。 So let's go ahead and add。And I want to enter a cat。And I enter a quantity
    of six cats。 because you have to have six cats in life。 it's just， it's mandatory。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它说正在加载库存，跳过没有可加载的内容，因为我们这里没有相邻的文件。它将显示操作：添加、移除、列表、保存和退出。所以让我们添加。我想输入一只猫。我输入数量为六只猫。因为生活中必须有六只猫，这是强制性的。
- en: And so let's say added 6 cat total equals 6。 So let's add。At。And I want to add
    three cats here。 So we've added three cats in O0， total 63。 We have a bobo in
    our program。 Let's go ahead and let's kill this terminal。Let's figure out what
    we did wrong here。嗯。Notice anything funky about the output。 It sit 63 instead
    of 9。 We need to convert this now。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们添加了6只猫，总数是6。所以让我们添加。我想在这里添加三只猫。所以我们添加了三只猫，现在总数是63。我们的程序中有一个bug。让我们结束这个终端。找出我们做错了什么。嗯。注意到输出有什么异常吗？它显示63而不是9。我们现在需要转换这个。
- en: Do an integer。Remember， we talked briefly about casting。 where think of casting
    like a wizard with a magic wand he's going to cast a spell and convert it from
    one thing to another。Really， what we were doing under the hood is we were saying
    quantity and then action add go up here。And it's saying V plus QTY， this is the
    blessing and curse of Python and other languages like this where you don't have
    a type。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 进行整数操作。记得我们简要讨论过类型转换。可以把类型转换想象成一个拿着魔法杖的巫师，他将施展法术，把一个东西转换成另一个。实际上，我们在幕后所做的是在说数量，然后动作添加到这里。它在说
    V 加上 QTY，这就是 Python 及类似语言的祝福与诅咒，因为你没有类型。
- en: It knows that they're both strings， so it just adds them together as a string。So，
    a string。WhatSting。We'll look like this， which is exactly what we just saw。O。Enough
    of that。 let's go ahead and rerun this。 Now， because we killed our console， we
    still don't have a JSson file。Which is exactly what we want at this point， so
    let's run this fresh。All right， let's try this again。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它知道它们都是字符串，因此它只是将它们作为字符串相加。因此，一个字符串。它看起来像这样，正是我们刚刚看到的。够了。让我们重新运行这个。现在，由于我们关闭了控制台，我们仍然没有
    JSson 文件。这正是我们此时想要的，所以让我们重新运行这个。好的，让我们再试一次。
- en: add。At。6， because you have to have six cats in life。 Sa it with me。 We're going
    to add。At。And we want to add3。 Now we have a total of 9。 So our logic is now working
    as expected。 Let's go ahead and let's。Add。A dog。I't say we want 99 dogs。 And then
    we realize that's a lot of dogs。 We really can't have 99 dogs and 9 cats。 So let's
    just。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 添加。在6，因为你得有六只猫。和我一起说。我们要添加。在。我们想要添加3。现在我们总共有9。所以我们的逻辑现在按预期工作。让我们继续添加。一只狗。我说我们想要99只狗。然后我们意识到那太多了。我们真的不能有99只狗和9只猫。所以我们就。
- en: Take that down a notch。 let's remove。Dogs。And man， you know， I like dogs just
    as much as I like cats。 So this is a very difficult time for me。 Let's go ahead
    and。Remove 98 dogs。 I'm very sorry， dogs。 Today was not your day。We've removed
    98 dogs。 We now have a total of one。 Now， we could type save。 but I'm just going
    to exit。Saving inventory saved。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 放慢一点。让我们移除。狗。伙计，你知道，我喜欢狗和喜欢猫一样多。这对我来说是个很艰难的时刻。让我们继续。移除98只狗。我非常抱歉，狗们。今天不是你们的日子。我们已经移除了98只狗。现在我们总共有一只。现在，我们可以输入保存。但我将直接退出。保存的库存已保存。
- en: so it automatically saved for us and it put this inventory TxT and if we go
    out here。 we have nine cats and one dogs and everything works as expected。I'm
    going to clear our console。And rerun this and something magical happens。Loading
    inventory low did。 Let's go ahead and call list。We have。Nine cats and one dog，
    so it has now loaded that Json Voil， loaded it up into the dictionary。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它为我们自动保存了，并且生成了这个库存 TxT。如果我们出去看一下，我们有九只猫和一只狗，一切都如预期般工作。我将清除我们的控制台。然后重新运行，这里会发生一些神奇的事情。加载库存低。让我们调用列表。我们有九只猫和一只狗，所以它现在已经加载了那个
    Json Voil，并将其装载到字典中。
- en: And everything's working as expected。 I'm going to go ahead and say， just enter，
    enter enter。 And you can see because it doesn't have valid input， it just goes
    back into the loops。 I'm going to enter just garbage。 Does't matter what we do。I'm
    going to go ahead and add。Fish。 and I want 45 fish。I'm going to go ahead and intentionally
    save this。Saving inventory saved。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都按预期工作。我将继续说，只需按下，按下，按下。你可以看到，由于没有有效的输入，它只是回到了循环中。我将输入一些垃圾数据。无论我们做什么都没关系。我将继续添加。鱼。我想要45条鱼。我将故意保存这个。保存的库存已保存。
- en: And I'm going to go ahead and display。Basically， you can do this all day long，
    but oh oh， display。 I don't want display， I want to list。You can see how we have
    nine cats， one dog and 45 fish。 we could do this all day， but really what I'm
    getting at here is now we have some programming logic and everything's working
    as expected。So I' going to go ahead and exit out。We'm going to save our inventory。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我将继续显示。基本上，你可以一直这样做，但哦哦，显示。我不想显示，我想要列表。你可以看到我们有九只猫、一只狗和45条鱼。我们可以这样做整天，但我真正想表达的是，现在我们有了一些编程逻辑，一切都按预期工作。所以我将退出。我们将保存我们的库存。
- en: we can go ahead and peek at it and sure enough everything's exactly the way
    it was when we finished the application。All right， major takeaways from this video。
    This is kind of the culmination of everything that we've learned so far。 We've
    worked with imports， we've learned classes， we've learned functions。 we've learned
    flow control。 We've learned about Ma。 We've done some testing。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以去看看，果然一切都和我们完成应用时完全一样。好吧，这段视频的主要收获是。这是我们迄今为止所学内容的总结。我们学习了导入、类、函数、控制流程，了解了Ma，并进行了测试。
- en: We've learned about Jason， the O path and kind of breaking this down here。😊，Always，
    always。 always initialize your variables， even if it's just empty because you
    don't want to have something not defined。Constructors are your friends because
    you can set up some sort of default action。And when in doubt。 always check your
    data types。Make sure you're giving the user some sort of visual feedback。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了Jason、O路径，以及在这里进行的拆解。😊，总是，永远，永远初始化你的变量，即使只是空的，因为你不想让某个变量未定义。构造函数是你的朋友，因为你可以设置某种默认行为。在不确定的时候，永远检查你的数据类型。确保你给用户提供某种视觉反馈。
- en: And there are times where life is not that simple and you'll need to check to
    make sure whether a file exists or something like that。 we've also covered things
    like the with keyword and how to read and write files in plain text and I think
    we did cover binary as well。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 生活有时并不那么简单，你需要检查文件是否存在或者类似的东西。我们还讨论了像with关键字以及如何以纯文本读取和写入文件，我想我们也涵盖了二进制文件。
- en: But one major takeaway， some minor tweaks to this is do not hard code the file
    name like I did。 I kind of just did that to save some time， But you may want to
    actually ask。 like if you wanted to really tweak this。Make like another function
    and put it in the constructor and basically say。 if we don't have a file。What
    file do you want to work with and just let the user enter it something like that？
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但一个主要的收获是，不要像我那样将文件名硬编码。我这样做只是为了节省时间，但你可能真的想询问一下。如果你想进行一些调整，可以创建另一个函数并将其放入构造函数中，基本上说如果我们没有文件，你想使用哪个文件，让用户输入一些内容？
- en: So I hope you found this educational entertainment drop a comment below and
    let me know what you think。![](img/d23883c801c226a4b6d06d5119befda5_22.png)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这次内容既有教育意义又有娱乐性，请在下面留言告诉我你的想法。![](img/d23883c801c226a4b6d06d5119befda5_22.png)
