- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëT81-558 ÔΩú Ê∑±Â∫¶Á•ûÁªèÁΩëÁªúÂ∫îÁî®-ÂÖ®Ê°à‰æãÂÆûÊìçÁ≥ªÂàó(2021ÊúÄÊñ∞¬∑ÂÆåÊï¥Áâà) - P6ÔºöL1.5- Python ÂáΩÊï∞„ÄÅLambda
    Âíå MapÔºèReduce - ShowMeAI - BV15f4y1w7b8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HiÔºå this is Jeff HetonÔºå welcome to applications of Deep neural networks with
    Washington University in this video we're going to look at how to use functions
    and even Lambdas„ÄÇ which allows you to pass a function to a function„ÄÇThis is a
    very powerful feature of the Python programming language that allows us to do
    very interesting things with our data processing„ÄÇ particularly in the next module
    when we start working with pandas We'll see how to use things like map„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: reduce filter and these basic operations that you do on collections making use
    of Lambda functions that you can pass in for the latest on my AI course and projects„ÄÇ
    click subscribe and the bell next to it to be notified of every new video Funs
    are very common in many different programming languages they allow you to take
    code„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fd7f642d4ca06b18f409cb51194951e_1.png)'
  prefs: []
  type: TYPE_IMG
- en: And package it up as a function and not have to just duplicate it all over the
    place in your program source code„ÄÇHere I am creating a function called say helloÔºå
    this is how you define them in Python deÔºå say hello„ÄÇYou don't need anything in
    the function definition to say if you're going to return something or not that„ÄÇPython
    knows that it's a function by the fact that you do return something or that it's
    a procedure by the fact that you do not return something„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and a procedure is commonly referred to as a function that doesn't return something„ÄÇThis
    is a procedure so it does not return anythingÔºå it takes a couple of valuesÔºå argumentsÔºå
    speaker„ÄÇ person to greet and the greeting Now notice the equal hello up here„ÄÇ
    that means that it has a default value for greeting so if you don't give it a
    greeting„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: then it's just going to default that to hello„ÄÇAnd we can run this„ÄÇIt calls it
    three times„ÄÇ so the first time it calls it with a speaker and a person to greet„ÄÇSecond
    time it calls it with a speaker and a person to greet and it changes the greeting
    so that it's goodbye„ÄÇYou can also use named arguments and this is very useful
    if you have a lot of arguments so that it doesn't get confusing„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: you can say okayÔºå the speaker is JeffÔºå the person agreed is John and Greening
    and you can mix that order up„ÄÇ it does not particularly matter„ÄÇAnd if we run this„ÄÇYou
    can see it says hello JohnÔºå this is Jeff„ÄÇ goodbye JohnÔºå this is Jeff and same
    thing for the last one„ÄÇNow function„ÄÇ a true function that returns somethingÔºå here
    you'll see that I basically pass in a string„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And what this does is it strips offÔºå so Str removes white space from the beginning
    and the end of the string„ÄÇA string is basically an array„ÄÇ so string 0 is going
    to be the first character of the string„ÄÇ I convert that to uppercase„ÄÇ and then
    I sayÔºå heyÔºå I want the rest of the string from one to the end because I don't
    say anything if I did one to2„ÄÇ it would„ÄÇIt would get just a portion of the stringÔºå
    so if we do that„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: it defines the function and you can now call it quite easily„ÄÇ I pass in hello
    with this white space and it gives me back hello„ÄÇWith the H capitalized„ÄÇPython's
    map function is very usefulÔºå this comes from functional programming map„ÄÇMap produce
    of Hadoop fame„ÄÇ Now this is not dealing with big data or anything like that„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: This is simply the map function„ÄÇ A map takes a list of values„ÄÇAnd applies a
    function to each of them„ÄÇSo here I'm going to run it„ÄÇ the list just converts the
    output from map into a list so that it can be displayed„ÄÇAnd we give it the process
    stringÔºå that's the function that we when applied across everything„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Across this list„ÄÇSo it is going to give me a list back„ÄÇ a map always returns
    a list and it is all of the values that came back from whatever function that
    you had called it against the map„ÄÇIs very similar to the comprehension that we
    had in Python„ÄÇ so here we are going to look at this as a comprehension doing basically
    the same thing„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So here we're calling processing string for X and L Now a comprehension is a
    Python specific sort of thing whereas a map is common in a lot of programming
    languages„ÄÇI tend to use comprehensionsÔºå but others will use maps just because
    they can write their code so that it can be understood by more than just the Python
    programmers„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Because this what this comprehension here is doing is not necessarily clear
    unless you've worked with Python„ÄÇFilter is another functional„ÄÇA sort of operator
    that you that you can deal with„ÄÇ a filter takes a list and filters it down to
    potentially a smaller list„ÄÇ could be the same size list as what came inÔºå but this
    is defining a function that says is it greater than fiveÔºü
  prefs: []
  type: TYPE_NORMAL
- en: And then we're taking this list where some of the values are not greater than
    five and we„ÄÇProcess that listÔºå so only 10 and 20 were„ÄÇGreater than five„ÄÇ The rest
    all got filtered out„ÄÇ so filter can be a very handy way to„ÄÇBasicallyÔºå apply a
    function to check to see if items should be included in the list or not„ÄÇLambda
    is very handyÔºå it's a type of functionÔºå it's an anonymous function„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Usually lambmbdas are just one lineÔºå but they can certainly be longer„ÄÇA lambda
    basically makes a functionÔºå a expression of sorts that you can assign right into
    variables„ÄÇ so here I am going to run this instead of writing this big long function
    it's not that long as two lines but still„ÄÇAs we we write it simply as a lambmbda
    so that Lambda replaces the greater than five function„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: it's namelessÔºå it has no nameÔºå it is literally just passed right into the filter
    function„ÄÇSo if you're going to write very short functions to be passed into things
    like maps and reduces and filters„ÄÇThis can be a very good way to write those and
    then reduce„ÄÇ so these other these other things like filters and maps„ÄÇ you had
    a list in a list out„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: This is a list in a single value out„ÄÇ So it is reducing the list into a single
    value„ÄÇ This is showing how to do a simple summation„ÄÇüòäÔºåSo this is the way the reduce
    works„ÄÇYou have two values in the lambmbdaÔºå the first one„ÄÇIs the accumulator that
    is coming through„ÄÇ And then why is the value that you're adding to that accumulator„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fd7f642d4ca06b18f409cb51194951e_3.png)'
  prefs: []
  type: TYPE_IMG
- en: Thank you for watching this module on the Python programming language in the
    next module„ÄÇ which is a set of partsÔºå we will see how to start to use the Pandas
    library that comes with Python that allows you to prepare data for tabular neural
    networks„ÄÇThis content changes oftenÔºå so subscribe to the channel to stay up to
    date on this course and other topics in artificial intelligence„ÄÇ
  prefs: []
  type: TYPE_NORMAL
