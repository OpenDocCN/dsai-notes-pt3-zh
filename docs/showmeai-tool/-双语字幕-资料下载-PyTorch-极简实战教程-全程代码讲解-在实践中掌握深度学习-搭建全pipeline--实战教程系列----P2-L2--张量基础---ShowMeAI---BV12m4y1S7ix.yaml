- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëPyTorch ÊûÅÁÆÄÂÆûÊàòÊïôÁ®ãÔºÅÂÖ®Á®ã‰ª£Á†ÅËÆ≤Ëß£ÔºåÂú®ÂÆûË∑µ‰∏≠ÊéåÊè°Ê∑±Â∫¶Â≠¶‰π†&Êê≠Âª∫ÂÖ®pipelineÔºÅÔºúÂÆûÊàòÊïôÁ®ãÁ≥ªÂàóÔºû - P2ÔºöL2- Âº†ÈáèÂü∫Á°Ä
    - ShowMeAI - BV12m4y1S7ix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HiÔºå everybody„ÄÇ Welcome to your new Pytoch tutorial„ÄÇ In this video„ÄÇ we are going
    to learn how to work with Tenzoas So how we can create Tenzoos and some basic
    operations that we need„ÄÇ We will also learn how to convert from Ny arrays to Pytoch
    Tzoos and vice versa„ÄÇ So let's start„ÄÇüòä„ÄÇSo in PytochÔºå everything is based on Tenzo
    operations from NaiÔºå you probably know arrays and vectors„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And now in PytochÔºå everything is a tenzoor„ÄÇ So atenor can have different dimensions„ÄÇ
    so it can be 1 DÔºå2 D or even 3 D or have more dimensions„ÄÇSo let's create an empty
    Tenzoa„ÄÇ So first of allÔºå we import torchÔºå of course„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: And then we say x equals torch dot empty„ÄÇAnd then„ÄÇWe have to give it a size„ÄÇ
    SoÔºå for example„ÄÇ if we just say oneÔºå then this is like a scala value„ÄÇ So let's
    print our tenzzo„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_3.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_4.png)'
  prefs: []
  type: TYPE_IMG
- en: So this will print an empty tensor„ÄÇ So the value is not initialized yet„ÄÇAnd
    now we can change the size„ÄÇ SoÔºå for exampleÔºå if we say3 here„ÄÇ then this is like
    a 1 D vector with three elements„ÄÇ So now if you run this„ÄÇ we see three items in
    our tenzon„ÄÇ And now we can also make a 2D„ÄÇ SoÔºå for example„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: let's say the size is 2 by 3„ÄÇ So this is like a 2D matrix„ÄÇ So now we'll run
    this„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_6.png)
  prefs: []
  type: TYPE_NORMAL
- en: AndÔºå of courseÔºå we can put even more dimensions in it„ÄÇ So now it would be 3D„ÄÇ
    And nowÔºå for example„ÄÇ now it would be 40Ôºå but now I don't print it anymore more
    because it's hard to„ÄÇ to see the four dimensions„ÄÇ But yeahÔºå this is how we can
    create an empty Tenzo„ÄÇ And we can also„ÄÇ for exampleÔºå create a tenzo with random
    values by saying torch dot ran and then give it the size„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So let's say two by two„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_8.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_9.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_10.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_11.png)'
  prefs: []
  type: TYPE_IMG
- en: And let's print our tenzorÔºå again„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_13.png)
  prefs: []
  type: TYPE_NORMAL
- en: We can also the same like in NumpyÔºå we can say torch dot0s„ÄÇ So this will put
    all„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_15.png)
  prefs: []
  type: TYPE_NORMAL
- en: 0eros in it„ÄÇ Or we can say torch dot once„ÄÇ So this will put once in all the
    items„ÄÇThen we can also give it a specific data type„ÄÇ So first of all„ÄÇ we can have
    a look at the data type by saying x dot D type„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_17.png)
  prefs: []
  type: TYPE_NORMAL
- en: So if we run thisÔºå then we see by defaultÔºå it's a float 32„ÄÇ but we can also
    give it the D type parameter„ÄÇ And here we can sayÔºå for example„ÄÇ torch dot into
    now it's all integersÔºå or we can say torch dot„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_19.png)
  prefs: []
  type: TYPE_NORMAL
- en: Doub„ÄÇNowÔºå it is doubles„ÄÇOr we can also sayÔºå for exampleÔºå float 16 chest„ÄÇÂóØ„ÄÇ‰∏Ä„ÄÇAnd
    now„ÄÇ if you want to have a look at the sizeÔºå we can do this by saying x dot size„ÄÇ
    And this is a function„ÄÇ So we have to use parentheses„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_21.png)
  prefs: []
  type: TYPE_NORMAL
- en: So this will print the size of it„ÄÇAnd we can also construct a tenor from data„ÄÇ
    SoÔºå for example„ÄÇ from a Python list„ÄÇ So for exampleÔºå here we can say x equals
    torch dot tenor„ÄÇ and then here we put a list with some elements„ÄÇ So let's say
    2„ÄÇ50„ÄÇ1 and then print our tenor„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_23.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_24.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_25.png)'
  prefs: []
  type: TYPE_IMG
- en: So this is also how we can create a tenor„ÄÇ And now let's talk about some basic
    operations that we can do„ÄÇ So let's create two Tzoos with random values of size
    2 by 2„ÄÇ So x and y equals torch dot brand2 by 2„ÄÇ So let's print X„ÄÇ and let's print
    Y„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_27.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_28.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_29.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_30.png)'
  prefs: []
  type: TYPE_IMG
- en: And„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_32.png)
  prefs: []
  type: TYPE_NORMAL
- en: YeahÔºå so now we can do simple additionÔºå for exampleÔºå by saying set equals x
    plus y„ÄÇ So„ÄÇ and now let's print our C„ÄÇ So this will do element wise additions„ÄÇ
    So it will add up each of the entries„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_34.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_35.png)'
  prefs: []
  type: TYPE_IMG
- en: And we could also use„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_37.png)
  prefs: []
  type: TYPE_NORMAL
- en: Set equals torch dot atÔºå and then x and Y„ÄÇ So this would do the same thing„ÄÇÂóØ„ÄÇNow„ÄÇ
    we could also do an in place addition„ÄÇ SoÔºå for exampleÔºå if we say„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_39.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_40.png)'
  prefs: []
  type: TYPE_IMG
- en: W dotÔºå and then add underscore„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_42.png)
  prefs: []
  type: TYPE_NORMAL
- en: X and then print Y„ÄÇ So this will modify our y and add all of the elements of
    x to our y„ÄÇ And by the wayÔºå in pi toÔºå every function that has a trailing underscore
    will do an in place operation„ÄÇ So this will modify the variable that it is applied
    on„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_44.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_45.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_46.png)'
  prefs: []
  type: TYPE_IMG
- en: SoÔºå yeahÔºå so„ÄÇNext to additionÔºå of courseÔºå we could also use subtraction so we
    can say C equals x minus y„ÄÇ or this would be the same as C equals torch dot s„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_48.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_49.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_50.png)'
  prefs: []
  type: TYPE_IMG
- en: X and y„ÄÇNowÔºå if you print CÔºå then we can see the element by subion„ÄÇ Then we
    can also do a multiplication of each element„ÄÇ So this would be torch dot mule„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_52.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_53.png)'
  prefs: []
  type: TYPE_IMG
- en: And againÔºå we can do everything in place by saying y dot mu underscore x„ÄÇ So
    this would modify our y„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_55.png)
  prefs: []
  type: TYPE_NORMAL
- en: And then we can also do element wise tuition„ÄÇ So this would be torch dot di„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_57.png)
  prefs: []
  type: TYPE_NORMAL
- en: And yeahÔºå so this is some basic operations that we can do with tenzoors„ÄÇ And
    then we can also do slicing operations like you are used to from Numpy arrays„ÄÇ
    So let's say we have a tenzor of size„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_59.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_60.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_61.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's say5 by 3„ÄÇ and let's print this first„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_63.png)
  prefs: []
  type: TYPE_NORMAL
- en: And nowÔºå print x„ÄÇAnd nowÔºå for exampleÔºå we can simplyÔºå or we can get all rowsÔºå
    but only one column„ÄÇ So let's use slicing„ÄÇ So we here use a„ÄÇCon for all the rowsÔºå
    but only„ÄÇThe column 0Ôºå so„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_65.png)
  prefs: []
  type: TYPE_NORMAL
- en: Let's print the whole tenzor and only this„ÄÇ So here we see we have only the
    first column„ÄÇ but all the rows„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_67.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_68.png)'
  prefs: []
  type: TYPE_IMG
- en: Or we can just sayÔºå for exampleÔºå let's use the row number oneÔºå but all columns„ÄÇSoÔºå
    this would print„ÄÇThe second rowÔºå and all the columns„ÄÇThen we can also just get
    one element„ÄÇ So the element at position 1Ôºå1„ÄÇ So this would be this value„ÄÇ And
    by the wayÔºå right now„ÄÇ it prints the tenor„ÄÇ And if we have a tenor with only one
    element„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: we can also say we can call the dot item method„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_70.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_71.png)'
  prefs: []
  type: TYPE_IMG
- en: So this will get the actual valueÔºå but be careful„ÄÇ You can only use this if
    you have only one element in your tenor„ÄÇSo this will get the actual value„ÄÇAnd„ÄÇYeahÔºå
    now let's talk about reshaping a tenzoor„ÄÇ So let's say we have a tenzoor of size„ÄÇ
    Let's say4 by 4Ôºå and print our tenzor„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_73.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_74.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_75.png)'
  prefs: []
  type: TYPE_IMG
- en: ÂóØ„ÄÇAnd nowÔºå if we want to reshape itÔºå then we can do this by saying or by calling
    the view method„ÄÇ So we say y equals x dot view and then give it a size„ÄÇ So let's
    say we only want one dimension now„ÄÇ So let's print Y„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_77.png)
  prefs: []
  type: TYPE_NORMAL
- en: So now it's only a one defect vector„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_79.png)
  prefs: []
  type: TYPE_NORMAL
- en: And of courseÔºå the number of elements must still be the same„ÄÇ So here we have
    4 by 4„ÄÇ So in total„ÄÇ it's also 16 values and for exampleÔºå if we don't want to
    put the dimension or the value in one dimension and we can simply say-1 and then
    specify the other dimension and Py to will automatically determine the right size
    for it„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So now it must be a 2 by 8„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_81.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_82.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_83.png)'
  prefs: []
  type: TYPE_IMG
- en: Tzoa„ÄÇ so we can also print the size again to have a look at the size„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_85.png)
  prefs: []
  type: TYPE_NORMAL
- en: So this is size 2 by 8„ÄÇ So it's correctly determined the size„ÄÇ If we put a-1
    here„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_87.png)
  prefs: []
  type: TYPE_NORMAL
- en: So yeahÔºå this is how we can resize tenss„ÄÇ And now let's talk about converting
    from Nmpy to a torch tensor and vice versa„ÄÇ So this is very easy„ÄÇ So first of
    allÔºå let's import Ny again or import Ny as N P„ÄÇ And I think I have to„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_89.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_90.png)'
  prefs: []
  type: TYPE_IMG
- en: OhÔºå noÔºå it's already installed here„ÄÇ So let's create a Tzo first„ÄÇ So a equals
    torch dot„ÄÇ And let's create a Tnza with one of size 5„ÄÇ So let's print our Tzo„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_92.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_93.png)'
  prefs: []
  type: TYPE_IMG
- en: And nowÔºå if we want to have a numpy arrayÔºå we can simply say B equals a dot
    nuumpy and then print„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_95.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_96.png)'
  prefs: []
  type: TYPE_IMG
- en: B„ÄÇSo now we have a nuy array„ÄÇ So if we print the type of be„ÄÇÂóØ„ÄÇAnd then this
    will see„ÄÇ and this will print that we have a nuy and DNA„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_98.png)
  prefs: []
  type: TYPE_NORMAL
- en: So yeahÔºå this is how we can create from a tensor to a numpy array„ÄÇ But now we
    have to be careful„ÄÇ because if the tensor is on the CPU and not the GP„ÄÇ Then both
    objects will share the same memory location„ÄÇ So this means that if we change one„ÄÇ
    we will also change the other„ÄÇ So for exampleÔºå if we print or if we modify B or
    a in place by saying a dot at underscore„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: remember all the underscore functions will modify our variable in place and
    at one„ÄÇ So if we add one to each element and allow firstÔºå let's have a look at
    our a tenor„ÄÇ And now let's also have a look at our B numpy array„ÄÇ then we see
    that it also„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_100.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_101.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_102.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_103.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_104.png)'
  prefs: []
  type: TYPE_IMG
- en: Added plus one to each of the elements hereÔºå because they both point to the
    same memory location„ÄÇ So be careful here„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_106.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_107.png)'
  prefs: []
  type: TYPE_IMG
- en: And yeahÔºå if you do want to do it the other way around„ÄÇ So if you have a„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_109.png)
  prefs: []
  type: TYPE_NORMAL
- en: AnNumpy array in the beginning„ÄÇ So let's say a equals nuy one of size 5Ôºå and
    then print a„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_111.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_112.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_113.png)'
  prefs: []
  type: TYPE_IMG
- en: And now you want to have a torch tenor from a numpy array„ÄÇ And you can say B
    equals torch and then from underscore nuumpy and then put the numpy array„ÄÇ So
    now we have a tenor„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_115.png)
  prefs: []
  type: TYPE_NORMAL
- en: And this willÔºå yeahÔºå by defaultÔºå this will put in the data type float 64„ÄÇ Of
    course„ÄÇ you could also specify the data type here if you want a different data
    type„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_117.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_118.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_119.png)'
  prefs: []
  type: TYPE_IMG
- en: And now againÔºå we have to be careful if we modify one„ÄÇ So if we modifyÔºå for
    example„ÄÇ the nuy array by incrementing each elementÔºå so„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_121.png)
  prefs: []
  type: TYPE_NORMAL
- en: NowÔºå print our nuy array„ÄÇ So we see that it incremented each value„ÄÇ And if we
    print B„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_123.png)
  prefs: []
  type: TYPE_NORMAL
- en: Then we see that our tens are got modifiedÔºå too„ÄÇ So againÔºå be careful here„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_125.png)
  prefs: []
  type: TYPE_NORMAL
- en: YeahÔºå but this happens only if your Tensor is on the GPU and this is one thing
    that we haven't talked about yet because you can also do the operations on the
    GPU„ÄÇ but only if this is available„ÄÇ So if you have also installed the Kuda toolkit„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_127.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_128.png)'
  prefs: []
  type: TYPE_IMG
- en: And you can check that by saying„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_130.png)
  prefs: []
  type: TYPE_NORMAL
- en: If tor dot coa dot is„ÄÇAvailable„ÄÇAnd so in my caseÔºå on the MacÔºå it will„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_132.png)
  prefs: []
  type: TYPE_NORMAL
- en: And this will return false„ÄÇ but for exampleÔºå if you are on Windows and you have
    Kuda available„ÄÇ then you can specify your kuda device by saying device equals
    torch„ÄÇDot„ÄÇDevicise and then say„ÄÇ Kuda here„ÄÇ And then if you want to create a tensor
    on the GP UÔºå you can do this by saying x equals„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_134.png)'
  prefs: []
  type: TYPE_IMG
- en: Torch dot once„ÄÇAnd thenÔºå for exampleÔºå give it the size and then say device equals
    device„ÄÇSo„ÄÇ this will create a„ÄÇTenor and put it on the GP„ÄÇOr you can first create
    it„ÄÇ So simply by saying„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_136.png)
  prefs: []
  type: TYPE_NORMAL
- en: Y equals torch dot1 of size 5„ÄÇ And then you move it to your device to your GPu
    by saying y equals Y dot2„ÄÇ and then deviceÔºå so this will move it to the device„ÄÇ
    and now if you do an operationÔºå for example„ÄÇ C equals x plus Y„ÄÇ then this will
    be performed on the GPU and might be much faster„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_138.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_139.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_140.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_141.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_142.png)'
  prefs: []
  type: TYPE_IMG
- en: ÂóØ„ÄÇYeahÔºå but now you have to be careful because now if you would call C dot Nmpy„ÄÇ
    then this would return an error because Ny can only handle CPU tenor„ÄÇ so you cannot
    convert a GP tenor back to Numpy„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_144.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_145.png)'
  prefs: []
  type: TYPE_IMG
- en: So then againÔºå we would have to move it back to the CPU so we can do this by
    saying C equals C dot„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_147.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_148.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_149.png)'
  prefs: []
  type: TYPE_IMG
- en: 2 and then as a string CPU„ÄÇ So now it would be on the CPU again„ÄÇSo yeah„ÄÇ this
    is all the basic operations that I wanted to show you„ÄÇ and one more thing a lot
    of times when a tensor is created„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_151.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_152.png)'
  prefs: []
  type: TYPE_IMG
- en: For exampleÔºå torch dot„ÄÇ1 of size 5„ÄÇ Then a lot of times you see the argument
    requires„ÄÇGrabs equals true„ÄÇ So by defaultÔºå this is false„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_154.png)
  prefs: []
  type: TYPE_NORMAL
- en: And nowÔºå if we print this„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_156.png)
  prefs: []
  type: TYPE_NORMAL
- en: Then we will also see here in our tensor that it will print requires Gr equals
    true„ÄÇSo a lot of times in codeÔºå you will see thisÔºå And this will tell pieytoch
    that it will need to calculate the gradients for thistensor later in your optimization
    steps„ÄÇ![](img/90c2a152a218100453276638b7fdbc56_158.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_159.png)'
  prefs: []
  type: TYPE_IMG
- en: So whenever this means that whenever you have a variable in your model that
    you want to optimize„ÄÇ then you need the gradients„ÄÇ So you need to specify requires
    Gr equals true„ÄÇ But yeah„ÄÇ we will talk about this more in the next tutorial„ÄÇ So
    I hope you enjoyed this tutorial„ÄÇ And if you liked itÔºå please subscribe to the
    channel and see you next timeÔºå bye„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90c2a152a218100453276638b7fdbc56_161.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_162.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/90c2a152a218100453276638b7fdbc56_163.png)'
  prefs: []
  type: TYPE_IMG
