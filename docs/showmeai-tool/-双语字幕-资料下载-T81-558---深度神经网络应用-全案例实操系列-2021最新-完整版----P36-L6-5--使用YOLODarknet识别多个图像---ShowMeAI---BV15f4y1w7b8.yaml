- en: „ÄêÂèåËØ≠Â≠óÂπï+ËµÑÊñô‰∏ãËΩΩ„ÄëT81-558 ÔΩú Ê∑±Â∫¶Á•ûÁªèÁΩëÁªúÂ∫îÁî®-ÂÖ®Ê°à‰æãÂÆûÊìçÁ≥ªÂàó(2021ÊúÄÊñ∞¬∑ÂÆåÊï¥Áâà) - P36ÔºöL6.5- ‰ΩøÁî®YOLODarknetËØÜÂà´Â§ö‰∏™ÂõæÂÉè
    - ShowMeAI - BV15f4y1w7b8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HiÔºå this is Jeff Heaton„ÄÇ Wecome to applications of deep neural networks with
    Washington University„ÄÇ In this videoÔºå we're going to talk about Darknet and yellow„ÄÇ
    I don't mean darknet like the Internet„ÄÇ I meanÔºå darknetÔºå like multiple object
    detection„ÄÇ You probably see all these boxes around me as the system is able to
    detect various things„ÄÇüòäÔºåWe will see how we can make use of this technology in
    Python using Tensorflow for the latest on my AI course and projects„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: click subscribe and the bell next to it to be notified of every new video„ÄÇ All
    right„ÄÇ you'll notice I am in Google co layout for this one„ÄÇ We're going to be
    making use of the GPU„ÄÇ So let's go aheadÔºå make sure you have class 6 of mine open
    and„ÄÇüòäÔºåGoogle Collaboratory„ÄÇ It's on Github„ÄÇ I have a link to the Github repository
    at the bottom of this video in the description„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And we're going to go to runtimeÔºå change runtime type„ÄÇ And I already have it
    in there„ÄÇ But make sure that you have the GPU„ÄÇ Don't worry about this Python 3Ôºå6
    yellow„ÄÇ That was from my local environment„ÄÇ Google does not have that„ÄÇ So you'll
    want Python 3„ÄÇ And we'll save that„ÄÇ So let's scroll down to part 5 of this„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: because this is what we're talking about„ÄÇ We're going to look at how I was able
    to shoot that video that you saw leading up to this that has all the squares around
    that„ÄÇüòä„ÄÇ![](img/e158ad4b49aacee0b95f33252bd7ee13_1.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e158ad4b49aacee0b95f33252bd7ee13_2.png)'
  prefs: []
  type: TYPE_IMG
- en: But we're going to startÔºå and we're going to look at how we can now recognize
    multiple images with a convolution neural network„ÄÇ A single convolution neural
    networkÔºå like we look at a few parts agoÔºå can recognize multiple images„ÄÇ If it's
    big enough„ÄÇ It's able to look at an image and mark these„ÄÇ So you'll see microwave
    person„ÄÇ HeyÔºå I'm a person„ÄÇ And several bottles sitting on my window„ÄÇ That is true„ÄÇ
    This is„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: this is my kitchen„ÄÇ actuallyÔºå sink starting to make dinnerÔºå for for meÔºå not
    the dog„ÄÇ but he's there wanting to see what I'm see what I'm doing„ÄÇ He's always
    right around whenever we're cooking something„ÄÇ But this image is trained using
    exactly the same„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e158ad4b49aacee0b95f33252bd7ee13_4.png)'
  prefs: []
  type: TYPE_IMG
- en: Technology that we saw with the convolution neural networks„ÄÇ This is something
    called Yolo„ÄÇ And I give you a link to the paper„ÄÇ Yolow stands for you only look
    once„ÄÇ and what's so cool about this technology is it is using a single convolution
    neural network that has a fairly complex output layer„ÄÇ So it's not a simple classifications„ÄÇ
    Also regression„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And it literally sends out to you all of these images that are found„ÄÇ So that's
    what's really„ÄÇ really cool about this about convolution neural networks„ÄÇ you can
    make those output layers send out just about anything that you wantÔºå really„ÄÇ you
    can have it send out in this caseÔºå multiple bounding rectangles and what it thinks
    is in each of those„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: üòäÔºåIn the next moduleÔºå we'll look at GNs and we'll see that it can even output
    an image„ÄÇ The input to aganN won't be an image„ÄÇ It will actually be a number like
    a seed„ÄÇ and the output will be an image„ÄÇ So a convolution neural networkÔºå the
    input can be images„ÄÇ The output can be images„ÄÇ Both the input and the output can
    be images or one or the other„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So we're going to look at convolution neural networks in quite a few of the
    modules of this class because they're very multifaceted„ÄÇ You can use them for
    natural language processing images„ÄÇ Now„ÄÇ you can also run this on a live stream„ÄÇ
    So this was just a picture that my wife took on on her cell phone„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e158ad4b49aacee0b95f33252bd7ee13_6.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/e158ad4b49aacee0b95f33252bd7ee13_7.png)'
  prefs: []
  type: TYPE_IMG
- en: This isÔºå wellÔºå this is also from a cell phone„ÄÇ This was not using the normal
    camera that I record this class from„ÄÇ So when I was on that video talking about
    thisÔºå I wasn't able to speak to some of the things that it was classifying or
    misclassifying correctly because it was being recorded to a video„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: I don't have a strong enough GPU hooked up on one of my local computers here„ÄÇ
    I normally do GP in the cloud to actually live stream this sort of video„ÄÇ if you
    want to live stream this sort of video„ÄÇ the GPU a Titan V would be great„ÄÇ about
    3000 bucks for one of those„ÄÇ So I presently do not do not own one of those„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: I've thought of itÔºå but just have not most of the stuff that I do is not live
    streaming video„ÄÇ So I I just do this in the cloudÔºå and I use B100sÔºå which are
    similar to those„ÄÇ but it's 4 bucks an hour rather than many thousands of dollars
    for a onetime investment„ÄÇ just depends on what you're going to do„ÄÇ if I was using
    that thing hours and hours a day„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: it would make sense to do the 3„ÄÇ If you look at this„ÄÇ This does show some of
    the limitations„ÄÇ notice it's going beerk on my bookshelf„ÄÇ It is classifying every
    single one of those books„ÄÇüòä„ÄÇIs fascinating about this up here in the image of
    my kitchen„ÄÇ It's not It's classifiedifying as a handful of things Here„ÄÇ It's classifying
    hundreds„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: The processing time is consistent„ÄÇ You only look once it's not looking at each
    of those books„ÄÇ We'll see how that works in a moment„ÄÇ But you can see it's classifying
    the TV monitor and other things„ÄÇ this yellow thing here is actually a toolbox„ÄÇ
    but it keeps thinking it's a remote control or or other things„ÄÇ it is correctly
    classifying my laptop in the videoÔºå it's not always classifying it correctly„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: It is classifying me as two people„ÄÇ My head is one personÔºå the rest of me is
    another person„ÄÇ I also stood for this„ÄÇ stood up because normallyÔºå if you've watched
    a lot of my videos and hopefully have go ahead and subscribe so that you you can
    when I'm sitting down with the usual pose that I use when I introduce and conclude
    a video„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: It wasn't recognizing me„ÄÇ It was just recognizing all my books„ÄÇ And who cares„ÄÇ
    That's boring„ÄÇ I wanted to recognize me„ÄÇ Not that I felt chited or anything by
    that„ÄÇ It's also recognizing my chairÔºå which is good„ÄÇ that's really just one chair„ÄÇ
    So let's talk about how Yo„ÄÇüòäÔºåright nowÔºå this is just about state of the art for
    multiimage detection„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And you can do some reallyÔºå really cool things with this„ÄÇ I mean say I wanted
    to put a dog door on the back of my house„ÄÇ and I only wanted the dog to go through„ÄÇ
    I could just write a very simple program to stream it„ÄÇ And so long as I saw a
    dog somewhere it would open the door„ÄÇ Hopefully„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: it would not misclassify a raccoon as a dog„ÄÇ So how does Yolo work„ÄÇ This is
    a convolution neural network just like we've seen„ÄÇ We create an S by S grid„ÄÇ There's
    several standard sizes for this„ÄÇ Usually it's not too big„ÄÇ It's in the teens„ÄÇ
    typicallyyp it basically resizes your imageÔºå or it puts a grid over it more so„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And it runs the convolution neural networkÔºå and it gets a lot of these squares„ÄÇ
    these potential bounding boxes are called with predictions„ÄÇ But most of them are
    not going to be good enough„ÄÇ We throw them away„ÄÇ We set a threshold and only things
    above that fairly wellestablish threshold„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Are we going to actually display„ÄÇ So you can tune how sensitive it is in that
    regard„ÄÇ Now„ÄÇ this is a convolution neural network„ÄÇ So we need to see how this„ÄÇüòäÔºåIs
    working„ÄÇ The output layer to this is very interesting„ÄÇ So previous neural networks
    that I showed you were either classification or regression„ÄÇ This is both„ÄÇ technicalnicallyÔºå
    the paper calls it regression„ÄÇ So I suppose it's regressionÔºå but„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: I consider this almost a hybrid of classification because here's what's happening„ÄÇEssential„ÄÇ
    a whole bunch of bounding boxes are coming back„ÄÇ What confused me when I first
    looked at Yolo was you'll see here„ÄÇ a whole bunch of squares come back here„ÄÇ Not
    so many„ÄÇ neural network output layers are fixed length„ÄÇ They don't change their
    length„ÄÇ unless they're generative neural network„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: but we'll get more into that when we get into natural language processing„ÄÇ But
    these are not generative in that regard„ÄÇ They're just giving you one set of fixed
    output neurons„ÄÇ And the number of output neurons is fixed„ÄÇ It's a tensor„ÄÇ I was
    wondering at first„ÄÇ how is it giving me a variable list of„ÄÇ WellÔºå the answer is„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: and it's more evident And this figure from the paper„ÄÇ This is the overall grids„ÄÇ
    that's that S by S that you're presenting in„ÄÇ It returns something like this„ÄÇ
    It returns a ton of bounding boxes„ÄÇ The total number of bounding boxes returned
    is always fixed„ÄÇ So there is a fixed number of output neurons„ÄÇ It's just you throw
    away the weaker ones that it's not as confident in„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And here you can see the darkness of the bounding box„ÄÇ So really„ÄÇüòä„ÄÇ![](img/e158ad4b49aacee0b95f33252bd7ee13_9.png)
  prefs: []
  type: TYPE_NORMAL
- en: That's darkÔºå that's dark„ÄÇ That's star and that's dark„ÄÇ So dog by car„ÄÇ So that
    is those are the ones that are ultimately above the threshold and considered„ÄÇ
    So let's look at what that output layer actually looks like because the input
    layer on up„ÄÇ that's just a typical convolution neural network„ÄÇ It's got convolution
    layers„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: maxpoing layers and dense layers„ÄÇ just like any other that you have What you
    haveÔºå though„ÄÇ for the output neurons is a bunch of bounding boxes coming back„ÄÇ
    And each bounding box„ÄÇ So these are the values that are in your output layer„ÄÇ
    and it's just these six things repeated over and over and over again„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So you have x coordinate a Y coordinate„ÄÇ that's the center of one of these bounding
    boxes„ÄÇ Well„ÄÇ they're not boxesÔºå they're rectangles and the width and the height„ÄÇ
    because these don't have to be the same„ÄÇ So they're rectangles that are drawn
    around various things„ÄÇ And then the labels„ÄÇ this is where you can get a bunch
    of these because you might have many thousands of labels„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And here you might have just a handful or 100„ÄÇ each label represents something
    like person dog house„ÄÇ And this is essentially a one hot sort of encoding for
    these labels„ÄÇ So what you get here is„ÄÇ![](img/e158ad4b49aacee0b95f33252bd7ee13_11.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e158ad4b49aacee0b95f33252bd7ee13_12.png)'
  prefs: []
  type: TYPE_IMG
- en: For the labelsÔºå whichever one has the highest value that is the label that it
    actually chose it was„ÄÇ So person would probably have the highest the highest value
    in that label„ÄÇ you could probably also look at the second highest and see if it
    may be thought that it was what the runner up for that guy there was other than
    person„ÄÇ That label aloneÔºå though is not the overall confidence that you're looking
    at„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: you're looking at this confidence„ÄÇ and this confidence is a number that specifies
    if it thinks that there truly is something there„ÄÇ So all of these other boxes
    that you hadÔºå you're not going to display those„ÄÇ you don't even count those„ÄÇ So
    that's how you essentially get this variable number of values coming back„ÄÇ You're
    always getting the same number of bounding rectangles back„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: You're just throwing away most of them„ÄÇ Now let's look at how many actual neurons
    that we have„ÄÇ It's a 3D tensor that comes back„ÄÇ So it's not just a simple linear
    set of output neurons„ÄÇ you can think of it that way„ÄÇ It's really S by S„ÄÇ So however
    many however big that grid was„ÄÇ say 10 by 10„ÄÇ It would be 100 times B B is the
    number of potentially bounding rectangles per grid cell„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e158ad4b49aacee0b95f33252bd7ee13_14.png)'
  prefs: []
  type: TYPE_IMG
- en: How many of those you're going this equation is basically straight fromÔºå from
    the paper„ÄÇ The5 comes from 1Ôºå2Ôºå3Ôºå4 for the XÔºå YÔºå height widthÔºå and then the confidence„ÄÇ
    So that's 5„ÄÇAnd then the number of labels that we have„ÄÇ So that one hot and coating„ÄÇ
    And C is the number of classes that we have„ÄÇ So you have to deal with that„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: It can only classify for actual known known classes„ÄÇ And that gives you all
    your bounding rectangles„ÄÇ You run that„ÄÇ And that's really all there is„ÄÇ is to
    this„ÄÇ NowÔºå looking at what that convolution neural network actually looks like„ÄÇ
    This is your image coming in 4Ôºå4Ôºå8 by 4Ôºå4Ôºå8 is the size that the paper was using„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: It was a scanning convolution layer 7 by 7 goes into another convolution layer„ÄÇ
    another convolution layer„ÄÇ Also with max pooling layers„ÄÇ just exactly like we've
    seen before„ÄÇ There's nothing new about this„ÄÇ The only difference here is we have
    the 7 by 7 by 30 tensor that is being output from it„ÄÇ These are sample images
    from the paper„ÄÇ They even show an example of where it's misclassifying here it
    has problems with the person jumping from that car of that car„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: HeyÔºå he's a plane„ÄÇ NopeÔºå he's notÔºå's he's acting a lot like an airplaneÔºå but
    he's not an airplane„ÄÇ They also talk about some of the limitations of this in
    the paper for yellow„ÄÇ Like if there was a flock of birds„ÄÇUp here and they were
    fairly far off in the distance„ÄÇ it would not recognize them because it has trouble
    recognizing very small„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Highly dense groups of things„ÄÇ It was doing pretty well with the books that
    we saw earlier wouldn't do so well if they were much„ÄÇ much smaller„ÄÇ Now using
    this in Python„ÄÇ I give you some links here„ÄÇ This is to darknet„ÄÇ Now I use this
    as well„ÄÇ This is the C version of it„ÄÇ I've compiled that and basically can run
    it from the command line„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: I've not used it in a C program yet„ÄÇ but many people haveÔºå it's certainly available
    for you„ÄÇ We're going focus more on darkflow„ÄÇ Darkflow is going to let you use
    this in Python„ÄÇ Now we're not going to train a yellow network„ÄÇ You can„ÄÇ We're
    going to go ahead and install darkflow„ÄÇ Now you've got your choice„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: You can do this on Google coabab„ÄÇ That's what I'm going to demonstrate„ÄÇ so that
    we can run it with a GP„ÄÇ It'll be a little faster„ÄÇ mostly for recognizing individual
    images„ÄÇ You you're fine without a GP„ÄÇ If you want to actually record live video„ÄÇ
    then you're really going to want to have some sort of a GP on your actual system„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: but using individual images„ÄÇ You're fine with you're fine with a CPU„ÄÇ It'll
    take like 5 to 10 seconds for a single image„ÄÇ We're going to„ÄÇRun dark low Yolo
    from Google Col„ÄÇ I'm going to take you through the instructions real quick„ÄÇ It's
    that hard„ÄÇ We're going to need some files„ÄÇ So we're going need the weights because
    we're not going to train a yolo„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: We're going to use the original weights that the author of the paper got for
    us„ÄÇ This is kind of leading up to transfer learningÔºå which we're going learn about
    later where we can make weights that we're actually generated by people who have
    very high training environments with many„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: many GPs and spent potentially manyÔºå many weeks training them„ÄÇ So we'll be able
    to benefit from those weights and load them in„ÄÇ This is starting to get there„ÄÇ
    We're going to do this both in this module in the next module„ÄÇ we're going to
    benefit from already trained neural networks„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And we're not sending them off to the cloud„ÄÇ We've literally got these weights
    in our computer and can look at them if we so desire„ÄÇ So you're going to need
    three files to run thisÔºå and you'll need to put them in your Google drive„ÄÇ You're
    going to need weightsÔºå Yolo do weights„ÄÇ We're going to need the configuration
    file„ÄÇ and we're going to need the labels file„ÄÇ NowÔºå I have some scripts that you
    can run here that do this really quite easily for you„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So the first thing we're going to need to do is„ÄÇüòäÔºåone the dark flow and Github„ÄÇ
    So let's do that„ÄÇ So we're resetting all runtime„ÄÇ So I've run this before because
    I tested it„ÄÇ ands it still has to re clone it„ÄÇ Google deletes everything that
    you put on here except for what you put in Google Drive„ÄÇ So always remember that„ÄÇ
    we've made a clone of it„ÄÇ Now we're going do a special Pip install„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: And this will install darkflow into Python„ÄÇ Now I'm in Google Coab„ÄÇ I've got
    to do this every time that I restart my environment„ÄÇ And notice I'm giving it
    a directory„ÄÇ That's that same darkflow directory that we just checked out„ÄÇ So
    that's handy„ÄÇ So I run that and we're now doing a Pip install of darkflow„ÄÇ And
    now we have darkflow installed„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: Now if you're doing this on your local computerÔºå you'll need to basically do
    these exact same steps„ÄÇ but you need some prerequisites to be able to run darkflow„ÄÇ
    You needthon and open C„ÄÇ So make sure you install those and read up on how to
    do those„ÄÇ Def the easier approach for this is to use Google coab here I'm going
    to mount my drive„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: This is how I actually make my G drive available in here„ÄÇ And I'm running that
    has to do some security„ÄÇ I have to pick who I want to be Now am„ÄÇüòä„ÄÇBlocking this
    all for security reasons„ÄÇ and then you copy and paste this little token that it
    gives me„ÄÇ come back to Google coab put it into here„ÄÇ and now I can unblock Now
    these commands„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: these are Unix commands„ÄÇ this saves you the trouble of having to drag and drop
    all of those individual files„ÄÇ I'm going go ahead and run this and all this is
    doing is creating a directory called projects in my Google Drive then inside of
    there I have Yolo„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So I typically create a projects directory my Google Drive and all these things
    that I need coab I just put them in these various location„ÄÇ So in YoloÔºå we have
    a bin and we have a configuration directory hopefully that all worked that should
    have all so that is all those files have now been downloaded you're going run
    locally here's a link with instructions from the author site on how to do this
    Now we're going to run this part„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: first of all pick which of these you want to have So we have to change into
    the directory that we're actually running this from„ÄÇ So if you downloaded this
    your local drive you need whatever your path is's where I tend to store things„ÄÇ
    But here I'm going to change my„ÄÇDiy to my Google drive to yellow„ÄÇ and then the
    options„ÄÇ If you're running a GPUÔºå then you want this part to be GPU 1„ÄÇ OtherwiseÔºå
    you don't„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So we're gonna run it with GPU„ÄÇ We're going to pull an image across the Internet„ÄÇ
    We're going to use cook JPgÔºå which is me cooking in the kitchen„ÄÇ You saw that
    earlier with my dog And let's go ahead and run this„ÄÇ Now it's going to load the
    weights in from that pretrained neural network„ÄÇ See it's building it„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: There's all those convolution layers that we saw„ÄÇ and this is a decently complicated
    convolution neural network„ÄÇ but it's just one convolution neural network that
    learns to recognize all those different image types„ÄÇ That's what's reallyÔºå really
    cool about this„ÄÇ We run in GPU mode and it finishes veryÔºå very quickly„ÄÇ NowÔºå the
    GPU that Google gives you is greatÔºå and it saves us hours on this„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: but it's nothing compared to the next level upÔºå which would be like a Titan
    VÔºå which„ÄÇüòä„ÄÇI haven't run it on that highÔºå high end of1„ÄÇ I could„ÄÇ I could do that
    with the enterprise equivalent on of V 100 on Amazon„ÄÇ But that would do this even
    quicker„ÄÇ And that's what you need for real time real time video because you need
    to be able to do 30 or so a second„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: if you truly want to be in the range of real time„ÄÇ NowÔºå let's run it and we'll
    see the results„ÄÇ Now„ÄÇ instead of getting that image with the bounding boxes and
    text all around it„ÄÇ Now I get those output values that we talked about„ÄÇ So we
    see personÔºå dogÔºå catÔºå bottleÔºå microwave„ÄÇ ovenÔºå sink all those various thingsÔºå
    the confidence„ÄÇ And then the coordinates and sizes„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: So we see basically the top left in the bottom right„ÄÇ It's translating the centers
    and the width and height into into bounding coordinates„ÄÇ So this is great„ÄÇ You
    can do all kinds of things with this in your own programs to detect various things
    in images„ÄÇüòä„ÄÇ
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e158ad4b49aacee0b95f33252bd7ee13_16.png)'
  prefs: []
  type: TYPE_IMG
- en: Thank you for watching this video in the next video we're going to begin to
    look at GAN neural networks„ÄÇThis content changes oftenÔºå so subscribe to the channel
    to stay up to date on this course and other topics in artificial intelligence„ÄÇ
  prefs: []
  type: TYPE_NORMAL
